
stm32_stuff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b58  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006c18  08006c18  00007c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e5c  08006e5c  00008070  2**0
                  CONTENTS
  4 .ARM          00000000  08006e5c  08006e5c  00008070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e5c  08006e5c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e5c  08006e5c  00007e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e60  08006e60  00007e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006e64  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  20000070  08006ed4  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000de8  08006ed4  00008de8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012779  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002960  00000000  00000000  0001a811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001d178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d15  00000000  00000000  0001e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001247b  00000000  00000000  0001ef4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001381c  00000000  00000000  000313c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e5e9  00000000  00000000  00044be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b31cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004404  00000000  00000000  000b3210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000b7614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c00 	.word	0x08006c00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006c00 	.word	0x08006c00

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	4a06      	ldr	r2, [pc, #24]	@ (800026c <vApplicationGetIdleTaskMemory+0x28>)
 8000254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	4a05      	ldr	r2, [pc, #20]	@ (8000270 <vApplicationGetIdleTaskMemory+0x2c>)
 800025a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2240      	movs	r2, #64	@ 0x40
 8000260:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000262:	46c0      	nop			@ (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b004      	add	sp, #16
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	2000008c 	.word	0x2000008c
 8000270:	2000012c 	.word	0x2000012c

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b5b0      	push	{r4, r5, r7, lr}
 8000276:	b090      	sub	sp, #64	@ 0x40
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027a:	f000 fe95 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027e:	f000 f849 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000282:	f000 f96f 	bl	8000564 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000286:	f000 f93d 	bl	8000504 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800028a:	f000 f883 	bl	8000394 <MX_TIM1_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of time_sem */
  osSemaphoreDef(time_sem);
 800028e:	2138      	movs	r1, #56	@ 0x38
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2200      	movs	r2, #0
 800029a:	605a      	str	r2, [r3, #4]
  time_semHandle = osSemaphoreCreate(osSemaphore(time_sem), 1);
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2101      	movs	r1, #1
 80002a0:	0018      	movs	r0, r3
 80002a2:	f003 fab5 	bl	8003810 <osSemaphoreCreate>
 80002a6:	0002      	movs	r2, r0
 80002a8:	4b15      	ldr	r3, [pc, #84]	@ (8000300 <main+0x8c>)
 80002aa:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreRelease(time_semHandle);
 80002ac:	4b14      	ldr	r3, [pc, #80]	@ (8000300 <main+0x8c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	0018      	movs	r0, r3
 80002b2:	f003 fb2b 	bl	800390c <osSemaphoreRelease>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002b6:	251c      	movs	r5, #28
 80002b8:	197b      	adds	r3, r7, r5
 80002ba:	4a12      	ldr	r2, [pc, #72]	@ (8000304 <main+0x90>)
 80002bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002be:	c313      	stmia	r3!, {r0, r1, r4}
 80002c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002c2:	c313      	stmia	r3!, {r0, r1, r4}
 80002c4:	6812      	ldr	r2, [r2, #0]
 80002c6:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002c8:	197b      	adds	r3, r7, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	0018      	movs	r0, r3
 80002ce:	f003 fa3e 	bl	800374e <osThreadCreate>
 80002d2:	0002      	movs	r2, r0
 80002d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <main+0x94>)
 80002d6:	601a      	str	r2, [r3, #0]

  /* definition and creation of consoleTask */
  osThreadDef(consoleTask, start_console_task, osPriorityLow, 0, 256);
 80002d8:	003b      	movs	r3, r7
 80002da:	4a0c      	ldr	r2, [pc, #48]	@ (800030c <main+0x98>)
 80002dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002de:	c313      	stmia	r3!, {r0, r1, r4}
 80002e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002e2:	c313      	stmia	r3!, {r0, r1, r4}
 80002e4:	6812      	ldr	r2, [r2, #0]
 80002e6:	601a      	str	r2, [r3, #0]
  consoleTaskHandle = osThreadCreate(osThread(consoleTask), NULL);
 80002e8:	003b      	movs	r3, r7
 80002ea:	2100      	movs	r1, #0
 80002ec:	0018      	movs	r0, r3
 80002ee:	f003 fa2e 	bl	800374e <osThreadCreate>
 80002f2:	0002      	movs	r2, r0
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <main+0x9c>)
 80002f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002f8:	f003 fa21 	bl	800373e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002fc:	46c0      	nop			@ (mov r8, r8)
 80002fe:	e7fd      	b.n	80002fc <main+0x88>
 8000300:	20000304 	.word	0x20000304
 8000304:	08006c24 	.word	0x08006c24
 8000308:	200002fc 	.word	0x200002fc
 800030c:	08006c4c 	.word	0x08006c4c
 8000310:	20000300 	.word	0x20000300

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b091      	sub	sp, #68	@ 0x44
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	2410      	movs	r4, #16
 800031c:	193b      	adds	r3, r7, r4
 800031e:	0018      	movs	r0, r3
 8000320:	2330      	movs	r3, #48	@ 0x30
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f005 fae3 	bl	80058f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032a:	003b      	movs	r3, r7
 800032c:	0018      	movs	r0, r3
 800032e:	2310      	movs	r3, #16
 8000330:	001a      	movs	r2, r3
 8000332:	2100      	movs	r1, #0
 8000334:	f005 fadc 	bl	80058f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000338:	0021      	movs	r1, r4
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2202      	movs	r2, #2
 800033e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2201      	movs	r2, #1
 8000344:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2210      	movs	r2, #16
 800034a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2200      	movs	r2, #0
 8000350:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000352:	187b      	adds	r3, r7, r1
 8000354:	0018      	movs	r0, r3
 8000356:	f001 f8cd 	bl	80014f4 <HAL_RCC_OscConfig>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800035e:	f000 fcb5 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	003b      	movs	r3, r7
 8000364:	2207      	movs	r2, #7
 8000366:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000368:	003b      	movs	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036e:	003b      	movs	r3, r7
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000374:	003b      	movs	r3, r7
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800037a:	003b      	movs	r3, r7
 800037c:	2100      	movs	r1, #0
 800037e:	0018      	movs	r0, r3
 8000380:	f001 fbd6 	bl	8001b30 <HAL_RCC_ClockConfig>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000388:	f000 fca0 	bl	8000ccc <Error_Handler>
  }
}
 800038c:	46c0      	nop			@ (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b011      	add	sp, #68	@ 0x44
 8000392:	bd90      	pop	{r4, r7, pc}

08000394 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b096      	sub	sp, #88	@ 0x58
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039a:	2348      	movs	r3, #72	@ 0x48
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	0018      	movs	r0, r3
 80003a0:	2310      	movs	r3, #16
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f005 faa3 	bl	80058f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003aa:	2340      	movs	r3, #64	@ 0x40
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	0018      	movs	r0, r3
 80003b0:	2308      	movs	r3, #8
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f005 fa9b 	bl	80058f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ba:	2324      	movs	r3, #36	@ 0x24
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	0018      	movs	r0, r3
 80003c0:	231c      	movs	r3, #28
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f005 fa93 	bl	80058f0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	0018      	movs	r0, r3
 80003ce:	2320      	movs	r3, #32
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f005 fa8c 	bl	80058f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d8:	4b46      	ldr	r3, [pc, #280]	@ (80004f4 <MX_TIM1_Init+0x160>)
 80003da:	4a47      	ldr	r2, [pc, #284]	@ (80004f8 <MX_TIM1_Init+0x164>)
 80003dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003de:	4b45      	ldr	r3, [pc, #276]	@ (80004f4 <MX_TIM1_Init+0x160>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e4:	4b43      	ldr	r3, [pc, #268]	@ (80004f4 <MX_TIM1_Init+0x160>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80003ea:	4b42      	ldr	r3, [pc, #264]	@ (80004f4 <MX_TIM1_Init+0x160>)
 80003ec:	4a43      	ldr	r2, [pc, #268]	@ (80004fc <MX_TIM1_Init+0x168>)
 80003ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f0:	4b40      	ldr	r3, [pc, #256]	@ (80004f4 <MX_TIM1_Init+0x160>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f6:	4b3f      	ldr	r3, [pc, #252]	@ (80004f4 <MX_TIM1_Init+0x160>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003fc:	4b3d      	ldr	r3, [pc, #244]	@ (80004f4 <MX_TIM1_Init+0x160>)
 80003fe:	2280      	movs	r2, #128	@ 0x80
 8000400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000402:	4b3c      	ldr	r3, [pc, #240]	@ (80004f4 <MX_TIM1_Init+0x160>)
 8000404:	0018      	movs	r0, r3
 8000406:	f001 fcd9 	bl	8001dbc <HAL_TIM_Base_Init>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800040e:	f000 fc5d 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000412:	2148      	movs	r1, #72	@ 0x48
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2280      	movs	r2, #128	@ 0x80
 8000418:	0152      	lsls	r2, r2, #5
 800041a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800041c:	187a      	adds	r2, r7, r1
 800041e:	4b35      	ldr	r3, [pc, #212]	@ (80004f4 <MX_TIM1_Init+0x160>)
 8000420:	0011      	movs	r1, r2
 8000422:	0018      	movs	r0, r3
 8000424:	f001 fede 	bl	80021e4 <HAL_TIM_ConfigClockSource>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800042c:	f000 fc4e 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000430:	4b30      	ldr	r3, [pc, #192]	@ (80004f4 <MX_TIM1_Init+0x160>)
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fd12 	bl	8001e5c <HAL_TIM_PWM_Init>
 8000438:	1e03      	subs	r3, r0, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800043c:	f000 fc46 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000440:	2140      	movs	r1, #64	@ 0x40
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044e:	187a      	adds	r2, r7, r1
 8000450:	4b28      	ldr	r3, [pc, #160]	@ (80004f4 <MX_TIM1_Init+0x160>)
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f002 fb31 	bl	8002abc <HAL_TIMEx_MasterConfigSynchronization>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800045e:	f000 fc35 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000462:	2124      	movs	r1, #36	@ 0x24
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2260      	movs	r2, #96	@ 0x60
 8000468:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5000;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	4a24      	ldr	r2, [pc, #144]	@ (8000500 <MX_TIM1_Init+0x16c>)
 800046e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800048e:	1879      	adds	r1, r7, r1
 8000490:	4b18      	ldr	r3, [pc, #96]	@ (80004f4 <MX_TIM1_Init+0x160>)
 8000492:	2200      	movs	r2, #0
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fddf 	bl	8002058 <HAL_TIM_PWM_ConfigChannel>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800049e:	f000 fc15 	bl	8000ccc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2280      	movs	r2, #128	@ 0x80
 80004c4:	0192      	lsls	r2, r2, #6
 80004c6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004ce:	1d3a      	adds	r2, r7, #4
 80004d0:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <MX_TIM1_Init+0x160>)
 80004d2:	0011      	movs	r1, r2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 fb43 	bl	8002b60 <HAL_TIMEx_ConfigBreakDeadTime>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80004de:	f000 fbf5 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004e2:	4b04      	ldr	r3, [pc, #16]	@ (80004f4 <MX_TIM1_Init+0x160>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fc41 	bl	8000d6c <HAL_TIM_MspPostInit>

}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b016      	add	sp, #88	@ 0x58
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	2000022c 	.word	0x2000022c
 80004f8:	40012c00 	.word	0x40012c00
 80004fc:	00002710 	.word	0x00002710
 8000500:	00001388 	.word	0x00001388

08000504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000508:	4b14      	ldr	r3, [pc, #80]	@ (800055c <MX_USART2_UART_Init+0x58>)
 800050a:	4a15      	ldr	r2, [pc, #84]	@ (8000560 <MX_USART2_UART_Init+0x5c>)
 800050c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800050e:	4b13      	ldr	r3, [pc, #76]	@ (800055c <MX_USART2_UART_Init+0x58>)
 8000510:	22e1      	movs	r2, #225	@ 0xe1
 8000512:	0252      	lsls	r2, r2, #9
 8000514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000516:	4b11      	ldr	r3, [pc, #68]	@ (800055c <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_USART2_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000522:	4b0e      	ldr	r3, [pc, #56]	@ (800055c <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <MX_USART2_UART_Init+0x58>)
 800052a:	220c      	movs	r2, #12
 800052c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052e:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000534:	4b09      	ldr	r3, [pc, #36]	@ (800055c <MX_USART2_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <MX_USART2_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000546:	4b05      	ldr	r3, [pc, #20]	@ (800055c <MX_USART2_UART_Init+0x58>)
 8000548:	0018      	movs	r0, r3
 800054a:	f002 fb8b 	bl	8002c64 <HAL_UART_Init>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000552:	f000 fbbb 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000556:	46c0      	nop			@ (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000274 	.word	0x20000274
 8000560:	40004400 	.word	0x40004400

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	0018      	movs	r0, r3
 800056e:	2314      	movs	r3, #20
 8000570:	001a      	movs	r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	f005 f9bc 	bl	80058f0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_GPIO_Init+0x6c>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <MX_GPIO_Init+0x6c>)
 800057e:	2180      	movs	r1, #128	@ 0x80
 8000580:	0289      	lsls	r1, r1, #10
 8000582:	430a      	orrs	r2, r1
 8000584:	615a      	str	r2, [r3, #20]
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <MX_GPIO_Init+0x6c>)
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	2380      	movs	r3, #128	@ 0x80
 800058c:	029b      	lsls	r3, r3, #10
 800058e:	4013      	ands	r3, r2
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|RELAY_ON_Pin, GPIO_PIN_RESET);
 8000594:	2390      	movs	r3, #144	@ 0x90
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	2200      	movs	r2, #0
 800059a:	2103      	movs	r1, #3
 800059c:	0018      	movs	r0, r3
 800059e:	f000 ff8b 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin RELAY_ON_Pin */
  GPIO_InitStruct.Pin = LED_Pin|RELAY_ON_Pin;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2203      	movs	r2, #3
 80005a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2201      	movs	r2, #1
 80005ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	1d3a      	adds	r2, r7, #4
 80005bc:	2390      	movs	r3, #144	@ 0x90
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	0011      	movs	r1, r2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fe08 	bl	80011d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b006      	add	sp, #24
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000

080005d4 <handle_rx_complete>:
static char rx_buffer[BUF_SIZE];
static volatile size_t rx_index = 0;
// static const char resp[8] = "12 34\n";

void handle_rx_complete(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b090      	sub	sp, #64	@ 0x40
 80005d8:	af02      	add	r7, sp, #8
	char tx[16] = "";
 80005da:	2524      	movs	r5, #36	@ 0x24
 80005dc:	197b      	adds	r3, r7, r5
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	3304      	adds	r3, #4
 80005e4:	220c      	movs	r2, #12
 80005e6:	2100      	movs	r1, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f005 f981 	bl	80058f0 <memset>
	int r = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	637b      	str	r3, [r7, #52]	@ 0x34

	//if (strncmp(rx_buffer, "st ", 3) == 0) {}
	if (rx_buffer[0] == 'g' && rx_buffer[1] == 't') {
 80005f2:	4bd2      	ldr	r3, [pc, #840]	@ (800093c <handle_rx_complete+0x368>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b67      	cmp	r3, #103	@ 0x67
 80005f8:	d129      	bne.n	800064e <handle_rx_complete+0x7a>
 80005fa:	4bd0      	ldr	r3, [pc, #832]	@ (800093c <handle_rx_complete+0x368>)
 80005fc:	785b      	ldrb	r3, [r3, #1]
 80005fe:	2b74      	cmp	r3, #116	@ 0x74
 8000600:	d125      	bne.n	800064e <handle_rx_complete+0x7a>
		osSemaphoreWait(time_semHandle, 0);
 8000602:	4bcf      	ldr	r3, [pc, #828]	@ (8000940 <handle_rx_complete+0x36c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2100      	movs	r1, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f003 f935 	bl	8003878 <osSemaphoreWait>
		snprintf(tx, sizeof(tx), "%02u:%02u:%02u\n", time.hour, time.min, time.sec);
 800060e:	4bcd      	ldr	r3, [pc, #820]	@ (8000944 <handle_rx_complete+0x370>)
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	001c      	movs	r4, r3
 8000616:	4bcb      	ldr	r3, [pc, #812]	@ (8000944 <handle_rx_complete+0x370>)
 8000618:	78db      	ldrb	r3, [r3, #3]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	0019      	movs	r1, r3
 800061e:	4bc9      	ldr	r3, [pc, #804]	@ (8000944 <handle_rx_complete+0x370>)
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4ac8      	ldr	r2, [pc, #800]	@ (8000948 <handle_rx_complete+0x374>)
 8000626:	1978      	adds	r0, r7, r5
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	9100      	str	r1, [sp, #0]
 800062c:	0023      	movs	r3, r4
 800062e:	2110      	movs	r1, #16
 8000630:	f005 f900 	bl	8005834 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)tx, 9, 1000);
 8000634:	23fa      	movs	r3, #250	@ 0xfa
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	1979      	adds	r1, r7, r5
 800063a:	48c4      	ldr	r0, [pc, #784]	@ (800094c <handle_rx_complete+0x378>)
 800063c:	2209      	movs	r2, #9
 800063e:	f002 fb65 	bl	8002d0c <HAL_UART_Transmit>
		osSemaphoreRelease(time_semHandle);
 8000642:	4bbf      	ldr	r3, [pc, #764]	@ (8000940 <handle_rx_complete+0x36c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	0018      	movs	r0, r3
 8000648:	f003 f960 	bl	800390c <osSemaphoreRelease>
 800064c:	e1c1      	b.n	80009d2 <handle_rx_complete+0x3fe>
	}
	else if (rx_buffer[0] == 'g' && rx_buffer[1] == 'o' && rx_buffer[2] == 'n') {
 800064e:	4bbb      	ldr	r3, [pc, #748]	@ (800093c <handle_rx_complete+0x368>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b67      	cmp	r3, #103	@ 0x67
 8000654:	d12e      	bne.n	80006b4 <handle_rx_complete+0xe0>
 8000656:	4bb9      	ldr	r3, [pc, #740]	@ (800093c <handle_rx_complete+0x368>)
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	2b6f      	cmp	r3, #111	@ 0x6f
 800065c:	d12a      	bne.n	80006b4 <handle_rx_complete+0xe0>
 800065e:	4bb7      	ldr	r3, [pc, #732]	@ (800093c <handle_rx_complete+0x368>)
 8000660:	789b      	ldrb	r3, [r3, #2]
 8000662:	2b6e      	cmp	r3, #110	@ 0x6e
 8000664:	d126      	bne.n	80006b4 <handle_rx_complete+0xe0>
		osSemaphoreWait(time_semHandle, 0);
 8000666:	4bb6      	ldr	r3, [pc, #728]	@ (8000940 <handle_rx_complete+0x36c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2100      	movs	r1, #0
 800066c:	0018      	movs	r0, r3
 800066e:	f003 f903 	bl	8003878 <osSemaphoreWait>
		snprintf(tx, sizeof(tx), "%02u:%02u:%02u\n", on_time.hour, on_time.min, on_time.sec);
 8000672:	4bb7      	ldr	r3, [pc, #732]	@ (8000950 <handle_rx_complete+0x37c>)
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	001c      	movs	r4, r3
 800067a:	4bb5      	ldr	r3, [pc, #724]	@ (8000950 <handle_rx_complete+0x37c>)
 800067c:	78db      	ldrb	r3, [r3, #3]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	0019      	movs	r1, r3
 8000682:	4bb3      	ldr	r3, [pc, #716]	@ (8000950 <handle_rx_complete+0x37c>)
 8000684:	789b      	ldrb	r3, [r3, #2]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4aaf      	ldr	r2, [pc, #700]	@ (8000948 <handle_rx_complete+0x374>)
 800068a:	2524      	movs	r5, #36	@ 0x24
 800068c:	1978      	adds	r0, r7, r5
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	9100      	str	r1, [sp, #0]
 8000692:	0023      	movs	r3, r4
 8000694:	2110      	movs	r1, #16
 8000696:	f005 f8cd 	bl	8005834 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)tx, 9, 1000);
 800069a:	23fa      	movs	r3, #250	@ 0xfa
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	1979      	adds	r1, r7, r5
 80006a0:	48aa      	ldr	r0, [pc, #680]	@ (800094c <handle_rx_complete+0x378>)
 80006a2:	2209      	movs	r2, #9
 80006a4:	f002 fb32 	bl	8002d0c <HAL_UART_Transmit>
		osSemaphoreRelease(time_semHandle);
 80006a8:	4ba5      	ldr	r3, [pc, #660]	@ (8000940 <handle_rx_complete+0x36c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	0018      	movs	r0, r3
 80006ae:	f003 f92d 	bl	800390c <osSemaphoreRelease>
 80006b2:	e18e      	b.n	80009d2 <handle_rx_complete+0x3fe>
	}
	else if (rx_buffer[0] == 'g' && rx_buffer[1] == 'o' && rx_buffer[2] == 'f' && rx_buffer[3] == 'f') {
 80006b4:	4ba1      	ldr	r3, [pc, #644]	@ (800093c <handle_rx_complete+0x368>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b67      	cmp	r3, #103	@ 0x67
 80006ba:	d132      	bne.n	8000722 <handle_rx_complete+0x14e>
 80006bc:	4b9f      	ldr	r3, [pc, #636]	@ (800093c <handle_rx_complete+0x368>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	2b6f      	cmp	r3, #111	@ 0x6f
 80006c2:	d12e      	bne.n	8000722 <handle_rx_complete+0x14e>
 80006c4:	4b9d      	ldr	r3, [pc, #628]	@ (800093c <handle_rx_complete+0x368>)
 80006c6:	789b      	ldrb	r3, [r3, #2]
 80006c8:	2b66      	cmp	r3, #102	@ 0x66
 80006ca:	d12a      	bne.n	8000722 <handle_rx_complete+0x14e>
 80006cc:	4b9b      	ldr	r3, [pc, #620]	@ (800093c <handle_rx_complete+0x368>)
 80006ce:	78db      	ldrb	r3, [r3, #3]
 80006d0:	2b66      	cmp	r3, #102	@ 0x66
 80006d2:	d126      	bne.n	8000722 <handle_rx_complete+0x14e>
		osSemaphoreWait(time_semHandle, 0);
 80006d4:	4b9a      	ldr	r3, [pc, #616]	@ (8000940 <handle_rx_complete+0x36c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2100      	movs	r1, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f003 f8cc 	bl	8003878 <osSemaphoreWait>
		snprintf(tx, sizeof(tx), "%02u:%02u:%02u\n", off_time.hour, off_time.min, off_time.sec);
 80006e0:	4b9c      	ldr	r3, [pc, #624]	@ (8000954 <handle_rx_complete+0x380>)
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	001c      	movs	r4, r3
 80006e8:	4b9a      	ldr	r3, [pc, #616]	@ (8000954 <handle_rx_complete+0x380>)
 80006ea:	78db      	ldrb	r3, [r3, #3]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	0019      	movs	r1, r3
 80006f0:	4b98      	ldr	r3, [pc, #608]	@ (8000954 <handle_rx_complete+0x380>)
 80006f2:	789b      	ldrb	r3, [r3, #2]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4a94      	ldr	r2, [pc, #592]	@ (8000948 <handle_rx_complete+0x374>)
 80006f8:	2524      	movs	r5, #36	@ 0x24
 80006fa:	1978      	adds	r0, r7, r5
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	9100      	str	r1, [sp, #0]
 8000700:	0023      	movs	r3, r4
 8000702:	2110      	movs	r1, #16
 8000704:	f005 f896 	bl	8005834 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)tx, 9, 1000);
 8000708:	23fa      	movs	r3, #250	@ 0xfa
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	1979      	adds	r1, r7, r5
 800070e:	488f      	ldr	r0, [pc, #572]	@ (800094c <handle_rx_complete+0x378>)
 8000710:	2209      	movs	r2, #9
 8000712:	f002 fafb 	bl	8002d0c <HAL_UART_Transmit>
		osSemaphoreRelease(time_semHandle);
 8000716:	4b8a      	ldr	r3, [pc, #552]	@ (8000940 <handle_rx_complete+0x36c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	0018      	movs	r0, r3
 800071c:	f003 f8f6 	bl	800390c <osSemaphoreRelease>
 8000720:	e157      	b.n	80009d2 <handle_rx_complete+0x3fe>
	}
	else if (rx_buffer[0] == 's' && rx_buffer[1] == 't') {
 8000722:	4b86      	ldr	r3, [pc, #536]	@ (800093c <handle_rx_complete+0x368>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b73      	cmp	r3, #115	@ 0x73
 8000728:	d162      	bne.n	80007f0 <handle_rx_complete+0x21c>
 800072a:	4b84      	ldr	r3, [pc, #528]	@ (800093c <handle_rx_complete+0x368>)
 800072c:	785b      	ldrb	r3, [r3, #1]
 800072e:	2b74      	cmp	r3, #116	@ 0x74
 8000730:	d15e      	bne.n	80007f0 <handle_rx_complete+0x21c>
		unsigned int hours, mins, secs;
		r = sscanf(rx_buffer, "st %u:%u:%u", &hours, &mins, &secs);
 8000732:	231c      	movs	r3, #28
 8000734:	18fc      	adds	r4, r7, r3
 8000736:	2320      	movs	r3, #32
 8000738:	18fa      	adds	r2, r7, r3
 800073a:	4987      	ldr	r1, [pc, #540]	@ (8000958 <handle_rx_complete+0x384>)
 800073c:	487f      	ldr	r0, [pc, #508]	@ (800093c <handle_rx_complete+0x368>)
 800073e:	2318      	movs	r3, #24
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	0023      	movs	r3, r4
 8000746:	f005 f8a9 	bl	800589c <siscanf>
 800074a:	0003      	movs	r3, r0
 800074c:	637b      	str	r3, [r7, #52]	@ 0x34
		if (r != 3 || hours > 23 || mins > 59 || secs > 59) {
 800074e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000750:	2b03      	cmp	r3, #3
 8000752:	d108      	bne.n	8000766 <handle_rx_complete+0x192>
 8000754:	6a3b      	ldr	r3, [r7, #32]
 8000756:	2b17      	cmp	r3, #23
 8000758:	d805      	bhi.n	8000766 <handle_rx_complete+0x192>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	2b3b      	cmp	r3, #59	@ 0x3b
 800075e:	d802      	bhi.n	8000766 <handle_rx_complete+0x192>
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	2b3b      	cmp	r3, #59	@ 0x3b
 8000764:	d90e      	bls.n	8000784 <handle_rx_complete+0x1b0>
			// Bad
			snprintf(tx, sizeof(tx), "Bad time\n");
 8000766:	4a7d      	ldr	r2, [pc, #500]	@ (800095c <handle_rx_complete+0x388>)
 8000768:	2424      	movs	r4, #36	@ 0x24
 800076a:	193b      	adds	r3, r7, r4
 800076c:	2110      	movs	r1, #16
 800076e:	0018      	movs	r0, r3
 8000770:	f005 f860 	bl	8005834 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)tx, 9, 1000);
 8000774:	23fa      	movs	r3, #250	@ 0xfa
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	1939      	adds	r1, r7, r4
 800077a:	4874      	ldr	r0, [pc, #464]	@ (800094c <handle_rx_complete+0x378>)
 800077c:	2209      	movs	r2, #9
 800077e:	f002 fac5 	bl	8002d0c <HAL_UART_Transmit>
 8000782:	e12d      	b.n	80009e0 <handle_rx_complete+0x40c>
			return;
		}

		osSemaphoreWait(time_semHandle, 0);
 8000784:	4b6e      	ldr	r3, [pc, #440]	@ (8000940 <handle_rx_complete+0x36c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2100      	movs	r1, #0
 800078a:	0018      	movs	r0, r3
 800078c:	f003 f874 	bl	8003878 <osSemaphoreWait>
		time.hour = hours;
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b6b      	ldr	r3, [pc, #428]	@ (8000944 <handle_rx_complete+0x370>)
 8000796:	711a      	strb	r2, [r3, #4]
		time.min = mins;
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b69      	ldr	r3, [pc, #420]	@ (8000944 <handle_rx_complete+0x370>)
 800079e:	70da      	strb	r2, [r3, #3]
		time.sec = secs;
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b67      	ldr	r3, [pc, #412]	@ (8000944 <handle_rx_complete+0x370>)
 80007a6:	709a      	strb	r2, [r3, #2]
		time.msec = 0;
 80007a8:	4b66      	ldr	r3, [pc, #408]	@ (8000944 <handle_rx_complete+0x370>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	801a      	strh	r2, [r3, #0]
		snprintf(tx, sizeof(tx), "%02u:%02u:%02u\n", time.hour, time.min, time.sec);
 80007ae:	4b65      	ldr	r3, [pc, #404]	@ (8000944 <handle_rx_complete+0x370>)
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	001c      	movs	r4, r3
 80007b6:	4b63      	ldr	r3, [pc, #396]	@ (8000944 <handle_rx_complete+0x370>)
 80007b8:	78db      	ldrb	r3, [r3, #3]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	0019      	movs	r1, r3
 80007be:	4b61      	ldr	r3, [pc, #388]	@ (8000944 <handle_rx_complete+0x370>)
 80007c0:	789b      	ldrb	r3, [r3, #2]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4a60      	ldr	r2, [pc, #384]	@ (8000948 <handle_rx_complete+0x374>)
 80007c6:	2524      	movs	r5, #36	@ 0x24
 80007c8:	1978      	adds	r0, r7, r5
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	9100      	str	r1, [sp, #0]
 80007ce:	0023      	movs	r3, r4
 80007d0:	2110      	movs	r1, #16
 80007d2:	f005 f82f 	bl	8005834 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)tx, 9, 1000);
 80007d6:	23fa      	movs	r3, #250	@ 0xfa
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	1979      	adds	r1, r7, r5
 80007dc:	485b      	ldr	r0, [pc, #364]	@ (800094c <handle_rx_complete+0x378>)
 80007de:	2209      	movs	r2, #9
 80007e0:	f002 fa94 	bl	8002d0c <HAL_UART_Transmit>
		osSemaphoreRelease(time_semHandle);
 80007e4:	4b56      	ldr	r3, [pc, #344]	@ (8000940 <handle_rx_complete+0x36c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	0018      	movs	r0, r3
 80007ea:	f003 f88f 	bl	800390c <osSemaphoreRelease>
	else if (rx_buffer[0] == 's' && rx_buffer[1] == 't') {
 80007ee:	e0f0      	b.n	80009d2 <handle_rx_complete+0x3fe>
	}
	else if (rx_buffer[0] == 's' && rx_buffer[1] == 'o' && rx_buffer[2] == 'n') {
 80007f0:	4b52      	ldr	r3, [pc, #328]	@ (800093c <handle_rx_complete+0x368>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b73      	cmp	r3, #115	@ 0x73
 80007f6:	d166      	bne.n	80008c6 <handle_rx_complete+0x2f2>
 80007f8:	4b50      	ldr	r3, [pc, #320]	@ (800093c <handle_rx_complete+0x368>)
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	2b6f      	cmp	r3, #111	@ 0x6f
 80007fe:	d162      	bne.n	80008c6 <handle_rx_complete+0x2f2>
 8000800:	4b4e      	ldr	r3, [pc, #312]	@ (800093c <handle_rx_complete+0x368>)
 8000802:	789b      	ldrb	r3, [r3, #2]
 8000804:	2b6e      	cmp	r3, #110	@ 0x6e
 8000806:	d15e      	bne.n	80008c6 <handle_rx_complete+0x2f2>
		unsigned int hours, mins, secs;
		r = sscanf(rx_buffer, "son %u:%u:%u", &hours, &mins, &secs);
 8000808:	2310      	movs	r3, #16
 800080a:	18fc      	adds	r4, r7, r3
 800080c:	2314      	movs	r3, #20
 800080e:	18fa      	adds	r2, r7, r3
 8000810:	4953      	ldr	r1, [pc, #332]	@ (8000960 <handle_rx_complete+0x38c>)
 8000812:	484a      	ldr	r0, [pc, #296]	@ (800093c <handle_rx_complete+0x368>)
 8000814:	230c      	movs	r3, #12
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	0023      	movs	r3, r4
 800081c:	f005 f83e 	bl	800589c <siscanf>
 8000820:	0003      	movs	r3, r0
 8000822:	637b      	str	r3, [r7, #52]	@ 0x34
		if (r != 3 || hours > 23 || mins > 59 || secs > 59) {
 8000824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000826:	2b03      	cmp	r3, #3
 8000828:	d108      	bne.n	800083c <handle_rx_complete+0x268>
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	2b17      	cmp	r3, #23
 800082e:	d805      	bhi.n	800083c <handle_rx_complete+0x268>
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	2b3b      	cmp	r3, #59	@ 0x3b
 8000834:	d802      	bhi.n	800083c <handle_rx_complete+0x268>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2b3b      	cmp	r3, #59	@ 0x3b
 800083a:	d90e      	bls.n	800085a <handle_rx_complete+0x286>
			// Bad
			snprintf(tx, sizeof(tx), "Bad time\n");
 800083c:	4a47      	ldr	r2, [pc, #284]	@ (800095c <handle_rx_complete+0x388>)
 800083e:	2424      	movs	r4, #36	@ 0x24
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2110      	movs	r1, #16
 8000844:	0018      	movs	r0, r3
 8000846:	f004 fff5 	bl	8005834 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)tx, 9, 1000);
 800084a:	23fa      	movs	r3, #250	@ 0xfa
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	1939      	adds	r1, r7, r4
 8000850:	483e      	ldr	r0, [pc, #248]	@ (800094c <handle_rx_complete+0x378>)
 8000852:	2209      	movs	r2, #9
 8000854:	f002 fa5a 	bl	8002d0c <HAL_UART_Transmit>
 8000858:	e0c2      	b.n	80009e0 <handle_rx_complete+0x40c>
			return;
		}

		osSemaphoreWait(time_semHandle, 0);
 800085a:	4b39      	ldr	r3, [pc, #228]	@ (8000940 <handle_rx_complete+0x36c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2100      	movs	r1, #0
 8000860:	0018      	movs	r0, r3
 8000862:	f003 f809 	bl	8003878 <osSemaphoreWait>
		on_time.hour = hours;
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b39      	ldr	r3, [pc, #228]	@ (8000950 <handle_rx_complete+0x37c>)
 800086c:	711a      	strb	r2, [r3, #4]
		on_time.min = mins;
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b37      	ldr	r3, [pc, #220]	@ (8000950 <handle_rx_complete+0x37c>)
 8000874:	70da      	strb	r2, [r3, #3]
		on_time.sec = secs;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b35      	ldr	r3, [pc, #212]	@ (8000950 <handle_rx_complete+0x37c>)
 800087c:	709a      	strb	r2, [r3, #2]
		on_time.msec = 0;
 800087e:	4b34      	ldr	r3, [pc, #208]	@ (8000950 <handle_rx_complete+0x37c>)
 8000880:	2200      	movs	r2, #0
 8000882:	801a      	strh	r2, [r3, #0]
		snprintf(tx, sizeof(tx), "%02u:%02u:%02u\n", on_time.hour, on_time.min, on_time.sec);
 8000884:	4b32      	ldr	r3, [pc, #200]	@ (8000950 <handle_rx_complete+0x37c>)
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	001c      	movs	r4, r3
 800088c:	4b30      	ldr	r3, [pc, #192]	@ (8000950 <handle_rx_complete+0x37c>)
 800088e:	78db      	ldrb	r3, [r3, #3]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	0019      	movs	r1, r3
 8000894:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <handle_rx_complete+0x37c>)
 8000896:	789b      	ldrb	r3, [r3, #2]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4a2b      	ldr	r2, [pc, #172]	@ (8000948 <handle_rx_complete+0x374>)
 800089c:	2524      	movs	r5, #36	@ 0x24
 800089e:	1978      	adds	r0, r7, r5
 80008a0:	9301      	str	r3, [sp, #4]
 80008a2:	9100      	str	r1, [sp, #0]
 80008a4:	0023      	movs	r3, r4
 80008a6:	2110      	movs	r1, #16
 80008a8:	f004 ffc4 	bl	8005834 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)tx, 9, 1000);
 80008ac:	23fa      	movs	r3, #250	@ 0xfa
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	1979      	adds	r1, r7, r5
 80008b2:	4826      	ldr	r0, [pc, #152]	@ (800094c <handle_rx_complete+0x378>)
 80008b4:	2209      	movs	r2, #9
 80008b6:	f002 fa29 	bl	8002d0c <HAL_UART_Transmit>
		osSemaphoreRelease(time_semHandle);
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <handle_rx_complete+0x36c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	0018      	movs	r0, r3
 80008c0:	f003 f824 	bl	800390c <osSemaphoreRelease>
	else if (rx_buffer[0] == 's' && rx_buffer[1] == 'o' && rx_buffer[2] == 'n') {
 80008c4:	e085      	b.n	80009d2 <handle_rx_complete+0x3fe>
	}
	else if (rx_buffer[0] == 's' && rx_buffer[1] == 'o' && rx_buffer[2] == 'f' && rx_buffer[3] == 'f') {
 80008c6:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <handle_rx_complete+0x368>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b73      	cmp	r3, #115	@ 0x73
 80008cc:	d000      	beq.n	80008d0 <handle_rx_complete+0x2fc>
 80008ce:	e080      	b.n	80009d2 <handle_rx_complete+0x3fe>
 80008d0:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <handle_rx_complete+0x368>)
 80008d2:	785b      	ldrb	r3, [r3, #1]
 80008d4:	2b6f      	cmp	r3, #111	@ 0x6f
 80008d6:	d000      	beq.n	80008da <handle_rx_complete+0x306>
 80008d8:	e07b      	b.n	80009d2 <handle_rx_complete+0x3fe>
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <handle_rx_complete+0x368>)
 80008dc:	789b      	ldrb	r3, [r3, #2]
 80008de:	2b66      	cmp	r3, #102	@ 0x66
 80008e0:	d000      	beq.n	80008e4 <handle_rx_complete+0x310>
 80008e2:	e076      	b.n	80009d2 <handle_rx_complete+0x3fe>
 80008e4:	4b15      	ldr	r3, [pc, #84]	@ (800093c <handle_rx_complete+0x368>)
 80008e6:	78db      	ldrb	r3, [r3, #3]
 80008e8:	2b66      	cmp	r3, #102	@ 0x66
 80008ea:	d172      	bne.n	80009d2 <handle_rx_complete+0x3fe>
		unsigned int hours, mins, secs;
		r = sscanf(rx_buffer, "soff %u:%u:%u", &hours, &mins, &secs);
 80008ec:	1d3c      	adds	r4, r7, #4
 80008ee:	2308      	movs	r3, #8
 80008f0:	18fa      	adds	r2, r7, r3
 80008f2:	491c      	ldr	r1, [pc, #112]	@ (8000964 <handle_rx_complete+0x390>)
 80008f4:	4811      	ldr	r0, [pc, #68]	@ (800093c <handle_rx_complete+0x368>)
 80008f6:	003b      	movs	r3, r7
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	0023      	movs	r3, r4
 80008fc:	f004 ffce 	bl	800589c <siscanf>
 8000900:	0003      	movs	r3, r0
 8000902:	637b      	str	r3, [r7, #52]	@ 0x34
		if (r != 3 || hours > 23 || mins > 59 || secs > 59) {
 8000904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000906:	2b03      	cmp	r3, #3
 8000908:	d108      	bne.n	800091c <handle_rx_complete+0x348>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b17      	cmp	r3, #23
 800090e:	d805      	bhi.n	800091c <handle_rx_complete+0x348>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b3b      	cmp	r3, #59	@ 0x3b
 8000914:	d802      	bhi.n	800091c <handle_rx_complete+0x348>
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	2b3b      	cmp	r3, #59	@ 0x3b
 800091a:	d925      	bls.n	8000968 <handle_rx_complete+0x394>
			// Bad
			snprintf(tx, sizeof(tx), "Bad time\n");
 800091c:	4a0f      	ldr	r2, [pc, #60]	@ (800095c <handle_rx_complete+0x388>)
 800091e:	2424      	movs	r4, #36	@ 0x24
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2110      	movs	r1, #16
 8000924:	0018      	movs	r0, r3
 8000926:	f004 ff85 	bl	8005834 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)tx, 9, 1000);
 800092a:	23fa      	movs	r3, #250	@ 0xfa
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	1939      	adds	r1, r7, r4
 8000930:	4806      	ldr	r0, [pc, #24]	@ (800094c <handle_rx_complete+0x378>)
 8000932:	2209      	movs	r2, #9
 8000934:	f002 f9ea 	bl	8002d0c <HAL_UART_Transmit>
 8000938:	e052      	b.n	80009e0 <handle_rx_complete+0x40c>
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	20000310 	.word	0x20000310
 8000940:	20000304 	.word	0x20000304
 8000944:	20000308 	.word	0x20000308
 8000948:	08006c68 	.word	0x08006c68
 800094c:	20000274 	.word	0x20000274
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	08006c78 	.word	0x08006c78
 800095c:	08006c84 	.word	0x08006c84
 8000960:	08006c90 	.word	0x08006c90
 8000964:	08006ca0 	.word	0x08006ca0
			return;
		}

		osSemaphoreWait(time_semHandle, 0);
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <handle_rx_complete+0x414>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2100      	movs	r1, #0
 800096e:	0018      	movs	r0, r3
 8000970:	f002 ff82 	bl	8003878 <osSemaphoreWait>
		off_time.hour = hours;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <handle_rx_complete+0x418>)
 800097a:	711a      	strb	r2, [r3, #4]
		off_time.min = mins;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <handle_rx_complete+0x418>)
 8000982:	70da      	strb	r2, [r3, #3]
		off_time.sec = secs;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <handle_rx_complete+0x418>)
 800098a:	709a      	strb	r2, [r3, #2]
		off_time.msec = 0;
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <handle_rx_complete+0x418>)
 800098e:	2200      	movs	r2, #0
 8000990:	801a      	strh	r2, [r3, #0]
		snprintf(tx, sizeof(tx), "%02u:%02u:%02u\n", off_time.hour, off_time.min, off_time.sec);
 8000992:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <handle_rx_complete+0x418>)
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	001c      	movs	r4, r3
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <handle_rx_complete+0x418>)
 800099c:	78db      	ldrb	r3, [r3, #3]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	0019      	movs	r1, r3
 80009a2:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <handle_rx_complete+0x418>)
 80009a4:	789b      	ldrb	r3, [r3, #2]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4a11      	ldr	r2, [pc, #68]	@ (80009f0 <handle_rx_complete+0x41c>)
 80009aa:	2524      	movs	r5, #36	@ 0x24
 80009ac:	1978      	adds	r0, r7, r5
 80009ae:	9301      	str	r3, [sp, #4]
 80009b0:	9100      	str	r1, [sp, #0]
 80009b2:	0023      	movs	r3, r4
 80009b4:	2110      	movs	r1, #16
 80009b6:	f004 ff3d 	bl	8005834 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)tx, 9, 1000);
 80009ba:	23fa      	movs	r3, #250	@ 0xfa
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	1979      	adds	r1, r7, r5
 80009c0:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <handle_rx_complete+0x420>)
 80009c2:	2209      	movs	r2, #9
 80009c4:	f002 f9a2 	bl	8002d0c <HAL_UART_Transmit>
		osSemaphoreRelease(time_semHandle);
 80009c8:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <handle_rx_complete+0x414>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	0018      	movs	r0, r3
 80009ce:	f002 ff9d 	bl	800390c <osSemaphoreRelease>
		HAL_UART_Transmit(&huart2, (uint8_t *)"soff hh:mm:ss\n", 14, 1000);

	}
	*/

	HAL_UART_Transmit(&huart2, (uint8_t *)"> ", 2, 1000);
 80009d2:	23fa      	movs	r3, #250	@ 0xfa
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4908      	ldr	r1, [pc, #32]	@ (80009f8 <handle_rx_complete+0x424>)
 80009d8:	4806      	ldr	r0, [pc, #24]	@ (80009f4 <handle_rx_complete+0x420>)
 80009da:	2202      	movs	r2, #2
 80009dc:	f002 f996 	bl	8002d0c <HAL_UART_Transmit>
}
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b00e      	add	sp, #56	@ 0x38
 80009e4:	bdb0      	pop	{r4, r5, r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	20000304 	.word	0x20000304
 80009ec:	20000008 	.word	0x20000008
 80009f0:	08006c68 	.word	0x08006c68
 80009f4:	20000274 	.word	0x20000274
 80009f8:	08006cb0 	.word	0x08006cb0

080009fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint32_t last_timestamp = HAL_GetTick();
 8000a04:	f000 fb2a 	bl	800105c <HAL_GetTick>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	61fb      	str	r3, [r7, #28]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a0c:	4b7b      	ldr	r3, [pc, #492]	@ (8000bfc <StartDefaultTask+0x200>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 fa7b 	bl	8001f0c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000a16:	4b79      	ldr	r3, [pc, #484]	@ (8000bfc <StartDefaultTask+0x200>)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f001 ffc0 	bl	80029a0 <HAL_TIMEx_PWMN_Start>
  /* Infinite loop */
  for(;;)
  {
	// HAL_GPIO_TogglePin(GPIOA, RELAY_ON_Pin);

	osSemaphoreWait(time_semHandle, 0);
 8000a20:	4b77      	ldr	r3, [pc, #476]	@ (8000c00 <StartDefaultTask+0x204>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2100      	movs	r1, #0
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 ff26 	bl	8003878 <osSemaphoreWait>

	uint32_t new_timestamp = HAL_GetTick();
 8000a2c:	f000 fb16 	bl	800105c <HAL_GetTick>
 8000a30:	0003      	movs	r3, r0
 8000a32:	61bb      	str	r3, [r7, #24]
	uint32_t time_ms = time.msec + (time.sec * 1000) + (time.min * 60 * 1000) + (time.hour * 60 * 60 * 1000);
 8000a34:	4b73      	ldr	r3, [pc, #460]	@ (8000c04 <StartDefaultTask+0x208>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	4b71      	ldr	r3, [pc, #452]	@ (8000c04 <StartDefaultTask+0x208>)
 8000a3e:	789b      	ldrb	r3, [r3, #2]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	001a      	movs	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	015b      	lsls	r3, r3, #5
 8000a48:	1a9b      	subs	r3, r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	189b      	adds	r3, r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	18ca      	adds	r2, r1, r3
 8000a52:	4b6c      	ldr	r3, [pc, #432]	@ (8000c04 <StartDefaultTask+0x208>)
 8000a54:	78db      	ldrb	r3, [r3, #3]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	0019      	movs	r1, r3
 8000a5a:	4b6b      	ldr	r3, [pc, #428]	@ (8000c08 <StartDefaultTask+0x20c>)
 8000a5c:	434b      	muls	r3, r1
 8000a5e:	18d2      	adds	r2, r2, r3
 8000a60:	4b68      	ldr	r3, [pc, #416]	@ (8000c04 <StartDefaultTask+0x208>)
 8000a62:	791b      	ldrb	r3, [r3, #4]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	0019      	movs	r1, r3
 8000a68:	4b68      	ldr	r3, [pc, #416]	@ (8000c0c <StartDefaultTask+0x210>)
 8000a6a:	434b      	muls	r3, r1
 8000a6c:	18d3      	adds	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
	uint32_t time_diff_ms = new_timestamp - last_timestamp;
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	613b      	str	r3, [r7, #16]
	time_ms = time_ms + time_diff_ms;
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
	last_timestamp = new_timestamp;
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	61fb      	str	r3, [r7, #28]
	time.msec = time_ms % 1000;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	22fa      	movs	r2, #250	@ 0xfa
 8000a88:	0091      	lsls	r1, r2, #2
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f7ff fbd4 	bl	8000238 <__aeabi_uidivmod>
 8000a90:	000b      	movs	r3, r1
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b5b      	ldr	r3, [pc, #364]	@ (8000c04 <StartDefaultTask+0x208>)
 8000a96:	801a      	strh	r2, [r3, #0]
	time.sec = (time_ms / 1000) % 60;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	22fa      	movs	r2, #250	@ 0xfa
 8000a9c:	0091      	lsls	r1, r2, #2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff fb44 	bl	800012c <__udivsi3>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	213c      	movs	r1, #60	@ 0x3c
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff fbc5 	bl	8000238 <__aeabi_uidivmod>
 8000aae:	000b      	movs	r3, r1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b54      	ldr	r3, [pc, #336]	@ (8000c04 <StartDefaultTask+0x208>)
 8000ab4:	709a      	strb	r2, [r3, #2]
	time.min = (time_ms / (60 * 1000)) % 60;
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	4953      	ldr	r1, [pc, #332]	@ (8000c08 <StartDefaultTask+0x20c>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f7ff fb36 	bl	800012c <__udivsi3>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	213c      	movs	r1, #60	@ 0x3c
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff fbb7 	bl	8000238 <__aeabi_uidivmod>
 8000aca:	000b      	movs	r3, r1
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b4d      	ldr	r3, [pc, #308]	@ (8000c04 <StartDefaultTask+0x208>)
 8000ad0:	70da      	strb	r2, [r3, #3]
	time.hour = (time_ms / (60 * 60 * 1000)) % 24;
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	494d      	ldr	r1, [pc, #308]	@ (8000c0c <StartDefaultTask+0x210>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f7ff fb28 	bl	800012c <__udivsi3>
 8000adc:	0003      	movs	r3, r0
 8000ade:	2118      	movs	r1, #24
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fba9 	bl	8000238 <__aeabi_uidivmod>
 8000ae6:	000b      	movs	r3, r1
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b46      	ldr	r3, [pc, #280]	@ (8000c04 <StartDefaultTask+0x208>)
 8000aec:	711a      	strb	r2, [r3, #4]

	uint32_t on_time_ms = on_time.msec + (on_time.sec * 1000) + (on_time.min * 60 * 1000) + (on_time.hour * 60 * 60 * 1000);
 8000aee:	4b48      	ldr	r3, [pc, #288]	@ (8000c10 <StartDefaultTask+0x214>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	0019      	movs	r1, r3
 8000af6:	4b46      	ldr	r3, [pc, #280]	@ (8000c10 <StartDefaultTask+0x214>)
 8000af8:	789b      	ldrb	r3, [r3, #2]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	001a      	movs	r2, r3
 8000afe:	0013      	movs	r3, r2
 8000b00:	015b      	lsls	r3, r3, #5
 8000b02:	1a9b      	subs	r3, r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	189b      	adds	r3, r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	18ca      	adds	r2, r1, r3
 8000b0c:	4b40      	ldr	r3, [pc, #256]	@ (8000c10 <StartDefaultTask+0x214>)
 8000b0e:	78db      	ldrb	r3, [r3, #3]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	0019      	movs	r1, r3
 8000b14:	4b3c      	ldr	r3, [pc, #240]	@ (8000c08 <StartDefaultTask+0x20c>)
 8000b16:	434b      	muls	r3, r1
 8000b18:	18d2      	adds	r2, r2, r3
 8000b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c10 <StartDefaultTask+0x214>)
 8000b1c:	791b      	ldrb	r3, [r3, #4]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	0019      	movs	r1, r3
 8000b22:	4b3a      	ldr	r3, [pc, #232]	@ (8000c0c <StartDefaultTask+0x210>)
 8000b24:	434b      	muls	r3, r1
 8000b26:	18d3      	adds	r3, r2, r3
 8000b28:	60fb      	str	r3, [r7, #12]
	uint32_t off_time_ms = off_time.msec + (off_time.sec * 1000) + (off_time.min * 60 * 1000) + (off_time.hour * 60 * 60 * 1000);
 8000b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c14 <StartDefaultTask+0x218>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	0019      	movs	r1, r3
 8000b32:	4b38      	ldr	r3, [pc, #224]	@ (8000c14 <StartDefaultTask+0x218>)
 8000b34:	789b      	ldrb	r3, [r3, #2]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	001a      	movs	r2, r3
 8000b3a:	0013      	movs	r3, r2
 8000b3c:	015b      	lsls	r3, r3, #5
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	189b      	adds	r3, r3, r2
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	18ca      	adds	r2, r1, r3
 8000b48:	4b32      	ldr	r3, [pc, #200]	@ (8000c14 <StartDefaultTask+0x218>)
 8000b4a:	78db      	ldrb	r3, [r3, #3]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	0019      	movs	r1, r3
 8000b50:	4b2d      	ldr	r3, [pc, #180]	@ (8000c08 <StartDefaultTask+0x20c>)
 8000b52:	434b      	muls	r3, r1
 8000b54:	18d2      	adds	r2, r2, r3
 8000b56:	4b2f      	ldr	r3, [pc, #188]	@ (8000c14 <StartDefaultTask+0x218>)
 8000b58:	791b      	ldrb	r3, [r3, #4]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <StartDefaultTask+0x210>)
 8000b60:	434b      	muls	r3, r1
 8000b62:	18d3      	adds	r3, r2, r3
 8000b64:	60bb      	str	r3, [r7, #8]

	// Check if passed on/off time
	if ((on_time_ms <= off_time_ms) && (on_time_ms <= time_ms && time_ms < off_time_ms)) {
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d80f      	bhi.n	8000b8e <StartDefaultTask+0x192>
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d80b      	bhi.n	8000b8e <StartDefaultTask+0x192>
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d207      	bcs.n	8000b8e <StartDefaultTask+0x192>
		// Same day on/off
		// Turn on
		HAL_GPIO_WritePin(GPIOA, RELAY_ON_Pin, GPIO_PIN_SET);
 8000b7e:	2390      	movs	r3, #144	@ 0x90
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	2201      	movs	r2, #1
 8000b84:	2102      	movs	r1, #2
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 fc96 	bl	80014b8 <HAL_GPIO_WritePin>
 8000b8c:	e01a      	b.n	8000bc4 <StartDefaultTask+0x1c8>
	}
	else if ((on_time_ms > off_time_ms) && (on_time_ms <= time_ms || time_ms < off_time_ms)) {
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d90f      	bls.n	8000bb6 <StartDefaultTask+0x1ba>
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d903      	bls.n	8000ba6 <StartDefaultTask+0x1aa>
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d207      	bcs.n	8000bb6 <StartDefaultTask+0x1ba>
		// Different days on/off
		// Turn on
		HAL_GPIO_WritePin(GPIOA, RELAY_ON_Pin, GPIO_PIN_SET);
 8000ba6:	2390      	movs	r3, #144	@ 0x90
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	2201      	movs	r2, #1
 8000bac:	2102      	movs	r1, #2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 fc82 	bl	80014b8 <HAL_GPIO_WritePin>
 8000bb4:	e006      	b.n	8000bc4 <StartDefaultTask+0x1c8>
	}
	else {
		// Turn off
		HAL_GPIO_WritePin(GPIOA, RELAY_ON_Pin, GPIO_PIN_RESET);
 8000bb6:	2390      	movs	r3, #144	@ 0x90
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fc7a 	bl	80014b8 <HAL_GPIO_WritePin>
	}

	osSemaphoreRelease(time_semHandle);
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <StartDefaultTask+0x204>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f002 fe9f 	bl	800390c <osSemaphoreRelease>
	osDelay(5000);
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <StartDefaultTask+0x21c>)
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f002 fe09 	bl	80037e8 <osDelay>

	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000bd6:	2390      	movs	r3, #144	@ 0x90
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2101      	movs	r1, #1
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 fc6a 	bl	80014b8 <HAL_GPIO_WritePin>
	osDelay(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f002 fdff 	bl	80037e8 <osDelay>
	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8000bea:	2390      	movs	r3, #144	@ 0x90
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fc60 	bl	80014b8 <HAL_GPIO_WritePin>
  {
 8000bf8:	e712      	b.n	8000a20 <StartDefaultTask+0x24>
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	2000022c 	.word	0x2000022c
 8000c00:	20000304 	.word	0x20000304
 8000c04:	20000308 	.word	0x20000308
 8000c08:	0000ea60 	.word	0x0000ea60
 8000c0c:	0036ee80 	.word	0x0036ee80
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000008 	.word	0x20000008
 8000c18:	00001388 	.word	0x00001388

08000c1c <start_console_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_console_task */
void start_console_task(void const * argument)
{
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_console_task */
  HAL_StatusTypeDef ret;
  uint8_t rx_byte = 0;
 8000c24:	230e      	movs	r3, #14
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart2, (const uint8_t *)"****\nBoot\n", 10, 1000);
 8000c2c:	23fa      	movs	r3, #250	@ 0xfa
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4922      	ldr	r1, [pc, #136]	@ (8000cbc <start_console_task+0xa0>)
 8000c32:	4823      	ldr	r0, [pc, #140]	@ (8000cc0 <start_console_task+0xa4>)
 8000c34:	220a      	movs	r2, #10
 8000c36:	f002 f869 	bl	8002d0c <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
    ret = HAL_UART_Receive(&huart2, &rx_byte, 1, 1000);
 8000c3a:	260f      	movs	r6, #15
 8000c3c:	19bc      	adds	r4, r7, r6
 8000c3e:	23fa      	movs	r3, #250	@ 0xfa
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	250e      	movs	r5, #14
 8000c44:	1979      	adds	r1, r7, r5
 8000c46:	481e      	ldr	r0, [pc, #120]	@ (8000cc0 <start_console_task+0xa4>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f002 f8ff 	bl	8002e4c <HAL_UART_Receive>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	7023      	strb	r3, [r4, #0]
    switch (ret) {
 8000c52:	19bb      	adds	r3, r7, r6
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d12c      	bne.n	8000cb4 <start_console_task+0x98>
    case HAL_TIMEOUT:
    case HAL_ERROR:
    case HAL_BUSY:
    	break;
    case HAL_OK:
    	HAL_UART_Transmit(&huart2, &rx_byte, 1, 1000); // Echo
 8000c5a:	23fa      	movs	r3, #250	@ 0xfa
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	1979      	adds	r1, r7, r5
 8000c60:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <start_console_task+0xa4>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	f002 f852 	bl	8002d0c <HAL_UART_Transmit>
    	if (rx_byte == '\n' || rx_byte == '\r') {
 8000c68:	197b      	adds	r3, r7, r5
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b0a      	cmp	r3, #10
 8000c6e:	d003      	beq.n	8000c78 <start_console_task+0x5c>
 8000c70:	197b      	adds	r3, r7, r5
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b0d      	cmp	r3, #13
 8000c76:	d10a      	bne.n	8000c8e <start_console_task+0x72>
    		rx_buffer[rx_index] = 0; // Terminate string
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <start_console_task+0xa8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a12      	ldr	r2, [pc, #72]	@ (8000cc8 <start_console_task+0xac>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	54d1      	strb	r1, [r2, r3]
    		handle_rx_complete();
 8000c82:	f7ff fca7 	bl	80005d4 <handle_rx_complete>
    		rx_index = 0;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <start_console_task+0xa8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	e012      	b.n	8000cb4 <start_console_task+0x98>
    	} else {
    		rx_buffer[rx_index] = rx_byte;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <start_console_task+0xa8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	220e      	movs	r2, #14
 8000c94:	18ba      	adds	r2, r7, r2
 8000c96:	7811      	ldrb	r1, [r2, #0]
 8000c98:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc8 <start_console_task+0xac>)
 8000c9a:	54d1      	strb	r1, [r2, r3]
    		rx_index++;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <start_console_task+0xa8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <start_console_task+0xa8>)
 8000ca4:	601a      	str	r2, [r3, #0]
    		if (rx_index >= (BUF_SIZE - 1)) {
 8000ca6:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <start_console_task+0xa8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b3e      	cmp	r3, #62	@ 0x3e
 8000cac:	d902      	bls.n	8000cb4 <start_console_task+0x98>
    			// Too long command...
    			// TODO: print error
    			rx_index = 0;
 8000cae:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <start_console_task+0xa8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
    		}
    	}
    }

    osDelay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f002 fd97 	bl	80037e8 <osDelay>
    ret = HAL_UART_Receive(&huart2, &rx_byte, 1, 1000);
 8000cba:	e7be      	b.n	8000c3a <start_console_task+0x1e>
 8000cbc:	08006cb4 	.word	0x08006cb4
 8000cc0:	20000274 	.word	0x20000274
 8000cc4:	20000350 	.word	0x20000350
 8000cc8:	20000310 	.word	0x20000310

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	e7fd      	b.n	8000cd4 <Error_Handler+0x8>

08000cd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_MspInit+0x50>)
 8000ce0:	699a      	ldr	r2, [r3, #24]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <HAL_MspInit+0x50>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	619a      	str	r2, [r3, #24]
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <HAL_MspInit+0x50>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <HAL_MspInit+0x50>)
 8000cf8:	69da      	ldr	r2, [r3, #28]
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <HAL_MspInit+0x50>)
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	0549      	lsls	r1, r1, #21
 8000d00:	430a      	orrs	r2, r1
 8000d02:	61da      	str	r2, [r3, #28]
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <HAL_MspInit+0x50>)
 8000d06:	69da      	ldr	r2, [r3, #28]
 8000d08:	2380      	movs	r3, #128	@ 0x80
 8000d0a:	055b      	lsls	r3, r3, #21
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000d12:	2302      	movs	r3, #2
 8000d14:	425b      	negs	r3, r3
 8000d16:	2200      	movs	r2, #0
 8000d18:	2103      	movs	r1, #3
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 fa3a 	bl	8001194 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d20:	46c0      	nop			@ (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <HAL_TIM_Base_MspInit+0x38>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10d      	bne.n	8000d5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <HAL_TIM_Base_MspInit+0x3c>)
 8000d40:	699a      	ldr	r2, [r3, #24]
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <HAL_TIM_Base_MspInit+0x3c>)
 8000d44:	2180      	movs	r1, #128	@ 0x80
 8000d46:	0109      	lsls	r1, r1, #4
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	619a      	str	r2, [r3, #24]
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_TIM_Base_MspInit+0x3c>)
 8000d4e:	699a      	ldr	r2, [r3, #24]
 8000d50:	2380      	movs	r3, #128	@ 0x80
 8000d52:	011b      	lsls	r3, r3, #4
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b004      	add	sp, #16
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b089      	sub	sp, #36	@ 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	240c      	movs	r4, #12
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	0018      	movs	r0, r3
 8000d7a:	2314      	movs	r3, #20
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f004 fdb6 	bl	80058f0 <memset>
  if(htim->Instance==TIM1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a15      	ldr	r2, [pc, #84]	@ (8000de0 <HAL_TIM_MspPostInit+0x74>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d124      	bne.n	8000dd8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_TIM_MspPostInit+0x78>)
 8000d90:	695a      	ldr	r2, [r3, #20]
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_TIM_MspPostInit+0x78>)
 8000d94:	2180      	movs	r1, #128	@ 0x80
 8000d96:	0289      	lsls	r1, r1, #10
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <HAL_TIM_MspPostInit+0x78>)
 8000d9e:	695a      	ldr	r2, [r3, #20]
 8000da0:	2380      	movs	r3, #128	@ 0x80
 8000da2:	029b      	lsls	r3, r3, #10
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000daa:	0021      	movs	r1, r4
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2280      	movs	r2, #128	@ 0x80
 8000db0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2202      	movs	r2, #2
 8000db6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	187a      	adds	r2, r7, r1
 8000dcc:	2390      	movs	r3, #144	@ 0x90
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	0011      	movs	r1, r2
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 fa00 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b009      	add	sp, #36	@ 0x24
 8000dde:	bd90      	pop	{r4, r7, pc}
 8000de0:	40012c00 	.word	0x40012c00
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b08b      	sub	sp, #44	@ 0x2c
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	2414      	movs	r4, #20
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	0018      	movs	r0, r3
 8000df6:	2314      	movs	r3, #20
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f004 fd78 	bl	80058f0 <memset>
  if(huart->Instance==USART2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1c      	ldr	r2, [pc, #112]	@ (8000e78 <HAL_UART_MspInit+0x90>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d132      	bne.n	8000e70 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_UART_MspInit+0x94>)
 8000e0c:	69da      	ldr	r2, [r3, #28]
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <HAL_UART_MspInit+0x94>)
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	0289      	lsls	r1, r1, #10
 8000e14:	430a      	orrs	r2, r1
 8000e16:	61da      	str	r2, [r3, #28]
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_UART_MspInit+0x94>)
 8000e1a:	69da      	ldr	r2, [r3, #28]
 8000e1c:	2380      	movs	r3, #128	@ 0x80
 8000e1e:	029b      	lsls	r3, r3, #10
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_UART_MspInit+0x94>)
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <HAL_UART_MspInit+0x94>)
 8000e2c:	2180      	movs	r1, #128	@ 0x80
 8000e2e:	0289      	lsls	r1, r1, #10
 8000e30:	430a      	orrs	r2, r1
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <HAL_UART_MspInit+0x94>)
 8000e36:	695a      	ldr	r2, [r3, #20]
 8000e38:	2380      	movs	r3, #128	@ 0x80
 8000e3a:	029b      	lsls	r3, r3, #10
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e42:	0021      	movs	r1, r4
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2201      	movs	r2, #1
 8000e60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	187a      	adds	r2, r7, r1
 8000e64:	2390      	movs	r3, #144	@ 0x90
 8000e66:	05db      	lsls	r3, r3, #23
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f000 f9b4 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b00b      	add	sp, #44	@ 0x2c
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	40004400 	.word	0x40004400
 8000e7c:	40021000 	.word	0x40021000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	46c0      	nop			@ (mov r8, r8)
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f8d0 	bl	8001038 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e98:	f004 f828 	bl	8004eec <xTaskGetSchedulerState>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d001      	beq.n	8000ea6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ea2:	f004 fae1 	bl	8005468 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	18d3      	adds	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f004 fd70 	bl	80059c0 <__errno>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	425b      	negs	r3, r3
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	18d2      	adds	r2, r2, r3
 8000efa:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <_sbrk+0x64>)
 8000efc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b006      	add	sp, #24
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20001800 	.word	0x20001800
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	20000354 	.word	0x20000354
 8000f14:	20000de8 	.word	0x20000de8

08000f18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f24:	4813      	ldr	r0, [pc, #76]	@ (8000f74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f26:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f28:	f7ff fff6 	bl	8000f18 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000f2c:	4812      	ldr	r0, [pc, #72]	@ (8000f78 <LoopForever+0x6>)
    LDR R1, [R0]
 8000f2e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000f30:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000f32:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <LoopForever+0xa>)
    CMP R1, R2
 8000f34:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000f36:	d105      	bne.n	8000f44 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000f38:	4811      	ldr	r0, [pc, #68]	@ (8000f80 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000f3a:	4912      	ldr	r1, [pc, #72]	@ (8000f84 <LoopForever+0x12>)
    STR R1, [R0]
 8000f3c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000f3e:	4812      	ldr	r0, [pc, #72]	@ (8000f88 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000f40:	4912      	ldr	r1, [pc, #72]	@ (8000f8c <LoopForever+0x1a>)
    STR R1, [R0]
 8000f42:	6001      	str	r1, [r0, #0]

08000f44 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	4812      	ldr	r0, [pc, #72]	@ (8000f90 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000f46:	4913      	ldr	r1, [pc, #76]	@ (8000f94 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000f48:	4a13      	ldr	r2, [pc, #76]	@ (8000f98 <LoopForever+0x26>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a10      	ldr	r2, [pc, #64]	@ (8000f9c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000f5c:	4c10      	ldr	r4, [pc, #64]	@ (8000fa0 <LoopForever+0x2e>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f6a:	f004 fd2f 	bl	80059cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6e:	f7ff f981 	bl	8000274 <main>

08000f72 <LoopForever>:

LoopForever:
    b LoopForever
 8000f72:	e7fe      	b.n	8000f72 <LoopForever>
  ldr   r0, =_estack
 8000f74:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000f78:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000f7c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000f80:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000f84:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f88:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f8c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f98:	08006e64 	.word	0x08006e64
  ldr r2, =_sbss
 8000f9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fa0:	20000de8 	.word	0x20000de8

08000fa4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC1_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <HAL_Init+0x24>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_Init+0x24>)
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f809 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbe:	f7ff fe8b 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	40022000 	.word	0x40022000

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <HAL_InitTick+0x5c>)
 8000fda:	681c      	ldr	r4, [r3, #0]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <HAL_InitTick+0x60>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	23fa      	movs	r3, #250	@ 0xfa
 8000fe4:	0098      	lsls	r0, r3, #2
 8000fe6:	f7ff f8a1 	bl	800012c <__udivsi3>
 8000fea:	0003      	movs	r3, r0
 8000fec:	0019      	movs	r1, r3
 8000fee:	0020      	movs	r0, r4
 8000ff0:	f7ff f89c 	bl	800012c <__udivsi3>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 f8e1 	bl	80011be <HAL_SYSTICK_Config>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e00f      	b.n	8001024 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d80b      	bhi.n	8001022 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	2301      	movs	r3, #1
 800100e:	425b      	negs	r3, r3
 8001010:	2200      	movs	r2, #0
 8001012:	0018      	movs	r0, r3
 8001014:	f000 f8be 	bl	8001194 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_InitTick+0x64>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	b003      	add	sp, #12
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	20000010 	.word	0x20000010
 8001030:	20000018 	.word	0x20000018
 8001034:	20000014 	.word	0x20000014

08001038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <HAL_IncTick+0x1c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	001a      	movs	r2, r3
 8001042:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_IncTick+0x20>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	18d2      	adds	r2, r2, r3
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_IncTick+0x20>)
 800104a:	601a      	str	r2, [r3, #0]
}
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	20000018 	.word	0x20000018
 8001058:	20000358 	.word	0x20000358

0800105c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b02      	ldr	r3, [pc, #8]	@ (800106c <HAL_GetTick+0x10>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	20000358 	.word	0x20000358

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	0002      	movs	r2, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b7f      	cmp	r3, #127	@ 0x7f
 8001084:	d828      	bhi.n	80010d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001086:	4a2f      	ldr	r2, [pc, #188]	@ (8001144 <__NVIC_SetPriority+0xd4>)
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b25b      	sxtb	r3, r3
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	33c0      	adds	r3, #192	@ 0xc0
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	589b      	ldr	r3, [r3, r2]
 8001096:	1dfa      	adds	r2, r7, #7
 8001098:	7812      	ldrb	r2, [r2, #0]
 800109a:	0011      	movs	r1, r2
 800109c:	2203      	movs	r2, #3
 800109e:	400a      	ands	r2, r1
 80010a0:	00d2      	lsls	r2, r2, #3
 80010a2:	21ff      	movs	r1, #255	@ 0xff
 80010a4:	4091      	lsls	r1, r2
 80010a6:	000a      	movs	r2, r1
 80010a8:	43d2      	mvns	r2, r2
 80010aa:	401a      	ands	r2, r3
 80010ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	019b      	lsls	r3, r3, #6
 80010b2:	22ff      	movs	r2, #255	@ 0xff
 80010b4:	401a      	ands	r2, r3
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	0018      	movs	r0, r3
 80010bc:	2303      	movs	r3, #3
 80010be:	4003      	ands	r3, r0
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c4:	481f      	ldr	r0, [pc, #124]	@ (8001144 <__NVIC_SetPriority+0xd4>)
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	430a      	orrs	r2, r1
 80010d0:	33c0      	adds	r3, #192	@ 0xc0
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010d6:	e031      	b.n	800113c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001148 <__NVIC_SetPriority+0xd8>)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	0019      	movs	r1, r3
 80010e0:	230f      	movs	r3, #15
 80010e2:	400b      	ands	r3, r1
 80010e4:	3b08      	subs	r3, #8
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3306      	adds	r3, #6
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	18d3      	adds	r3, r2, r3
 80010ee:	3304      	adds	r3, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	1dfa      	adds	r2, r7, #7
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	0011      	movs	r1, r2
 80010f8:	2203      	movs	r2, #3
 80010fa:	400a      	ands	r2, r1
 80010fc:	00d2      	lsls	r2, r2, #3
 80010fe:	21ff      	movs	r1, #255	@ 0xff
 8001100:	4091      	lsls	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	43d2      	mvns	r2, r2
 8001106:	401a      	ands	r2, r3
 8001108:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	22ff      	movs	r2, #255	@ 0xff
 8001110:	401a      	ands	r2, r3
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	0018      	movs	r0, r3
 8001118:	2303      	movs	r3, #3
 800111a:	4003      	ands	r3, r0
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001120:	4809      	ldr	r0, [pc, #36]	@ (8001148 <__NVIC_SetPriority+0xd8>)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	001c      	movs	r4, r3
 8001128:	230f      	movs	r3, #15
 800112a:	4023      	ands	r3, r4
 800112c:	3b08      	subs	r3, #8
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	430a      	orrs	r2, r1
 8001132:	3306      	adds	r3, #6
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	18c3      	adds	r3, r0, r3
 8001138:	3304      	adds	r3, #4
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	46c0      	nop			@ (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b003      	add	sp, #12
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	1e5a      	subs	r2, r3, #1
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	045b      	lsls	r3, r3, #17
 800115c:	429a      	cmp	r2, r3
 800115e:	d301      	bcc.n	8001164 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001160:	2301      	movs	r3, #1
 8001162:	e010      	b.n	8001186 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <SysTick_Config+0x44>)
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	3a01      	subs	r2, #1
 800116a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116c:	2301      	movs	r3, #1
 800116e:	425b      	negs	r3, r3
 8001170:	2103      	movs	r1, #3
 8001172:	0018      	movs	r0, r3
 8001174:	f7ff ff7c 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <SysTick_Config+0x44>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <SysTick_Config+0x44>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	210f      	movs	r1, #15
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	1c02      	adds	r2, r0, #0
 80011a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff ff5d 	bl	8001070 <__NVIC_SetPriority>
}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b004      	add	sp, #16
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ffbf 	bl	800114c <SysTick_Config>
 80011ce:	0003      	movs	r3, r0
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b002      	add	sp, #8
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	e14f      	b.n	8001488 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2101      	movs	r1, #1
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4091      	lsls	r1, r2
 80011f2:	000a      	movs	r2, r1
 80011f4:	4013      	ands	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d100      	bne.n	8001200 <HAL_GPIO_Init+0x28>
 80011fe:	e140      	b.n	8001482 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2203      	movs	r2, #3
 8001206:	4013      	ands	r3, r2
 8001208:	2b01      	cmp	r3, #1
 800120a:	d005      	beq.n	8001218 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2203      	movs	r2, #3
 8001212:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001214:	2b02      	cmp	r3, #2
 8001216:	d130      	bne.n	800127a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	409a      	lsls	r2, r3
 8001226:	0013      	movs	r3, r2
 8001228:	43da      	mvns	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	409a      	lsls	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800124e:	2201      	movs	r2, #1
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	091b      	lsrs	r3, r3, #4
 8001264:	2201      	movs	r2, #1
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2203      	movs	r2, #3
 8001280:	4013      	ands	r3, r2
 8001282:	2b03      	cmp	r3, #3
 8001284:	d017      	beq.n	80012b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	43da      	mvns	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	409a      	lsls	r2, r3
 80012a8:	0013      	movs	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2203      	movs	r2, #3
 80012bc:	4013      	ands	r3, r2
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d123      	bne.n	800130a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	58d3      	ldr	r3, [r2, r3]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2207      	movs	r2, #7
 80012d4:	4013      	ands	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	409a      	lsls	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	43da      	mvns	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	691a      	ldr	r2, [r3, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2107      	movs	r1, #7
 80012ee:	400b      	ands	r3, r1
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	409a      	lsls	r2, r3
 80012f4:	0013      	movs	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	0092      	lsls	r2, r2, #2
 8001306:	6939      	ldr	r1, [r7, #16]
 8001308:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	43da      	mvns	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2203      	movs	r2, #3
 8001328:	401a      	ands	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	409a      	lsls	r2, r3
 8001330:	0013      	movs	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	23c0      	movs	r3, #192	@ 0xc0
 8001344:	029b      	lsls	r3, r3, #10
 8001346:	4013      	ands	r3, r2
 8001348:	d100      	bne.n	800134c <HAL_GPIO_Init+0x174>
 800134a:	e09a      	b.n	8001482 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134c:	4b54      	ldr	r3, [pc, #336]	@ (80014a0 <HAL_GPIO_Init+0x2c8>)
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	4b53      	ldr	r3, [pc, #332]	@ (80014a0 <HAL_GPIO_Init+0x2c8>)
 8001352:	2101      	movs	r1, #1
 8001354:	430a      	orrs	r2, r1
 8001356:	619a      	str	r2, [r3, #24]
 8001358:	4b51      	ldr	r3, [pc, #324]	@ (80014a0 <HAL_GPIO_Init+0x2c8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2201      	movs	r2, #1
 800135e:	4013      	ands	r3, r2
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001364:	4a4f      	ldr	r2, [pc, #316]	@ (80014a4 <HAL_GPIO_Init+0x2cc>)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	589b      	ldr	r3, [r3, r2]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2203      	movs	r2, #3
 8001376:	4013      	ands	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	409a      	lsls	r2, r3
 800137e:	0013      	movs	r3, r2
 8001380:	43da      	mvns	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	2390      	movs	r3, #144	@ 0x90
 800138c:	05db      	lsls	r3, r3, #23
 800138e:	429a      	cmp	r2, r3
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x1e2>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a44      	ldr	r2, [pc, #272]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x1de>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a43      	ldr	r2, [pc, #268]	@ (80014ac <HAL_GPIO_Init+0x2d4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x1da>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a42      	ldr	r2, [pc, #264]	@ (80014b0 <HAL_GPIO_Init+0x2d8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x1d6>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x1e4>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x1e4>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x1e4>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x1e4>
 80013ba:	2300      	movs	r3, #0
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	2103      	movs	r1, #3
 80013c0:	400a      	ands	r2, r1
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	@ (80014a4 <HAL_GPIO_Init+0x2cc>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43da      	mvns	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	035b      	lsls	r3, r3, #13
 80013f2:	4013      	ands	r3, r2
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013fe:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001404:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43da      	mvns	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	039b      	lsls	r3, r3, #14
 800141c:	4013      	ands	r3, r2
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001428:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800142e:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43da      	mvns	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	2380      	movs	r3, #128	@ 0x80
 8001444:	029b      	lsls	r3, r3, #10
 8001446:	4013      	ands	r3, r2
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43da      	mvns	r2, r3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	025b      	lsls	r3, r3, #9
 8001470:	4013      	ands	r3, r2
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800147c:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	40da      	lsrs	r2, r3
 8001490:	1e13      	subs	r3, r2, #0
 8001492:	d000      	beq.n	8001496 <HAL_GPIO_Init+0x2be>
 8001494:	e6a8      	b.n	80011e8 <HAL_GPIO_Init+0x10>
  } 
}
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b006      	add	sp, #24
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000
 80014a8:	48000400 	.word	0x48000400
 80014ac:	48000800 	.word	0x48000800
 80014b0:	48000c00 	.word	0x48000c00
 80014b4:	40010400 	.word	0x40010400

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	0008      	movs	r0, r1
 80014c2:	0011      	movs	r1, r2
 80014c4:	1cbb      	adds	r3, r7, #2
 80014c6:	1c02      	adds	r2, r0, #0
 80014c8:	801a      	strh	r2, [r3, #0]
 80014ca:	1c7b      	adds	r3, r7, #1
 80014cc:	1c0a      	adds	r2, r1, #0
 80014ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d0:	1c7b      	adds	r3, r7, #1
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d8:	1cbb      	adds	r3, r7, #2
 80014da:	881a      	ldrh	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e0:	e003      	b.n	80014ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014e2:	1cbb      	adds	r3, r7, #2
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e305      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2201      	movs	r2, #1
 800150c:	4013      	ands	r3, r2
 800150e:	d100      	bne.n	8001512 <HAL_RCC_OscConfig+0x1e>
 8001510:	e08d      	b.n	800162e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001512:	4bc5      	ldr	r3, [pc, #788]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	220c      	movs	r2, #12
 8001518:	4013      	ands	r3, r2
 800151a:	2b04      	cmp	r3, #4
 800151c:	d00e      	beq.n	800153c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800151e:	4bc2      	ldr	r3, [pc, #776]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	220c      	movs	r2, #12
 8001524:	4013      	ands	r3, r2
 8001526:	2b08      	cmp	r3, #8
 8001528:	d116      	bne.n	8001558 <HAL_RCC_OscConfig+0x64>
 800152a:	4bbf      	ldr	r3, [pc, #764]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	23c0      	movs	r3, #192	@ 0xc0
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	401a      	ands	r2, r3
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	429a      	cmp	r2, r3
 800153a:	d10d      	bne.n	8001558 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	4bba      	ldr	r3, [pc, #744]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	029b      	lsls	r3, r3, #10
 8001544:	4013      	ands	r3, r2
 8001546:	d100      	bne.n	800154a <HAL_RCC_OscConfig+0x56>
 8001548:	e070      	b.n	800162c <HAL_RCC_OscConfig+0x138>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d000      	beq.n	8001554 <HAL_RCC_OscConfig+0x60>
 8001552:	e06b      	b.n	800162c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e2dc      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <HAL_RCC_OscConfig+0x7c>
 8001560:	4bb1      	ldr	r3, [pc, #708]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4bb0      	ldr	r3, [pc, #704]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	0249      	lsls	r1, r1, #9
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	e02f      	b.n	80015d0 <HAL_RCC_OscConfig+0xdc>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10c      	bne.n	8001592 <HAL_RCC_OscConfig+0x9e>
 8001578:	4bab      	ldr	r3, [pc, #684]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4baa      	ldr	r3, [pc, #680]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800157e:	49ab      	ldr	r1, [pc, #684]	@ (800182c <HAL_RCC_OscConfig+0x338>)
 8001580:	400a      	ands	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	4ba8      	ldr	r3, [pc, #672]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4ba7      	ldr	r3, [pc, #668]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800158a:	49a9      	ldr	r1, [pc, #676]	@ (8001830 <HAL_RCC_OscConfig+0x33c>)
 800158c:	400a      	ands	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e01e      	b.n	80015d0 <HAL_RCC_OscConfig+0xdc>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d10e      	bne.n	80015b8 <HAL_RCC_OscConfig+0xc4>
 800159a:	4ba3      	ldr	r3, [pc, #652]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4ba2      	ldr	r3, [pc, #648]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80015a0:	2180      	movs	r1, #128	@ 0x80
 80015a2:	02c9      	lsls	r1, r1, #11
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	4b9f      	ldr	r3, [pc, #636]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b9e      	ldr	r3, [pc, #632]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80015ae:	2180      	movs	r1, #128	@ 0x80
 80015b0:	0249      	lsls	r1, r1, #9
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0xdc>
 80015b8:	4b9b      	ldr	r3, [pc, #620]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b9a      	ldr	r3, [pc, #616]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80015be:	499b      	ldr	r1, [pc, #620]	@ (800182c <HAL_RCC_OscConfig+0x338>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	4b98      	ldr	r3, [pc, #608]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b97      	ldr	r3, [pc, #604]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80015ca:	4999      	ldr	r1, [pc, #612]	@ (8001830 <HAL_RCC_OscConfig+0x33c>)
 80015cc:	400a      	ands	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d014      	beq.n	8001602 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fd40 	bl	800105c <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e2:	f7ff fd3b 	bl	800105c <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b64      	cmp	r3, #100	@ 0x64
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e28e      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	029b      	lsls	r3, r3, #10
 80015fc:	4013      	ands	r3, r2
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0xee>
 8001600:	e015      	b.n	800162e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fd2b 	bl	800105c <HAL_GetTick>
 8001606:	0003      	movs	r3, r0
 8001608:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fd26 	bl	800105c <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	@ 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e279      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	4b82      	ldr	r3, [pc, #520]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	2380      	movs	r3, #128	@ 0x80
 8001624:	029b      	lsls	r3, r3, #10
 8001626:	4013      	ands	r3, r2
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x118>
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2202      	movs	r2, #2
 8001634:	4013      	ands	r3, r2
 8001636:	d100      	bne.n	800163a <HAL_RCC_OscConfig+0x146>
 8001638:	e06c      	b.n	8001714 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800163a:	4b7b      	ldr	r3, [pc, #492]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	220c      	movs	r2, #12
 8001640:	4013      	ands	r3, r2
 8001642:	d00e      	beq.n	8001662 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001644:	4b78      	ldr	r3, [pc, #480]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	220c      	movs	r2, #12
 800164a:	4013      	ands	r3, r2
 800164c:	2b08      	cmp	r3, #8
 800164e:	d11f      	bne.n	8001690 <HAL_RCC_OscConfig+0x19c>
 8001650:	4b75      	ldr	r3, [pc, #468]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	23c0      	movs	r3, #192	@ 0xc0
 8001656:	025b      	lsls	r3, r3, #9
 8001658:	401a      	ands	r2, r3
 800165a:	2380      	movs	r3, #128	@ 0x80
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	429a      	cmp	r2, r3
 8001660:	d116      	bne.n	8001690 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	4b71      	ldr	r3, [pc, #452]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d005      	beq.n	8001678 <HAL_RCC_OscConfig+0x184>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d001      	beq.n	8001678 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e24c      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001678:	4b6b      	ldr	r3, [pc, #428]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	22f8      	movs	r2, #248	@ 0xf8
 800167e:	4393      	bics	r3, r2
 8001680:	0019      	movs	r1, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	00da      	lsls	r2, r3, #3
 8001688:	4b67      	ldr	r3, [pc, #412]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	e041      	b.n	8001714 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d024      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001698:	4b63      	ldr	r3, [pc, #396]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b62      	ldr	r3, [pc, #392]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800169e:	2101      	movs	r1, #1
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fcda 	bl	800105c <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ae:	f7ff fcd5 	bl	800105c <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e228      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	4b59      	ldr	r3, [pc, #356]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d0f1      	beq.n	80016ae <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b57      	ldr	r3, [pc, #348]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	22f8      	movs	r2, #248	@ 0xf8
 80016d0:	4393      	bics	r3, r2
 80016d2:	0019      	movs	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	00da      	lsls	r2, r3, #3
 80016da:	4b53      	ldr	r3, [pc, #332]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e018      	b.n	8001714 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	4b51      	ldr	r3, [pc, #324]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b50      	ldr	r3, [pc, #320]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80016e8:	2101      	movs	r1, #1
 80016ea:	438a      	bics	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fcb5 	bl	800105c <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff fcb0 	bl	800105c <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e203      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	d1f1      	bne.n	80016f8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2208      	movs	r2, #8
 800171a:	4013      	ands	r3, r2
 800171c:	d036      	beq.n	800178c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d019      	beq.n	800175a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001726:	4b40      	ldr	r3, [pc, #256]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001728:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800172a:	4b3f      	ldr	r3, [pc, #252]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800172c:	2101      	movs	r1, #1
 800172e:	430a      	orrs	r2, r1
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001732:	f7ff fc93 	bl	800105c <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff fc8e 	bl	800105c <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1e1      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	4b36      	ldr	r3, [pc, #216]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001752:	2202      	movs	r2, #2
 8001754:	4013      	ands	r3, r2
 8001756:	d0f1      	beq.n	800173c <HAL_RCC_OscConfig+0x248>
 8001758:	e018      	b.n	800178c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175a:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800175c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800175e:	4b32      	ldr	r3, [pc, #200]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001760:	2101      	movs	r1, #1
 8001762:	438a      	bics	r2, r1
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff fc79 	bl	800105c <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fc74 	bl	800105c <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1c7      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001782:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	d1f1      	bne.n	8001770 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2204      	movs	r2, #4
 8001792:	4013      	ands	r3, r2
 8001794:	d100      	bne.n	8001798 <HAL_RCC_OscConfig+0x2a4>
 8001796:	e0b5      	b.n	8001904 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001798:	201f      	movs	r0, #31
 800179a:	183b      	adds	r3, r7, r0
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a0:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80017a2:	69da      	ldr	r2, [r3, #28]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	055b      	lsls	r3, r3, #21
 80017a8:	4013      	ands	r3, r2
 80017aa:	d110      	bne.n	80017ce <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80017ae:	69da      	ldr	r2, [r3, #28]
 80017b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80017b2:	2180      	movs	r1, #128	@ 0x80
 80017b4:	0549      	lsls	r1, r1, #21
 80017b6:	430a      	orrs	r2, r1
 80017b8:	61da      	str	r2, [r3, #28]
 80017ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 80017bc:	69da      	ldr	r2, [r3, #28]
 80017be:	2380      	movs	r3, #128	@ 0x80
 80017c0:	055b      	lsls	r3, r3, #21
 80017c2:	4013      	ands	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017c8:	183b      	adds	r3, r7, r0
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <HAL_RCC_OscConfig+0x340>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	2380      	movs	r3, #128	@ 0x80
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	d11a      	bne.n	8001810 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <HAL_RCC_OscConfig+0x340>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <HAL_RCC_OscConfig+0x340>)
 80017e0:	2180      	movs	r1, #128	@ 0x80
 80017e2:	0049      	lsls	r1, r1, #1
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e8:	f7ff fc38 	bl	800105c <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f2:	f7ff fc33 	bl	800105c <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b64      	cmp	r3, #100	@ 0x64
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e186      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <HAL_RCC_OscConfig+0x340>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4013      	ands	r3, r2
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d10f      	bne.n	8001838 <HAL_RCC_OscConfig+0x344>
 8001818:	4b03      	ldr	r3, [pc, #12]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800181a:	6a1a      	ldr	r2, [r3, #32]
 800181c:	4b02      	ldr	r3, [pc, #8]	@ (8001828 <HAL_RCC_OscConfig+0x334>)
 800181e:	2101      	movs	r1, #1
 8001820:	430a      	orrs	r2, r1
 8001822:	621a      	str	r2, [r3, #32]
 8001824:	e036      	b.n	8001894 <HAL_RCC_OscConfig+0x3a0>
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	40021000 	.word	0x40021000
 800182c:	fffeffff 	.word	0xfffeffff
 8001830:	fffbffff 	.word	0xfffbffff
 8001834:	40007000 	.word	0x40007000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10c      	bne.n	800185a <HAL_RCC_OscConfig+0x366>
 8001840:	4bb6      	ldr	r3, [pc, #728]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001842:	6a1a      	ldr	r2, [r3, #32]
 8001844:	4bb5      	ldr	r3, [pc, #724]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001846:	2101      	movs	r1, #1
 8001848:	438a      	bics	r2, r1
 800184a:	621a      	str	r2, [r3, #32]
 800184c:	4bb3      	ldr	r3, [pc, #716]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 800184e:	6a1a      	ldr	r2, [r3, #32]
 8001850:	4bb2      	ldr	r3, [pc, #712]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001852:	2104      	movs	r1, #4
 8001854:	438a      	bics	r2, r1
 8001856:	621a      	str	r2, [r3, #32]
 8001858:	e01c      	b.n	8001894 <HAL_RCC_OscConfig+0x3a0>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x388>
 8001862:	4bae      	ldr	r3, [pc, #696]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001864:	6a1a      	ldr	r2, [r3, #32]
 8001866:	4bad      	ldr	r3, [pc, #692]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001868:	2104      	movs	r1, #4
 800186a:	430a      	orrs	r2, r1
 800186c:	621a      	str	r2, [r3, #32]
 800186e:	4bab      	ldr	r3, [pc, #684]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001870:	6a1a      	ldr	r2, [r3, #32]
 8001872:	4baa      	ldr	r3, [pc, #680]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001874:	2101      	movs	r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	621a      	str	r2, [r3, #32]
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0x3a0>
 800187c:	4ba7      	ldr	r3, [pc, #668]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 800187e:	6a1a      	ldr	r2, [r3, #32]
 8001880:	4ba6      	ldr	r3, [pc, #664]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001882:	2101      	movs	r1, #1
 8001884:	438a      	bics	r2, r1
 8001886:	621a      	str	r2, [r3, #32]
 8001888:	4ba4      	ldr	r3, [pc, #656]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 800188a:	6a1a      	ldr	r2, [r3, #32]
 800188c:	4ba3      	ldr	r3, [pc, #652]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 800188e:	2104      	movs	r1, #4
 8001890:	438a      	bics	r2, r1
 8001892:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d014      	beq.n	80018c6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7ff fbde 	bl	800105c <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a4:	e009      	b.n	80018ba <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff fbd9 	bl	800105c <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4a9b      	ldr	r2, [pc, #620]	@ (8001b20 <HAL_RCC_OscConfig+0x62c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e12b      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ba:	4b98      	ldr	r3, [pc, #608]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x3b2>
 80018c4:	e013      	b.n	80018ee <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fbc9 	bl	800105c <HAL_GetTick>
 80018ca:	0003      	movs	r3, r0
 80018cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ce:	e009      	b.n	80018e4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff fbc4 	bl	800105c <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	4a91      	ldr	r2, [pc, #580]	@ (8001b20 <HAL_RCC_OscConfig+0x62c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e116      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	4b8d      	ldr	r3, [pc, #564]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018ee:	231f      	movs	r3, #31
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f8:	4b88      	ldr	r3, [pc, #544]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 80018fa:	69da      	ldr	r2, [r3, #28]
 80018fc:	4b87      	ldr	r3, [pc, #540]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 80018fe:	4989      	ldr	r1, [pc, #548]	@ (8001b24 <HAL_RCC_OscConfig+0x630>)
 8001900:	400a      	ands	r2, r1
 8001902:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2210      	movs	r2, #16
 800190a:	4013      	ands	r3, r2
 800190c:	d063      	beq.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d12a      	bne.n	800196c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001916:	4b81      	ldr	r3, [pc, #516]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800191a:	4b80      	ldr	r3, [pc, #512]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 800191c:	2104      	movs	r1, #4
 800191e:	430a      	orrs	r2, r1
 8001920:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001922:	4b7e      	ldr	r3, [pc, #504]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001926:	4b7d      	ldr	r3, [pc, #500]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001928:	2101      	movs	r1, #1
 800192a:	430a      	orrs	r2, r1
 800192c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192e:	f7ff fb95 	bl	800105c <HAL_GetTick>
 8001932:	0003      	movs	r3, r0
 8001934:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001938:	f7ff fb90 	bl	800105c <HAL_GetTick>
 800193c:	0002      	movs	r2, r0
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e0e3      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800194a:	4b74      	ldr	r3, [pc, #464]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 800194c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194e:	2202      	movs	r2, #2
 8001950:	4013      	ands	r3, r2
 8001952:	d0f1      	beq.n	8001938 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001954:	4b71      	ldr	r3, [pc, #452]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001958:	22f8      	movs	r2, #248	@ 0xf8
 800195a:	4393      	bics	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	00da      	lsls	r2, r3, #3
 8001964:	4b6d      	ldr	r3, [pc, #436]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001966:	430a      	orrs	r2, r1
 8001968:	635a      	str	r2, [r3, #52]	@ 0x34
 800196a:	e034      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	3305      	adds	r3, #5
 8001972:	d111      	bne.n	8001998 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001974:	4b69      	ldr	r3, [pc, #420]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001978:	4b68      	ldr	r3, [pc, #416]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 800197a:	2104      	movs	r1, #4
 800197c:	438a      	bics	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001980:	4b66      	ldr	r3, [pc, #408]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001984:	22f8      	movs	r2, #248	@ 0xf8
 8001986:	4393      	bics	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	00da      	lsls	r2, r3, #3
 8001990:	4b62      	ldr	r3, [pc, #392]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001992:	430a      	orrs	r2, r1
 8001994:	635a      	str	r2, [r3, #52]	@ 0x34
 8001996:	e01e      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001998:	4b60      	ldr	r3, [pc, #384]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 800199a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800199c:	4b5f      	ldr	r3, [pc, #380]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 800199e:	2104      	movs	r1, #4
 80019a0:	430a      	orrs	r2, r1
 80019a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019a4:	4b5d      	ldr	r3, [pc, #372]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 80019a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019a8:	4b5c      	ldr	r3, [pc, #368]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	438a      	bics	r2, r1
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7ff fb54 	bl	800105c <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019ba:	f7ff fb4f 	bl	800105c <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e0a2      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019cc:	4b53      	ldr	r3, [pc, #332]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 80019ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d1f1      	bne.n	80019ba <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d100      	bne.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
 80019de:	e097      	b.n	8001b10 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e0:	4b4e      	ldr	r3, [pc, #312]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	220c      	movs	r2, #12
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d100      	bne.n	80019ee <HAL_RCC_OscConfig+0x4fa>
 80019ec:	e06b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d14c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b49      	ldr	r3, [pc, #292]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b48      	ldr	r3, [pc, #288]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 80019fc:	494a      	ldr	r1, [pc, #296]	@ (8001b28 <HAL_RCC_OscConfig+0x634>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff fb2b 	bl	800105c <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff fb26 	bl	800105c <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e079      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	049b      	lsls	r3, r3, #18
 8001a26:	4013      	ands	r3, r2
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2e:	220f      	movs	r2, #15
 8001a30:	4393      	bics	r3, r2
 8001a32:	0019      	movs	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a38:	4b38      	ldr	r3, [pc, #224]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a3e:	4b37      	ldr	r3, [pc, #220]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4a3a      	ldr	r2, [pc, #232]	@ (8001b2c <HAL_RCC_OscConfig+0x638>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	431a      	orrs	r2, r3
 8001a52:	4b32      	ldr	r3, [pc, #200]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001a54:	430a      	orrs	r2, r1
 8001a56:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a58:	4b30      	ldr	r3, [pc, #192]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001a5e:	2180      	movs	r1, #128	@ 0x80
 8001a60:	0449      	lsls	r1, r1, #17
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff faf9 	bl	800105c <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff faf4 	bl	800105c <HAL_GetTick>
 8001a74:	0002      	movs	r2, r0
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e047      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a82:	4b26      	ldr	r3, [pc, #152]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2380      	movs	r3, #128	@ 0x80
 8001a88:	049b      	lsls	r3, r3, #18
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x57c>
 8001a8e:	e03f      	b.n	8001b10 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a90:	4b22      	ldr	r3, [pc, #136]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001a96:	4924      	ldr	r1, [pc, #144]	@ (8001b28 <HAL_RCC_OscConfig+0x634>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fade 	bl	800105c <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7ff fad9 	bl	800105c <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e02c      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	@ 0x80
 8001abe:	049b      	lsls	r3, r3, #18
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5b2>
 8001ac4:	e024      	b.n	8001b10 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e01f      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ad8:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_RCC_OscConfig+0x628>)
 8001ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001adc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	23c0      	movs	r3, #192	@ 0xc0
 8001ae2:	025b      	lsls	r3, r3, #9
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d10e      	bne.n	8001b0c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	220f      	movs	r2, #15
 8001af2:	401a      	ands	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	23f0      	movs	r3, #240	@ 0xf0
 8001b00:	039b      	lsls	r3, r3, #14
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b008      	add	sp, #32
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	00001388 	.word	0x00001388
 8001b24:	efffffff 	.word	0xefffffff
 8001b28:	feffffff 	.word	0xfeffffff
 8001b2c:	ffc27fff 	.word	0xffc27fff

08001b30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0b3      	b.n	8001cac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b44:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb4 <HAL_RCC_ClockConfig+0x184>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d911      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b58      	ldr	r3, [pc, #352]	@ (8001cb4 <HAL_RCC_ClockConfig+0x184>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2201      	movs	r2, #1
 8001b58:	4393      	bics	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	4b55      	ldr	r3, [pc, #340]	@ (8001cb4 <HAL_RCC_ClockConfig+0x184>)
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b64:	4b53      	ldr	r3, [pc, #332]	@ (8001cb4 <HAL_RCC_ClockConfig+0x184>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e09a      	b.n	8001cac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d015      	beq.n	8001bac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2204      	movs	r2, #4
 8001b86:	4013      	ands	r3, r2
 8001b88:	d006      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001b90:	21e0      	movs	r1, #224	@ 0xe0
 8001b92:	00c9      	lsls	r1, r1, #3
 8001b94:	430a      	orrs	r2, r1
 8001b96:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b98:	4b47      	ldr	r3, [pc, #284]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	22f0      	movs	r2, #240	@ 0xf0
 8001b9e:	4393      	bics	r3, r2
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	4b44      	ldr	r3, [pc, #272]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d040      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2380      	movs	r3, #128	@ 0x80
 8001bc4:	029b      	lsls	r3, r3, #10
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d114      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e06e      	b.n	8001cac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	4b38      	ldr	r3, [pc, #224]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	049b      	lsls	r3, r3, #18
 8001bde:	4013      	ands	r3, r2
 8001be0:	d108      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e062      	b.n	8001cac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	4b34      	ldr	r3, [pc, #208]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2202      	movs	r2, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e05b      	b.n	8001cac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf4:	4b30      	ldr	r3, [pc, #192]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	4393      	bics	r3, r2
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001c04:	430a      	orrs	r2, r1
 8001c06:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c08:	f7ff fa28 	bl	800105c <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c10:	e009      	b.n	8001c26 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c12:	f7ff fa23 	bl	800105c <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	4a27      	ldr	r2, [pc, #156]	@ (8001cbc <HAL_RCC_ClockConfig+0x18c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e042      	b.n	8001cac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d1ec      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c38:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <HAL_RCC_ClockConfig+0x184>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4013      	ands	r3, r2
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d211      	bcs.n	8001c6a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_RCC_ClockConfig+0x184>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4393      	bics	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_RCC_ClockConfig+0x184>)
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c58:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <HAL_RCC_ClockConfig+0x184>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4013      	ands	r3, r2
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e020      	b.n	8001cac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2204      	movs	r2, #4
 8001c70:	4013      	ands	r3, r2
 8001c72:	d009      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c74:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a11      	ldr	r2, [pc, #68]	@ (8001cc0 <HAL_RCC_ClockConfig+0x190>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c88:	f000 f820 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8001c8c:	0001      	movs	r1, r0
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_RCC_ClockConfig+0x188>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	220f      	movs	r2, #15
 8001c96:	4013      	ands	r3, r2
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_RCC_ClockConfig+0x194>)
 8001c9a:	5cd3      	ldrb	r3, [r2, r3]
 8001c9c:	000a      	movs	r2, r1
 8001c9e:	40da      	lsrs	r2, r3
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <HAL_RCC_ClockConfig+0x198>)
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f7ff f993 	bl	8000fd0 <HAL_InitTick>
  
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b004      	add	sp, #16
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	00001388 	.word	0x00001388
 8001cc0:	fffff8ff 	.word	0xfffff8ff
 8001cc4:	08006cd4 	.word	0x08006cd4
 8001cc8:	20000010 	.word	0x20000010

08001ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	220c      	movs	r2, #12
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x30>
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d003      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0x36>
 8001cfa:	e02e      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cfe:	613b      	str	r3, [r7, #16]
      break;
 8001d00:	e02e      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	0c9b      	lsrs	r3, r3, #18
 8001d06:	220f      	movs	r2, #15
 8001d08:	4013      	ands	r3, r2
 8001d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d0c:	5cd3      	ldrb	r3, [r2, r3]
 8001d0e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d10:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d14:	220f      	movs	r2, #15
 8001d16:	4013      	ands	r3, r2
 8001d18:	4a17      	ldr	r2, [pc, #92]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	23c0      	movs	r3, #192	@ 0xc0
 8001d22:	025b      	lsls	r3, r3, #9
 8001d24:	401a      	ands	r2, r3
 8001d26:	2380      	movs	r3, #128	@ 0x80
 8001d28:	025b      	lsls	r3, r3, #9
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d109      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	480f      	ldr	r0, [pc, #60]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d32:	f7fe f9fb 	bl	800012c <__udivsi3>
 8001d36:	0003      	movs	r3, r0
 8001d38:	001a      	movs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4353      	muls	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	480a      	ldr	r0, [pc, #40]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d46:	f7fe f9f1 	bl	800012c <__udivsi3>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4353      	muls	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
      break;
 8001d58:	e002      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d5c:	613b      	str	r3, [r7, #16]
      break;
 8001d5e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d60:	693b      	ldr	r3, [r7, #16]
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b006      	add	sp, #24
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	007a1200 	.word	0x007a1200
 8001d74:	08006cec 	.word	0x08006cec
 8001d78:	08006cfc 	.word	0x08006cfc

08001d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d80:	4b02      	ldr	r3, [pc, #8]	@ (8001d8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	20000010 	.word	0x20000010

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d94:	f7ff fff2 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001d98:	0001      	movs	r1, r0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	2207      	movs	r2, #7
 8001da2:	4013      	ands	r3, r2
 8001da4:	4a04      	ldr	r2, [pc, #16]	@ (8001db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001da6:	5cd3      	ldrb	r3, [r2, r3]
 8001da8:	40d9      	lsrs	r1, r3
 8001daa:	000b      	movs	r3, r1
}    
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08006ce4 	.word	0x08006ce4

08001dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e042      	b.n	8001e54 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	223d      	movs	r2, #61	@ 0x3d
 8001dd2:	5c9b      	ldrb	r3, [r3, r2]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d107      	bne.n	8001dea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	223c      	movs	r2, #60	@ 0x3c
 8001dde:	2100      	movs	r1, #0
 8001de0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7fe ffa1 	bl	8000d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	223d      	movs	r2, #61	@ 0x3d
 8001dee:	2102      	movs	r1, #2
 8001df0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	0010      	movs	r0, r2
 8001dfe:	f000 fac5 	bl	800238c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2246      	movs	r2, #70	@ 0x46
 8001e06:	2101      	movs	r1, #1
 8001e08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	223e      	movs	r2, #62	@ 0x3e
 8001e0e:	2101      	movs	r1, #1
 8001e10:	5499      	strb	r1, [r3, r2]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	223f      	movs	r2, #63	@ 0x3f
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2240      	movs	r2, #64	@ 0x40
 8001e1e:	2101      	movs	r1, #1
 8001e20:	5499      	strb	r1, [r3, r2]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2241      	movs	r2, #65	@ 0x41
 8001e26:	2101      	movs	r1, #1
 8001e28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2242      	movs	r2, #66	@ 0x42
 8001e2e:	2101      	movs	r1, #1
 8001e30:	5499      	strb	r1, [r3, r2]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2243      	movs	r2, #67	@ 0x43
 8001e36:	2101      	movs	r1, #1
 8001e38:	5499      	strb	r1, [r3, r2]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2244      	movs	r2, #68	@ 0x44
 8001e3e:	2101      	movs	r1, #1
 8001e40:	5499      	strb	r1, [r3, r2]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2245      	movs	r2, #69	@ 0x45
 8001e46:	2101      	movs	r1, #1
 8001e48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	223d      	movs	r2, #61	@ 0x3d
 8001e4e:	2101      	movs	r1, #1
 8001e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b002      	add	sp, #8
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e042      	b.n	8001ef4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	223d      	movs	r2, #61	@ 0x3d
 8001e72:	5c9b      	ldrb	r3, [r3, r2]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d107      	bne.n	8001e8a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	223c      	movs	r2, #60	@ 0x3c
 8001e7e:	2100      	movs	r1, #0
 8001e80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 f839 	bl	8001efc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	223d      	movs	r2, #61	@ 0x3d
 8001e8e:	2102      	movs	r1, #2
 8001e90:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	0010      	movs	r0, r2
 8001e9e:	f000 fa75 	bl	800238c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2246      	movs	r2, #70	@ 0x46
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	223e      	movs	r2, #62	@ 0x3e
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	223f      	movs	r2, #63	@ 0x3f
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2240      	movs	r2, #64	@ 0x40
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2241      	movs	r2, #65	@ 0x41
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2242      	movs	r2, #66	@ 0x42
 8001ece:	2101      	movs	r1, #1
 8001ed0:	5499      	strb	r1, [r3, r2]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2243      	movs	r2, #67	@ 0x43
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	5499      	strb	r1, [r3, r2]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2244      	movs	r2, #68	@ 0x44
 8001ede:	2101      	movs	r1, #1
 8001ee0:	5499      	strb	r1, [r3, r2]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2245      	movs	r2, #69	@ 0x45
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	223d      	movs	r2, #61	@ 0x3d
 8001eee:	2101      	movs	r1, #1
 8001ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f04:	46c0      	nop			@ (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d108      	bne.n	8001f2e <HAL_TIM_PWM_Start+0x22>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	223e      	movs	r2, #62	@ 0x3e
 8001f20:	5c9b      	ldrb	r3, [r3, r2]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	1e5a      	subs	r2, r3, #1
 8001f28:	4193      	sbcs	r3, r2
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	e01f      	b.n	8001f6e <HAL_TIM_PWM_Start+0x62>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d108      	bne.n	8001f46 <HAL_TIM_PWM_Start+0x3a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	223f      	movs	r2, #63	@ 0x3f
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	1e5a      	subs	r2, r3, #1
 8001f40:	4193      	sbcs	r3, r2
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	e013      	b.n	8001f6e <HAL_TIM_PWM_Start+0x62>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d108      	bne.n	8001f5e <HAL_TIM_PWM_Start+0x52>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2240      	movs	r2, #64	@ 0x40
 8001f50:	5c9b      	ldrb	r3, [r3, r2]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	1e5a      	subs	r2, r3, #1
 8001f58:	4193      	sbcs	r3, r2
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	e007      	b.n	8001f6e <HAL_TIM_PWM_Start+0x62>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2241      	movs	r2, #65	@ 0x41
 8001f62:	5c9b      	ldrb	r3, [r3, r2]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	1e5a      	subs	r2, r3, #1
 8001f6a:	4193      	sbcs	r3, r2
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e064      	b.n	8002040 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d104      	bne.n	8001f86 <HAL_TIM_PWM_Start+0x7a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	223e      	movs	r2, #62	@ 0x3e
 8001f80:	2102      	movs	r1, #2
 8001f82:	5499      	strb	r1, [r3, r2]
 8001f84:	e013      	b.n	8001fae <HAL_TIM_PWM_Start+0xa2>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d104      	bne.n	8001f96 <HAL_TIM_PWM_Start+0x8a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	223f      	movs	r2, #63	@ 0x3f
 8001f90:	2102      	movs	r1, #2
 8001f92:	5499      	strb	r1, [r3, r2]
 8001f94:	e00b      	b.n	8001fae <HAL_TIM_PWM_Start+0xa2>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d104      	bne.n	8001fa6 <HAL_TIM_PWM_Start+0x9a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2240      	movs	r2, #64	@ 0x40
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	5499      	strb	r1, [r3, r2]
 8001fa4:	e003      	b.n	8001fae <HAL_TIM_PWM_Start+0xa2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2241      	movs	r2, #65	@ 0x41
 8001faa:	2102      	movs	r1, #2
 8001fac:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6839      	ldr	r1, [r7, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f000 fcce 	bl	8002958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a21      	ldr	r2, [pc, #132]	@ (8002048 <HAL_TIM_PWM_Start+0x13c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d009      	beq.n	8001fda <HAL_TIM_PWM_Start+0xce>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a20      	ldr	r2, [pc, #128]	@ (800204c <HAL_TIM_PWM_Start+0x140>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d004      	beq.n	8001fda <HAL_TIM_PWM_Start+0xce>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <HAL_TIM_PWM_Start+0x144>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_TIM_PWM_Start+0xd2>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_TIM_PWM_Start+0xd4>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2180      	movs	r1, #128	@ 0x80
 8001ff0:	0209      	lsls	r1, r1, #8
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <HAL_TIM_PWM_Start+0x13c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d004      	beq.n	800200a <HAL_TIM_PWM_Start+0xfe>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a13      	ldr	r2, [pc, #76]	@ (8002054 <HAL_TIM_PWM_Start+0x148>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d111      	bne.n	800202e <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2207      	movs	r2, #7
 8002012:	4013      	ands	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b06      	cmp	r3, #6
 800201a:	d010      	beq.n	800203e <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2101      	movs	r1, #1
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800202c:	e007      	b.n	800203e <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b004      	add	sp, #16
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40012c00 	.word	0x40012c00
 800204c:	40014400 	.word	0x40014400
 8002050:	40014800 	.word	0x40014800
 8002054:	40000400 	.word	0x40000400

08002058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2317      	movs	r3, #23
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	223c      	movs	r2, #60	@ 0x3c
 8002070:	5c9b      	ldrb	r3, [r3, r2]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002076:	2302      	movs	r3, #2
 8002078:	e0ad      	b.n	80021d6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	223c      	movs	r2, #60	@ 0x3c
 800207e:	2101      	movs	r1, #1
 8002080:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b0c      	cmp	r3, #12
 8002086:	d100      	bne.n	800208a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002088:	e076      	b.n	8002178 <HAL_TIM_PWM_ConfigChannel+0x120>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0c      	cmp	r3, #12
 800208e:	d900      	bls.n	8002092 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002090:	e095      	b.n	80021be <HAL_TIM_PWM_ConfigChannel+0x166>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d04e      	beq.n	8002136 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b08      	cmp	r3, #8
 800209c:	d900      	bls.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x48>
 800209e:	e08e      	b.n	80021be <HAL_TIM_PWM_ConfigChannel+0x166>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_PWM_ConfigChannel+0x56>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d021      	beq.n	80020f0 <HAL_TIM_PWM_ConfigChannel+0x98>
 80020ac:	e087      	b.n	80021be <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	0011      	movs	r1, r2
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 f9d4 	bl	8002464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2108      	movs	r1, #8
 80020c8:	430a      	orrs	r2, r1
 80020ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2104      	movs	r1, #4
 80020d8:	438a      	bics	r2, r1
 80020da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6999      	ldr	r1, [r3, #24]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	619a      	str	r2, [r3, #24]
      break;
 80020ee:	e06b      	b.n	80021c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	0011      	movs	r1, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 fa31 	bl	8002560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2180      	movs	r1, #128	@ 0x80
 800210a:	0109      	lsls	r1, r1, #4
 800210c:	430a      	orrs	r2, r1
 800210e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4931      	ldr	r1, [pc, #196]	@ (80021e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800211c:	400a      	ands	r2, r1
 800211e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6999      	ldr	r1, [r3, #24]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	021a      	lsls	r2, r3, #8
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	619a      	str	r2, [r3, #24]
      break;
 8002134:	e048      	b.n	80021c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	0011      	movs	r1, r2
 800213e:	0018      	movs	r0, r3
 8002140:	f000 fa8c 	bl	800265c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2108      	movs	r1, #8
 8002150:	430a      	orrs	r2, r1
 8002152:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2104      	movs	r1, #4
 8002160:	438a      	bics	r2, r1
 8002162:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69d9      	ldr	r1, [r3, #28]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	61da      	str	r2, [r3, #28]
      break;
 8002176:	e027      	b.n	80021c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	0011      	movs	r1, r2
 8002180:	0018      	movs	r0, r3
 8002182:	f000 faeb 	bl	800275c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69da      	ldr	r2, [r3, #28]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2180      	movs	r1, #128	@ 0x80
 8002192:	0109      	lsls	r1, r1, #4
 8002194:	430a      	orrs	r2, r1
 8002196:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69da      	ldr	r2, [r3, #28]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	490f      	ldr	r1, [pc, #60]	@ (80021e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80021a4:	400a      	ands	r2, r1
 80021a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	69d9      	ldr	r1, [r3, #28]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	021a      	lsls	r2, r3, #8
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	61da      	str	r2, [r3, #28]
      break;
 80021bc:	e004      	b.n	80021c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80021be:	2317      	movs	r3, #23
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
      break;
 80021c6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	223c      	movs	r2, #60	@ 0x3c
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]

  return status;
 80021d0:	2317      	movs	r3, #23
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	781b      	ldrb	r3, [r3, #0]
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b006      	add	sp, #24
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	fffffbff 	.word	0xfffffbff

080021e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ee:	230f      	movs	r3, #15
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	223c      	movs	r2, #60	@ 0x3c
 80021fa:	5c9b      	ldrb	r3, [r3, r2]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_TIM_ConfigClockSource+0x20>
 8002200:	2302      	movs	r3, #2
 8002202:	e0bc      	b.n	800237e <HAL_TIM_ConfigClockSource+0x19a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	223c      	movs	r2, #60	@ 0x3c
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	223d      	movs	r2, #61	@ 0x3d
 8002210:	2102      	movs	r1, #2
 8002212:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2277      	movs	r2, #119	@ 0x77
 8002220:	4393      	bics	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4a58      	ldr	r2, [pc, #352]	@ (8002388 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2280      	movs	r2, #128	@ 0x80
 800223a:	0192      	lsls	r2, r2, #6
 800223c:	4293      	cmp	r3, r2
 800223e:	d040      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0xde>
 8002240:	2280      	movs	r2, #128	@ 0x80
 8002242:	0192      	lsls	r2, r2, #6
 8002244:	4293      	cmp	r3, r2
 8002246:	d900      	bls.n	800224a <HAL_TIM_ConfigClockSource+0x66>
 8002248:	e088      	b.n	800235c <HAL_TIM_ConfigClockSource+0x178>
 800224a:	2280      	movs	r2, #128	@ 0x80
 800224c:	0152      	lsls	r2, r2, #5
 800224e:	4293      	cmp	r3, r2
 8002250:	d100      	bne.n	8002254 <HAL_TIM_ConfigClockSource+0x70>
 8002252:	e088      	b.n	8002366 <HAL_TIM_ConfigClockSource+0x182>
 8002254:	2280      	movs	r2, #128	@ 0x80
 8002256:	0152      	lsls	r2, r2, #5
 8002258:	4293      	cmp	r3, r2
 800225a:	d900      	bls.n	800225e <HAL_TIM_ConfigClockSource+0x7a>
 800225c:	e07e      	b.n	800235c <HAL_TIM_ConfigClockSource+0x178>
 800225e:	2b70      	cmp	r3, #112	@ 0x70
 8002260:	d018      	beq.n	8002294 <HAL_TIM_ConfigClockSource+0xb0>
 8002262:	d900      	bls.n	8002266 <HAL_TIM_ConfigClockSource+0x82>
 8002264:	e07a      	b.n	800235c <HAL_TIM_ConfigClockSource+0x178>
 8002266:	2b60      	cmp	r3, #96	@ 0x60
 8002268:	d04f      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x126>
 800226a:	d900      	bls.n	800226e <HAL_TIM_ConfigClockSource+0x8a>
 800226c:	e076      	b.n	800235c <HAL_TIM_ConfigClockSource+0x178>
 800226e:	2b50      	cmp	r3, #80	@ 0x50
 8002270:	d03b      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x106>
 8002272:	d900      	bls.n	8002276 <HAL_TIM_ConfigClockSource+0x92>
 8002274:	e072      	b.n	800235c <HAL_TIM_ConfigClockSource+0x178>
 8002276:	2b40      	cmp	r3, #64	@ 0x40
 8002278:	d057      	beq.n	800232a <HAL_TIM_ConfigClockSource+0x146>
 800227a:	d900      	bls.n	800227e <HAL_TIM_ConfigClockSource+0x9a>
 800227c:	e06e      	b.n	800235c <HAL_TIM_ConfigClockSource+0x178>
 800227e:	2b30      	cmp	r3, #48	@ 0x30
 8002280:	d063      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x166>
 8002282:	d86b      	bhi.n	800235c <HAL_TIM_ConfigClockSource+0x178>
 8002284:	2b20      	cmp	r3, #32
 8002286:	d060      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x166>
 8002288:	d868      	bhi.n	800235c <HAL_TIM_ConfigClockSource+0x178>
 800228a:	2b00      	cmp	r3, #0
 800228c:	d05d      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x166>
 800228e:	2b10      	cmp	r3, #16
 8002290:	d05b      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x166>
 8002292:	e063      	b.n	800235c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022a4:	f000 fb38 	bl	8002918 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2277      	movs	r2, #119	@ 0x77
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	609a      	str	r2, [r3, #8]
      break;
 80022c0:	e052      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022d2:	f000 fb21 	bl	8002918 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2180      	movs	r1, #128	@ 0x80
 80022e2:	01c9      	lsls	r1, r1, #7
 80022e4:	430a      	orrs	r2, r1
 80022e6:	609a      	str	r2, [r3, #8]
      break;
 80022e8:	e03e      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022f6:	001a      	movs	r2, r3
 80022f8:	f000 fa94 	bl	8002824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2150      	movs	r1, #80	@ 0x50
 8002302:	0018      	movs	r0, r3
 8002304:	f000 faee 	bl	80028e4 <TIM_ITRx_SetConfig>
      break;
 8002308:	e02e      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002316:	001a      	movs	r2, r3
 8002318:	f000 fab2 	bl	8002880 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2160      	movs	r1, #96	@ 0x60
 8002322:	0018      	movs	r0, r3
 8002324:	f000 fade 	bl	80028e4 <TIM_ITRx_SetConfig>
      break;
 8002328:	e01e      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002336:	001a      	movs	r2, r3
 8002338:	f000 fa74 	bl	8002824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2140      	movs	r1, #64	@ 0x40
 8002342:	0018      	movs	r0, r3
 8002344:	f000 face 	bl	80028e4 <TIM_ITRx_SetConfig>
      break;
 8002348:	e00e      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0019      	movs	r1, r3
 8002354:	0010      	movs	r0, r2
 8002356:	f000 fac5 	bl	80028e4 <TIM_ITRx_SetConfig>
      break;
 800235a:	e005      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800235c:	230f      	movs	r3, #15
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
      break;
 8002364:	e000      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002366:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	223d      	movs	r2, #61	@ 0x3d
 800236c:	2101      	movs	r1, #1
 800236e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	223c      	movs	r2, #60	@ 0x3c
 8002374:	2100      	movs	r1, #0
 8002376:	5499      	strb	r1, [r3, r2]

  return status;
 8002378:	230f      	movs	r3, #15
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	781b      	ldrb	r3, [r3, #0]
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b004      	add	sp, #16
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	ffff00ff 	.word	0xffff00ff

0800238c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a2b      	ldr	r2, [pc, #172]	@ (800244c <TIM_Base_SetConfig+0xc0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d003      	beq.n	80023ac <TIM_Base_SetConfig+0x20>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002450 <TIM_Base_SetConfig+0xc4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d108      	bne.n	80023be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2270      	movs	r2, #112	@ 0x70
 80023b0:	4393      	bics	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a22      	ldr	r2, [pc, #136]	@ (800244c <TIM_Base_SetConfig+0xc0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00f      	beq.n	80023e6 <TIM_Base_SetConfig+0x5a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <TIM_Base_SetConfig+0xc4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00b      	beq.n	80023e6 <TIM_Base_SetConfig+0x5a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a20      	ldr	r2, [pc, #128]	@ (8002454 <TIM_Base_SetConfig+0xc8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <TIM_Base_SetConfig+0x5a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002458 <TIM_Base_SetConfig+0xcc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d003      	beq.n	80023e6 <TIM_Base_SetConfig+0x5a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1e      	ldr	r2, [pc, #120]	@ (800245c <TIM_Base_SetConfig+0xd0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d108      	bne.n	80023f8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <TIM_Base_SetConfig+0xd4>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2280      	movs	r2, #128	@ 0x80
 80023fc:	4393      	bics	r3, r2
 80023fe:	001a      	movs	r2, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <TIM_Base_SetConfig+0xc0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <TIM_Base_SetConfig+0xaa>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a0b      	ldr	r2, [pc, #44]	@ (8002458 <TIM_Base_SetConfig+0xcc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d003      	beq.n	8002436 <TIM_Base_SetConfig+0xaa>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <TIM_Base_SetConfig+0xd0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d103      	bne.n	800243e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	615a      	str	r2, [r3, #20]
}
 8002444:	46c0      	nop			@ (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b004      	add	sp, #16
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40000400 	.word	0x40000400
 8002454:	40002000 	.word	0x40002000
 8002458:	40014400 	.word	0x40014400
 800245c:	40014800 	.word	0x40014800
 8002460:	fffffcff 	.word	0xfffffcff

08002464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	2201      	movs	r2, #1
 8002474:	4393      	bics	r3, r2
 8002476:	001a      	movs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2270      	movs	r2, #112	@ 0x70
 8002492:	4393      	bics	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2203      	movs	r2, #3
 800249a:	4393      	bics	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2202      	movs	r2, #2
 80024ac:	4393      	bics	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a23      	ldr	r2, [pc, #140]	@ (800254c <TIM_OC1_SetConfig+0xe8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <TIM_OC1_SetConfig+0x6e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a22      	ldr	r2, [pc, #136]	@ (8002550 <TIM_OC1_SetConfig+0xec>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d003      	beq.n	80024d2 <TIM_OC1_SetConfig+0x6e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a21      	ldr	r2, [pc, #132]	@ (8002554 <TIM_OC1_SetConfig+0xf0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d10c      	bne.n	80024ec <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2208      	movs	r2, #8
 80024d6:	4393      	bics	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2204      	movs	r2, #4
 80024e8:	4393      	bics	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a17      	ldr	r2, [pc, #92]	@ (800254c <TIM_OC1_SetConfig+0xe8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d007      	beq.n	8002504 <TIM_OC1_SetConfig+0xa0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a16      	ldr	r2, [pc, #88]	@ (8002550 <TIM_OC1_SetConfig+0xec>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d003      	beq.n	8002504 <TIM_OC1_SetConfig+0xa0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a15      	ldr	r2, [pc, #84]	@ (8002554 <TIM_OC1_SetConfig+0xf0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d111      	bne.n	8002528 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4a14      	ldr	r2, [pc, #80]	@ (8002558 <TIM_OC1_SetConfig+0xf4>)
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4a13      	ldr	r2, [pc, #76]	@ (800255c <TIM_OC1_SetConfig+0xf8>)
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	621a      	str	r2, [r3, #32]
}
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b006      	add	sp, #24
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40014400 	.word	0x40014400
 8002554:	40014800 	.word	0x40014800
 8002558:	fffffeff 	.word	0xfffffeff
 800255c:	fffffdff 	.word	0xfffffdff

08002560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	2210      	movs	r2, #16
 8002570:	4393      	bics	r3, r2
 8002572:	001a      	movs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a2c      	ldr	r2, [pc, #176]	@ (8002640 <TIM_OC2_SetConfig+0xe0>)
 800258e:	4013      	ands	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a2b      	ldr	r2, [pc, #172]	@ (8002644 <TIM_OC2_SetConfig+0xe4>)
 8002596:	4013      	ands	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2220      	movs	r2, #32
 80025aa:	4393      	bics	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a22      	ldr	r2, [pc, #136]	@ (8002648 <TIM_OC2_SetConfig+0xe8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10d      	bne.n	80025de <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2280      	movs	r2, #128	@ 0x80
 80025c6:	4393      	bics	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2240      	movs	r2, #64	@ 0x40
 80025da:	4393      	bics	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a19      	ldr	r2, [pc, #100]	@ (8002648 <TIM_OC2_SetConfig+0xe8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <TIM_OC2_SetConfig+0x96>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a18      	ldr	r2, [pc, #96]	@ (800264c <TIM_OC2_SetConfig+0xec>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d003      	beq.n	80025f6 <TIM_OC2_SetConfig+0x96>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a17      	ldr	r2, [pc, #92]	@ (8002650 <TIM_OC2_SetConfig+0xf0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d113      	bne.n	800261e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4a16      	ldr	r2, [pc, #88]	@ (8002654 <TIM_OC2_SetConfig+0xf4>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4a15      	ldr	r2, [pc, #84]	@ (8002658 <TIM_OC2_SetConfig+0xf8>)
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	621a      	str	r2, [r3, #32]
}
 8002638:	46c0      	nop			@ (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b006      	add	sp, #24
 800263e:	bd80      	pop	{r7, pc}
 8002640:	ffff8fff 	.word	0xffff8fff
 8002644:	fffffcff 	.word	0xfffffcff
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40014400 	.word	0x40014400
 8002650:	40014800 	.word	0x40014800
 8002654:	fffffbff 	.word	0xfffffbff
 8002658:	fffff7ff 	.word	0xfffff7ff

0800265c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a33      	ldr	r2, [pc, #204]	@ (8002738 <TIM_OC3_SetConfig+0xdc>)
 800266c:	401a      	ands	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2270      	movs	r2, #112	@ 0x70
 8002688:	4393      	bics	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2203      	movs	r2, #3
 8002690:	4393      	bics	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	4a26      	ldr	r2, [pc, #152]	@ (800273c <TIM_OC3_SetConfig+0xe0>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a22      	ldr	r2, [pc, #136]	@ (8002740 <TIM_OC3_SetConfig+0xe4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10d      	bne.n	80026d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4a21      	ldr	r2, [pc, #132]	@ (8002744 <TIM_OC3_SetConfig+0xe8>)
 80026be:	4013      	ands	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002748 <TIM_OC3_SetConfig+0xec>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a19      	ldr	r2, [pc, #100]	@ (8002740 <TIM_OC3_SetConfig+0xe4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <TIM_OC3_SetConfig+0x92>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a1a      	ldr	r2, [pc, #104]	@ (800274c <TIM_OC3_SetConfig+0xf0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d003      	beq.n	80026ee <TIM_OC3_SetConfig+0x92>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a19      	ldr	r2, [pc, #100]	@ (8002750 <TIM_OC3_SetConfig+0xf4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d113      	bne.n	8002716 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4a18      	ldr	r2, [pc, #96]	@ (8002754 <TIM_OC3_SetConfig+0xf8>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4a17      	ldr	r2, [pc, #92]	@ (8002758 <TIM_OC3_SetConfig+0xfc>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	621a      	str	r2, [r3, #32]
}
 8002730:	46c0      	nop			@ (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b006      	add	sp, #24
 8002736:	bd80      	pop	{r7, pc}
 8002738:	fffffeff 	.word	0xfffffeff
 800273c:	fffffdff 	.word	0xfffffdff
 8002740:	40012c00 	.word	0x40012c00
 8002744:	fffff7ff 	.word	0xfffff7ff
 8002748:	fffffbff 	.word	0xfffffbff
 800274c:	40014400 	.word	0x40014400
 8002750:	40014800 	.word	0x40014800
 8002754:	ffffefff 	.word	0xffffefff
 8002758:	ffffdfff 	.word	0xffffdfff

0800275c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a26      	ldr	r2, [pc, #152]	@ (8002804 <TIM_OC4_SetConfig+0xa8>)
 800276c:	401a      	ands	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a20      	ldr	r2, [pc, #128]	@ (8002808 <TIM_OC4_SetConfig+0xac>)
 8002788:	4013      	ands	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <TIM_OC4_SetConfig+0xb0>)
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <TIM_OC4_SetConfig+0xb4>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	031b      	lsls	r3, r3, #12
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a17      	ldr	r2, [pc, #92]	@ (8002814 <TIM_OC4_SetConfig+0xb8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d007      	beq.n	80027cc <TIM_OC4_SetConfig+0x70>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a16      	ldr	r2, [pc, #88]	@ (8002818 <TIM_OC4_SetConfig+0xbc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d003      	beq.n	80027cc <TIM_OC4_SetConfig+0x70>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a15      	ldr	r2, [pc, #84]	@ (800281c <TIM_OC4_SetConfig+0xc0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d109      	bne.n	80027e0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4a14      	ldr	r2, [pc, #80]	@ (8002820 <TIM_OC4_SetConfig+0xc4>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	621a      	str	r2, [r3, #32]
}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b006      	add	sp, #24
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	ffffefff 	.word	0xffffefff
 8002808:	ffff8fff 	.word	0xffff8fff
 800280c:	fffffcff 	.word	0xfffffcff
 8002810:	ffffdfff 	.word	0xffffdfff
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40014400 	.word	0x40014400
 800281c:	40014800 	.word	0x40014800
 8002820:	ffffbfff 	.word	0xffffbfff

08002824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	2201      	movs	r2, #1
 800283c:	4393      	bics	r3, r2
 800283e:	001a      	movs	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	22f0      	movs	r2, #240	@ 0xf0
 800284e:	4393      	bics	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	220a      	movs	r2, #10
 8002860:	4393      	bics	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	621a      	str	r2, [r3, #32]
}
 8002878:	46c0      	nop			@ (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b006      	add	sp, #24
 800287e:	bd80      	pop	{r7, pc}

08002880 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	2210      	movs	r2, #16
 8002892:	4393      	bics	r3, r2
 8002894:	001a      	movs	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <TIM_TI2_ConfigInputStage+0x60>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	031b      	lsls	r3, r3, #12
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	22a0      	movs	r2, #160	@ 0xa0
 80028bc:	4393      	bics	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	621a      	str	r2, [r3, #32]
}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b006      	add	sp, #24
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	ffff0fff 	.word	0xffff0fff

080028e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2270      	movs	r2, #112	@ 0x70
 80028f8:	4393      	bics	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	2207      	movs	r2, #7
 8002904:	4313      	orrs	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	609a      	str	r2, [r3, #8]
}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	b004      	add	sp, #16
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	4a09      	ldr	r2, [pc, #36]	@ (8002954 <TIM_ETR_SetConfig+0x3c>)
 8002930:	4013      	ands	r3, r2
 8002932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	021a      	lsls	r2, r3, #8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	431a      	orrs	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4313      	orrs	r3, r2
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	46c0      	nop			@ (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b006      	add	sp, #24
 8002952:	bd80      	pop	{r7, pc}
 8002954:	ffff00ff 	.word	0xffff00ff

08002958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	221f      	movs	r2, #31
 8002968:	4013      	ands	r3, r2
 800296a:	2201      	movs	r2, #1
 800296c:	409a      	lsls	r2, r3
 800296e:	0013      	movs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	43d2      	mvns	r2, r2
 800297a:	401a      	ands	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1a      	ldr	r2, [r3, #32]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	211f      	movs	r1, #31
 8002988:	400b      	ands	r3, r1
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4099      	lsls	r1, r3
 800298e:	000b      	movs	r3, r1
 8002990:	431a      	orrs	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	621a      	str	r2, [r3, #32]
}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b006      	add	sp, #24
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d108      	bne.n	80029c2 <HAL_TIMEx_PWMN_Start+0x22>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2242      	movs	r2, #66	@ 0x42
 80029b4:	5c9b      	ldrb	r3, [r3, r2]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	1e5a      	subs	r2, r3, #1
 80029bc:	4193      	sbcs	r3, r2
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	e01f      	b.n	8002a02 <HAL_TIMEx_PWMN_Start+0x62>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d108      	bne.n	80029da <HAL_TIMEx_PWMN_Start+0x3a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2243      	movs	r2, #67	@ 0x43
 80029cc:	5c9b      	ldrb	r3, [r3, r2]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	1e5a      	subs	r2, r3, #1
 80029d4:	4193      	sbcs	r3, r2
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	e013      	b.n	8002a02 <HAL_TIMEx_PWMN_Start+0x62>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d108      	bne.n	80029f2 <HAL_TIMEx_PWMN_Start+0x52>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2244      	movs	r2, #68	@ 0x44
 80029e4:	5c9b      	ldrb	r3, [r3, r2]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	1e5a      	subs	r2, r3, #1
 80029ec:	4193      	sbcs	r3, r2
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	e007      	b.n	8002a02 <HAL_TIMEx_PWMN_Start+0x62>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2245      	movs	r2, #69	@ 0x45
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	1e5a      	subs	r2, r3, #1
 80029fe:	4193      	sbcs	r3, r2
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e050      	b.n	8002aac <HAL_TIMEx_PWMN_Start+0x10c>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d104      	bne.n	8002a1a <HAL_TIMEx_PWMN_Start+0x7a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2242      	movs	r2, #66	@ 0x42
 8002a14:	2102      	movs	r1, #2
 8002a16:	5499      	strb	r1, [r3, r2]
 8002a18:	e013      	b.n	8002a42 <HAL_TIMEx_PWMN_Start+0xa2>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d104      	bne.n	8002a2a <HAL_TIMEx_PWMN_Start+0x8a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2243      	movs	r2, #67	@ 0x43
 8002a24:	2102      	movs	r1, #2
 8002a26:	5499      	strb	r1, [r3, r2]
 8002a28:	e00b      	b.n	8002a42 <HAL_TIMEx_PWMN_Start+0xa2>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d104      	bne.n	8002a3a <HAL_TIMEx_PWMN_Start+0x9a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2244      	movs	r2, #68	@ 0x44
 8002a34:	2102      	movs	r1, #2
 8002a36:	5499      	strb	r1, [r3, r2]
 8002a38:	e003      	b.n	8002a42 <HAL_TIMEx_PWMN_Start+0xa2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2245      	movs	r2, #69	@ 0x45
 8002a3e:	2102      	movs	r1, #2
 8002a40:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 f8e6 	bl	8002c1c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2180      	movs	r1, #128	@ 0x80
 8002a5c:	0209      	lsls	r1, r1, #8
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a13      	ldr	r2, [pc, #76]	@ (8002ab4 <HAL_TIMEx_PWMN_Start+0x114>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d004      	beq.n	8002a76 <HAL_TIMEx_PWMN_Start+0xd6>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a11      	ldr	r2, [pc, #68]	@ (8002ab8 <HAL_TIMEx_PWMN_Start+0x118>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d111      	bne.n	8002a9a <HAL_TIMEx_PWMN_Start+0xfa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	4013      	ands	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b06      	cmp	r3, #6
 8002a86:	d010      	beq.n	8002aaa <HAL_TIMEx_PWMN_Start+0x10a>
    {
      __HAL_TIM_ENABLE(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2101      	movs	r1, #1
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a98:	e007      	b.n	8002aaa <HAL_TIMEx_PWMN_Start+0x10a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b004      	add	sp, #16
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40000400 	.word	0x40000400

08002abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	223c      	movs	r2, #60	@ 0x3c
 8002aca:	5c9b      	ldrb	r3, [r3, r2]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e03c      	b.n	8002b4e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	223c      	movs	r2, #60	@ 0x3c
 8002ad8:	2101      	movs	r1, #1
 8002ada:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	223d      	movs	r2, #61	@ 0x3d
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2270      	movs	r2, #112	@ 0x70
 8002af8:	4393      	bics	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d004      	beq.n	8002b22 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b5c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10c      	bne.n	8002b3c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2280      	movs	r2, #128	@ 0x80
 8002b26:	4393      	bics	r3, r2
 8002b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	223d      	movs	r2, #61	@ 0x3d
 8002b40:	2101      	movs	r1, #1
 8002b42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	223c      	movs	r2, #60	@ 0x3c
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b004      	add	sp, #16
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400

08002b60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	223c      	movs	r2, #60	@ 0x3c
 8002b72:	5c9b      	ldrb	r3, [r3, r2]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e03e      	b.n	8002bfa <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	223c      	movs	r2, #60	@ 0x3c
 8002b80:	2101      	movs	r1, #1
 8002b82:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	22ff      	movs	r2, #255	@ 0xff
 8002b88:	4393      	bics	r3, r2
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002b98:	401a      	ands	r2, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a18      	ldr	r2, [pc, #96]	@ (8002c08 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a13      	ldr	r2, [pc, #76]	@ (8002c10 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4a11      	ldr	r2, [pc, #68]	@ (8002c14 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8002c18 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002bde:	401a      	ands	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	223c      	movs	r2, #60	@ 0x3c
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b004      	add	sp, #16
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	fffffcff 	.word	0xfffffcff
 8002c08:	fffffbff 	.word	0xfffffbff
 8002c0c:	fffff7ff 	.word	0xfffff7ff
 8002c10:	ffffefff 	.word	0xffffefff
 8002c14:	ffffdfff 	.word	0xffffdfff
 8002c18:	ffffbfff 	.word	0xffffbfff

08002c1c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	221f      	movs	r2, #31
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2204      	movs	r2, #4
 8002c30:	409a      	lsls	r2, r3
 8002c32:	0013      	movs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	43d2      	mvns	r2, r2
 8002c3e:	401a      	ands	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1a      	ldr	r2, [r3, #32]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	211f      	movs	r1, #31
 8002c4c:	400b      	ands	r3, r1
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4099      	lsls	r1, r3
 8002c52:	000b      	movs	r3, r1
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	621a      	str	r2, [r3, #32]
}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b006      	add	sp, #24
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e044      	b.n	8002d00 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2278      	movs	r2, #120	@ 0x78
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7fe f8ad 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2224      	movs	r2, #36	@ 0x24
 8002c92:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	438a      	bics	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 f9b8 	bl	800301c <UART_SetConfig>
 8002cac:	0003      	movs	r3, r0
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e024      	b.n	8002d00 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 faeb 	bl	800329c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	490d      	ldr	r1, [pc, #52]	@ (8002d08 <HAL_UART_Init+0xa4>)
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2108      	movs	r1, #8
 8002ce2:	438a      	bics	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 fb83 	bl	8003404 <UART_CheckIdleState>
 8002cfe:	0003      	movs	r3, r0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	fffff7ff 	.word	0xfffff7ff

08002d0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	@ 0x28
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	1dbb      	adds	r3, r7, #6
 8002d1a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d000      	beq.n	8002d26 <HAL_UART_Transmit+0x1a>
 8002d24:	e08c      	b.n	8002e40 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_UART_Transmit+0x28>
 8002d2c:	1dbb      	adds	r3, r7, #6
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e084      	b.n	8002e42 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	2380      	movs	r3, #128	@ 0x80
 8002d3e:	015b      	lsls	r3, r3, #5
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d109      	bne.n	8002d58 <HAL_UART_Transmit+0x4c>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	d001      	beq.n	8002d58 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e074      	b.n	8002e42 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2284      	movs	r2, #132	@ 0x84
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2221      	movs	r2, #33	@ 0x21
 8002d64:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d66:	f7fe f979 	bl	800105c <HAL_GetTick>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1dba      	adds	r2, r7, #6
 8002d72:	2150      	movs	r1, #80	@ 0x50
 8002d74:	8812      	ldrh	r2, [r2, #0]
 8002d76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1dba      	adds	r2, r7, #6
 8002d7c:	2152      	movs	r1, #82	@ 0x52
 8002d7e:	8812      	ldrh	r2, [r2, #0]
 8002d80:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	2380      	movs	r3, #128	@ 0x80
 8002d88:	015b      	lsls	r3, r3, #5
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d108      	bne.n	8002da0 <HAL_UART_Transmit+0x94>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	e003      	b.n	8002da8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002da8:	e02f      	b.n	8002e0a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	0013      	movs	r3, r2
 8002db4:	2200      	movs	r2, #0
 8002db6:	2180      	movs	r1, #128	@ 0x80
 8002db8:	f000 fbcc 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 8002dbc:	1e03      	subs	r3, r0, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e03b      	b.n	8002e42 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	881a      	ldrh	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	05d2      	lsls	r2, r2, #23
 8002dda:	0dd2      	lsrs	r2, r2, #23
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	3302      	adds	r3, #2
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	e007      	b.n	8002df8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3301      	adds	r3, #1
 8002df6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2252      	movs	r2, #82	@ 0x52
 8002dfc:	5a9b      	ldrh	r3, [r3, r2]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b299      	uxth	r1, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2252      	movs	r2, #82	@ 0x52
 8002e08:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2252      	movs	r2, #82	@ 0x52
 8002e0e:	5a9b      	ldrh	r3, [r3, r2]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1c9      	bne.n	8002daa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	0013      	movs	r3, r2
 8002e20:	2200      	movs	r2, #0
 8002e22:	2140      	movs	r1, #64	@ 0x40
 8002e24:	f000 fb96 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d004      	beq.n	8002e36 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e005      	b.n	8002e42 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b008      	add	sp, #32
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	@ 0x28
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	1dbb      	adds	r3, r7, #6
 8002e5a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2280      	movs	r2, #128	@ 0x80
 8002e60:	589b      	ldr	r3, [r3, r2]
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d000      	beq.n	8002e68 <HAL_UART_Receive+0x1c>
 8002e66:	e0d1      	b.n	800300c <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_UART_Receive+0x2a>
 8002e6e:	1dbb      	adds	r3, r7, #6
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0c9      	b.n	800300e <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	015b      	lsls	r3, r3, #5
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d109      	bne.n	8002e9a <HAL_UART_Receive+0x4e>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2201      	movs	r2, #1
 8002e92:	4013      	ands	r3, r2
 8002e94:	d001      	beq.n	8002e9a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0b9      	b.n	800300e <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2284      	movs	r2, #132	@ 0x84
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2280      	movs	r2, #128	@ 0x80
 8002ea6:	2122      	movs	r1, #34	@ 0x22
 8002ea8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb0:	f7fe f8d4 	bl	800105c <HAL_GetTick>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1dba      	adds	r2, r7, #6
 8002ebc:	2158      	movs	r1, #88	@ 0x58
 8002ebe:	8812      	ldrh	r2, [r2, #0]
 8002ec0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1dba      	adds	r2, r7, #6
 8002ec6:	215a      	movs	r1, #90	@ 0x5a
 8002ec8:	8812      	ldrh	r2, [r2, #0]
 8002eca:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	015b      	lsls	r3, r3, #5
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_UART_Receive+0xa8>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <HAL_UART_Receive+0x9e>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	225c      	movs	r2, #92	@ 0x5c
 8002ee4:	494c      	ldr	r1, [pc, #304]	@ (8003018 <HAL_UART_Receive+0x1cc>)
 8002ee6:	5299      	strh	r1, [r3, r2]
 8002ee8:	e02e      	b.n	8002f48 <HAL_UART_Receive+0xfc>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	225c      	movs	r2, #92	@ 0x5c
 8002eee:	21ff      	movs	r1, #255	@ 0xff
 8002ef0:	5299      	strh	r1, [r3, r2]
 8002ef2:	e029      	b.n	8002f48 <HAL_UART_Receive+0xfc>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10d      	bne.n	8002f18 <HAL_UART_Receive+0xcc>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <HAL_UART_Receive+0xc2>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	225c      	movs	r2, #92	@ 0x5c
 8002f08:	21ff      	movs	r1, #255	@ 0xff
 8002f0a:	5299      	strh	r1, [r3, r2]
 8002f0c:	e01c      	b.n	8002f48 <HAL_UART_Receive+0xfc>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	225c      	movs	r2, #92	@ 0x5c
 8002f12:	217f      	movs	r1, #127	@ 0x7f
 8002f14:	5299      	strh	r1, [r3, r2]
 8002f16:	e017      	b.n	8002f48 <HAL_UART_Receive+0xfc>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	055b      	lsls	r3, r3, #21
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d10d      	bne.n	8002f40 <HAL_UART_Receive+0xf4>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_UART_Receive+0xea>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	225c      	movs	r2, #92	@ 0x5c
 8002f30:	217f      	movs	r1, #127	@ 0x7f
 8002f32:	5299      	strh	r1, [r3, r2]
 8002f34:	e008      	b.n	8002f48 <HAL_UART_Receive+0xfc>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	225c      	movs	r2, #92	@ 0x5c
 8002f3a:	213f      	movs	r1, #63	@ 0x3f
 8002f3c:	5299      	strh	r1, [r3, r2]
 8002f3e:	e003      	b.n	8002f48 <HAL_UART_Receive+0xfc>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	225c      	movs	r2, #92	@ 0x5c
 8002f44:	2100      	movs	r1, #0
 8002f46:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002f48:	2312      	movs	r3, #18
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	215c      	movs	r1, #92	@ 0x5c
 8002f50:	5a52      	ldrh	r2, [r2, r1]
 8002f52:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	015b      	lsls	r3, r3, #5
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d108      	bne.n	8002f72 <HAL_UART_Receive+0x126>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d104      	bne.n	8002f72 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	e003      	b.n	8002f7a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f7a:	e03b      	b.n	8002ff4 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	0013      	movs	r3, r2
 8002f86:	2200      	movs	r2, #0
 8002f88:	2120      	movs	r1, #32
 8002f8a:	f000 fae3 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 8002f8e:	1e03      	subs	r3, r0, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2280      	movs	r2, #128	@ 0x80
 8002f96:	2120      	movs	r1, #32
 8002f98:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e037      	b.n	800300e <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10e      	bne.n	8002fc2 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2212      	movs	r2, #18
 8002fae:	18ba      	adds	r2, r7, r2
 8002fb0:	8812      	ldrh	r2, [r2, #0]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	e00f      	b.n	8002fe2 <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2212      	movs	r2, #18
 8002fce:	18ba      	adds	r2, r7, r2
 8002fd0:	8812      	ldrh	r2, [r2, #0]
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	225a      	movs	r2, #90	@ 0x5a
 8002fe6:	5a9b      	ldrh	r3, [r3, r2]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b299      	uxth	r1, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	225a      	movs	r2, #90	@ 0x5a
 8002ff2:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	225a      	movs	r2, #90	@ 0x5a
 8002ff8:	5a9b      	ldrh	r3, [r3, r2]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1bd      	bne.n	8002f7c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2280      	movs	r2, #128	@ 0x80
 8003004:	2120      	movs	r1, #32
 8003006:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b008      	add	sp, #32
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	000001ff 	.word	0x000001ff

0800301c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003024:	231e      	movs	r3, #30
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a8d      	ldr	r2, [pc, #564]	@ (8003280 <UART_SetConfig+0x264>)
 800304c:	4013      	ands	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	430a      	orrs	r2, r1
 8003058:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a88      	ldr	r2, [pc, #544]	@ (8003284 <UART_SetConfig+0x268>)
 8003062:	4013      	ands	r3, r2
 8003064:	0019      	movs	r1, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a7f      	ldr	r2, [pc, #508]	@ (8003288 <UART_SetConfig+0x26c>)
 800308a:	4013      	ands	r3, r2
 800308c:	0019      	movs	r1, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a7b      	ldr	r2, [pc, #492]	@ (800328c <UART_SetConfig+0x270>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d127      	bne.n	80030f2 <UART_SetConfig+0xd6>
 80030a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003290 <UART_SetConfig+0x274>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	2203      	movs	r2, #3
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d00d      	beq.n	80030ca <UART_SetConfig+0xae>
 80030ae:	d81b      	bhi.n	80030e8 <UART_SetConfig+0xcc>
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d014      	beq.n	80030de <UART_SetConfig+0xc2>
 80030b4:	d818      	bhi.n	80030e8 <UART_SetConfig+0xcc>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <UART_SetConfig+0xa4>
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d00a      	beq.n	80030d4 <UART_SetConfig+0xb8>
 80030be:	e013      	b.n	80030e8 <UART_SetConfig+0xcc>
 80030c0:	231f      	movs	r3, #31
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e021      	b.n	800310e <UART_SetConfig+0xf2>
 80030ca:	231f      	movs	r3, #31
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2202      	movs	r2, #2
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e01c      	b.n	800310e <UART_SetConfig+0xf2>
 80030d4:	231f      	movs	r3, #31
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	2204      	movs	r2, #4
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e017      	b.n	800310e <UART_SetConfig+0xf2>
 80030de:	231f      	movs	r3, #31
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	2208      	movs	r2, #8
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e012      	b.n	800310e <UART_SetConfig+0xf2>
 80030e8:	231f      	movs	r3, #31
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	2210      	movs	r2, #16
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e00d      	b.n	800310e <UART_SetConfig+0xf2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a67      	ldr	r2, [pc, #412]	@ (8003294 <UART_SetConfig+0x278>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d104      	bne.n	8003106 <UART_SetConfig+0xea>
 80030fc:	231f      	movs	r3, #31
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e003      	b.n	800310e <UART_SetConfig+0xf2>
 8003106:	231f      	movs	r3, #31
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	2210      	movs	r2, #16
 800310c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	2380      	movs	r3, #128	@ 0x80
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	429a      	cmp	r2, r3
 8003118:	d15c      	bne.n	80031d4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800311a:	231f      	movs	r3, #31
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b08      	cmp	r3, #8
 8003122:	d015      	beq.n	8003150 <UART_SetConfig+0x134>
 8003124:	dc18      	bgt.n	8003158 <UART_SetConfig+0x13c>
 8003126:	2b04      	cmp	r3, #4
 8003128:	d00d      	beq.n	8003146 <UART_SetConfig+0x12a>
 800312a:	dc15      	bgt.n	8003158 <UART_SetConfig+0x13c>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <UART_SetConfig+0x11a>
 8003130:	2b02      	cmp	r3, #2
 8003132:	d005      	beq.n	8003140 <UART_SetConfig+0x124>
 8003134:	e010      	b.n	8003158 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003136:	f7fe fe2b 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 800313a:	0003      	movs	r3, r0
 800313c:	61bb      	str	r3, [r7, #24]
        break;
 800313e:	e012      	b.n	8003166 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003140:	4b55      	ldr	r3, [pc, #340]	@ (8003298 <UART_SetConfig+0x27c>)
 8003142:	61bb      	str	r3, [r7, #24]
        break;
 8003144:	e00f      	b.n	8003166 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003146:	f7fe fdc1 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 800314a:	0003      	movs	r3, r0
 800314c:	61bb      	str	r3, [r7, #24]
        break;
 800314e:	e00a      	b.n	8003166 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	61bb      	str	r3, [r7, #24]
        break;
 8003156:	e006      	b.n	8003166 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800315c:	231e      	movs	r3, #30
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
        break;
 8003164:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d100      	bne.n	800316e <UART_SetConfig+0x152>
 800316c:	e07a      	b.n	8003264 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	005a      	lsls	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	18d2      	adds	r2, r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	0019      	movs	r1, r3
 8003180:	0010      	movs	r0, r2
 8003182:	f7fc ffd3 	bl	800012c <__udivsi3>
 8003186:	0003      	movs	r3, r0
 8003188:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b0f      	cmp	r3, #15
 800318e:	d91c      	bls.n	80031ca <UART_SetConfig+0x1ae>
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	025b      	lsls	r3, r3, #9
 8003196:	429a      	cmp	r2, r3
 8003198:	d217      	bcs.n	80031ca <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	b29a      	uxth	r2, r3
 800319e:	200e      	movs	r0, #14
 80031a0:	183b      	adds	r3, r7, r0
 80031a2:	210f      	movs	r1, #15
 80031a4:	438a      	bics	r2, r1
 80031a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2207      	movs	r2, #7
 80031b0:	4013      	ands	r3, r2
 80031b2:	b299      	uxth	r1, r3
 80031b4:	183b      	adds	r3, r7, r0
 80031b6:	183a      	adds	r2, r7, r0
 80031b8:	8812      	ldrh	r2, [r2, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	183a      	adds	r2, r7, r0
 80031c4:	8812      	ldrh	r2, [r2, #0]
 80031c6:	60da      	str	r2, [r3, #12]
 80031c8:	e04c      	b.n	8003264 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80031ca:	231e      	movs	r3, #30
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	2201      	movs	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e047      	b.n	8003264 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031d4:	231f      	movs	r3, #31
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d015      	beq.n	800320a <UART_SetConfig+0x1ee>
 80031de:	dc18      	bgt.n	8003212 <UART_SetConfig+0x1f6>
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d00d      	beq.n	8003200 <UART_SetConfig+0x1e4>
 80031e4:	dc15      	bgt.n	8003212 <UART_SetConfig+0x1f6>
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <UART_SetConfig+0x1d4>
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d005      	beq.n	80031fa <UART_SetConfig+0x1de>
 80031ee:	e010      	b.n	8003212 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f0:	f7fe fdce 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 80031f4:	0003      	movs	r3, r0
 80031f6:	61bb      	str	r3, [r7, #24]
        break;
 80031f8:	e012      	b.n	8003220 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031fa:	4b27      	ldr	r3, [pc, #156]	@ (8003298 <UART_SetConfig+0x27c>)
 80031fc:	61bb      	str	r3, [r7, #24]
        break;
 80031fe:	e00f      	b.n	8003220 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003200:	f7fe fd64 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8003204:	0003      	movs	r3, r0
 8003206:	61bb      	str	r3, [r7, #24]
        break;
 8003208:	e00a      	b.n	8003220 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800320a:	2380      	movs	r3, #128	@ 0x80
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	61bb      	str	r3, [r7, #24]
        break;
 8003210:	e006      	b.n	8003220 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003216:	231e      	movs	r3, #30
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
        break;
 800321e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01e      	beq.n	8003264 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	085a      	lsrs	r2, r3, #1
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	18d2      	adds	r2, r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	0019      	movs	r1, r3
 8003236:	0010      	movs	r0, r2
 8003238:	f7fc ff78 	bl	800012c <__udivsi3>
 800323c:	0003      	movs	r3, r0
 800323e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b0f      	cmp	r3, #15
 8003244:	d90a      	bls.n	800325c <UART_SetConfig+0x240>
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	2380      	movs	r3, #128	@ 0x80
 800324a:	025b      	lsls	r3, r3, #9
 800324c:	429a      	cmp	r2, r3
 800324e:	d205      	bcs.n	800325c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	b29a      	uxth	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	e003      	b.n	8003264 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800325c:	231e      	movs	r3, #30
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003270:	231e      	movs	r3, #30
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	781b      	ldrb	r3, [r3, #0]
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b008      	add	sp, #32
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	efff69f3 	.word	0xefff69f3
 8003284:	ffffcfff 	.word	0xffffcfff
 8003288:	fffff4ff 	.word	0xfffff4ff
 800328c:	40013800 	.word	0x40013800
 8003290:	40021000 	.word	0x40021000
 8003294:	40004400 	.word	0x40004400
 8003298:	007a1200 	.word	0x007a1200

0800329c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	2201      	movs	r2, #1
 80032aa:	4013      	ands	r3, r2
 80032ac:	d00b      	beq.n	80032c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a4a      	ldr	r2, [pc, #296]	@ (80033e0 <UART_AdvFeatureConfig+0x144>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	0019      	movs	r1, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	2202      	movs	r2, #2
 80032cc:	4013      	ands	r3, r2
 80032ce:	d00b      	beq.n	80032e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4a43      	ldr	r2, [pc, #268]	@ (80033e4 <UART_AdvFeatureConfig+0x148>)
 80032d8:	4013      	ands	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	2204      	movs	r2, #4
 80032ee:	4013      	ands	r3, r2
 80032f0:	d00b      	beq.n	800330a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a3b      	ldr	r2, [pc, #236]	@ (80033e8 <UART_AdvFeatureConfig+0x14c>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	2208      	movs	r2, #8
 8003310:	4013      	ands	r3, r2
 8003312:	d00b      	beq.n	800332c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4a34      	ldr	r2, [pc, #208]	@ (80033ec <UART_AdvFeatureConfig+0x150>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	2210      	movs	r2, #16
 8003332:	4013      	ands	r3, r2
 8003334:	d00b      	beq.n	800334e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a2c      	ldr	r2, [pc, #176]	@ (80033f0 <UART_AdvFeatureConfig+0x154>)
 800333e:	4013      	ands	r3, r2
 8003340:	0019      	movs	r1, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	2220      	movs	r2, #32
 8003354:	4013      	ands	r3, r2
 8003356:	d00b      	beq.n	8003370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4a25      	ldr	r2, [pc, #148]	@ (80033f4 <UART_AdvFeatureConfig+0x158>)
 8003360:	4013      	ands	r3, r2
 8003362:	0019      	movs	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	2240      	movs	r2, #64	@ 0x40
 8003376:	4013      	ands	r3, r2
 8003378:	d01d      	beq.n	80033b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a1d      	ldr	r2, [pc, #116]	@ (80033f8 <UART_AdvFeatureConfig+0x15c>)
 8003382:	4013      	ands	r3, r2
 8003384:	0019      	movs	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	035b      	lsls	r3, r3, #13
 800339a:	429a      	cmp	r2, r3
 800339c:	d10b      	bne.n	80033b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4a15      	ldr	r2, [pc, #84]	@ (80033fc <UART_AdvFeatureConfig+0x160>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	0019      	movs	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	2280      	movs	r2, #128	@ 0x80
 80033bc:	4013      	ands	r3, r2
 80033be:	d00b      	beq.n	80033d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003400 <UART_AdvFeatureConfig+0x164>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  }
}
 80033d8:	46c0      	nop			@ (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	fffdffff 	.word	0xfffdffff
 80033e4:	fffeffff 	.word	0xfffeffff
 80033e8:	fffbffff 	.word	0xfffbffff
 80033ec:	ffff7fff 	.word	0xffff7fff
 80033f0:	ffffefff 	.word	0xffffefff
 80033f4:	ffffdfff 	.word	0xffffdfff
 80033f8:	ffefffff 	.word	0xffefffff
 80033fc:	ff9fffff 	.word	0xff9fffff
 8003400:	fff7ffff 	.word	0xfff7ffff

08003404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b092      	sub	sp, #72	@ 0x48
 8003408:	af02      	add	r7, sp, #8
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2284      	movs	r2, #132	@ 0x84
 8003410:	2100      	movs	r1, #0
 8003412:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003414:	f7fd fe22 	bl	800105c <HAL_GetTick>
 8003418:	0003      	movs	r3, r0
 800341a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2208      	movs	r2, #8
 8003424:	4013      	ands	r3, r2
 8003426:	2b08      	cmp	r3, #8
 8003428:	d12c      	bne.n	8003484 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800342a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800342c:	2280      	movs	r2, #128	@ 0x80
 800342e:	0391      	lsls	r1, r2, #14
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4a46      	ldr	r2, [pc, #280]	@ (800354c <UART_CheckIdleState+0x148>)
 8003434:	9200      	str	r2, [sp, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	f000 f88c 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 800343c:	1e03      	subs	r3, r0, #0
 800343e:	d021      	beq.n	8003484 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003440:	f3ef 8310 	mrs	r3, PRIMASK
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003448:	63bb      	str	r3, [r7, #56]	@ 0x38
 800344a:	2301      	movs	r3, #1
 800344c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003450:	f383 8810 	msr	PRIMASK, r3
}
 8003454:	46c0      	nop			@ (mov r8, r8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2180      	movs	r1, #128	@ 0x80
 8003462:	438a      	bics	r2, r1
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2278      	movs	r2, #120	@ 0x78
 800347c:	2100      	movs	r1, #0
 800347e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e05f      	b.n	8003544 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2204      	movs	r2, #4
 800348c:	4013      	ands	r3, r2
 800348e:	2b04      	cmp	r3, #4
 8003490:	d146      	bne.n	8003520 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003494:	2280      	movs	r2, #128	@ 0x80
 8003496:	03d1      	lsls	r1, r2, #15
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4a2c      	ldr	r2, [pc, #176]	@ (800354c <UART_CheckIdleState+0x148>)
 800349c:	9200      	str	r2, [sp, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	f000 f858 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 80034a4:	1e03      	subs	r3, r0, #0
 80034a6:	d03b      	beq.n	8003520 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a8:	f3ef 8310 	mrs	r3, PRIMASK
 80034ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80034ae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b2:	2301      	movs	r3, #1
 80034b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f383 8810 	msr	PRIMASK, r3
}
 80034bc:	46c0      	nop			@ (mov r8, r8)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4921      	ldr	r1, [pc, #132]	@ (8003550 <UART_CheckIdleState+0x14c>)
 80034ca:	400a      	ands	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f383 8810 	msr	PRIMASK, r3
}
 80034d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034da:	f3ef 8310 	mrs	r3, PRIMASK
 80034de:	61bb      	str	r3, [r7, #24]
  return(result);
 80034e0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80034e4:	2301      	movs	r3, #1
 80034e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f383 8810 	msr	PRIMASK, r3
}
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2101      	movs	r1, #1
 80034fc:	438a      	bics	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	f383 8810 	msr	PRIMASK, r3
}
 800350a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2280      	movs	r2, #128	@ 0x80
 8003510:	2120      	movs	r1, #32
 8003512:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2278      	movs	r2, #120	@ 0x78
 8003518:	2100      	movs	r1, #0
 800351a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e011      	b.n	8003544 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2280      	movs	r2, #128	@ 0x80
 800352a:	2120      	movs	r1, #32
 800352c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2278      	movs	r2, #120	@ 0x78
 800353e:	2100      	movs	r1, #0
 8003540:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b010      	add	sp, #64	@ 0x40
 800354a:	bd80      	pop	{r7, pc}
 800354c:	01ffffff 	.word	0x01ffffff
 8003550:	fffffedf 	.word	0xfffffedf

08003554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	1dfb      	adds	r3, r7, #7
 8003562:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003564:	e04b      	b.n	80035fe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3301      	adds	r3, #1
 800356a:	d048      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356c:	f7fd fd76 	bl	800105c <HAL_GetTick>
 8003570:	0002      	movs	r2, r0
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	429a      	cmp	r2, r3
 800357a:	d302      	bcc.n	8003582 <UART_WaitOnFlagUntilTimeout+0x2e>
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e04b      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2204      	movs	r2, #4
 800358e:	4013      	ands	r3, r2
 8003590:	d035      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	2208      	movs	r2, #8
 800359a:	4013      	ands	r3, r2
 800359c:	2b08      	cmp	r3, #8
 800359e:	d111      	bne.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2208      	movs	r2, #8
 80035a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 f83c 	bl	8003628 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2284      	movs	r2, #132	@ 0x84
 80035b4:	2108      	movs	r1, #8
 80035b6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2278      	movs	r2, #120	@ 0x78
 80035bc:	2100      	movs	r1, #0
 80035be:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e02c      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69da      	ldr	r2, [r3, #28]
 80035ca:	2380      	movs	r3, #128	@ 0x80
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	401a      	ands	r2, r3
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d112      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2280      	movs	r2, #128	@ 0x80
 80035de:	0112      	lsls	r2, r2, #4
 80035e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 f81f 	bl	8003628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2284      	movs	r2, #132	@ 0x84
 80035ee:	2120      	movs	r1, #32
 80035f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2278      	movs	r2, #120	@ 0x78
 80035f6:	2100      	movs	r1, #0
 80035f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e00f      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	4013      	ands	r3, r2
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	425a      	negs	r2, r3
 800360e:	4153      	adcs	r3, r2
 8003610:	b2db      	uxtb	r3, r3
 8003612:	001a      	movs	r2, r3
 8003614:	1dfb      	adds	r3, r7, #7
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d0a4      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b004      	add	sp, #16
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08e      	sub	sp, #56	@ 0x38
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003630:	f3ef 8310 	mrs	r3, PRIMASK
 8003634:	617b      	str	r3, [r7, #20]
  return(result);
 8003636:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003638:	637b      	str	r3, [r7, #52]	@ 0x34
 800363a:	2301      	movs	r3, #1
 800363c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f383 8810 	msr	PRIMASK, r3
}
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4926      	ldr	r1, [pc, #152]	@ (80036ec <UART_EndRxTransfer+0xc4>)
 8003652:	400a      	ands	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003658:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f383 8810 	msr	PRIMASK, r3
}
 8003660:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003662:	f3ef 8310 	mrs	r3, PRIMASK
 8003666:	623b      	str	r3, [r7, #32]
  return(result);
 8003668:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366a:	633b      	str	r3, [r7, #48]	@ 0x30
 800366c:	2301      	movs	r3, #1
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	f383 8810 	msr	PRIMASK, r3
}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2101      	movs	r1, #1
 8003684:	438a      	bics	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368e:	f383 8810 	msr	PRIMASK, r3
}
 8003692:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003698:	2b01      	cmp	r3, #1
 800369a:	d118      	bne.n	80036ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369c:	f3ef 8310 	mrs	r3, PRIMASK
 80036a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80036a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036a6:	2301      	movs	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2110      	movs	r1, #16
 80036be:	438a      	bics	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f383 8810 	msr	PRIMASK, r3
}
 80036cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2280      	movs	r2, #128	@ 0x80
 80036d2:	2120      	movs	r1, #32
 80036d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b00e      	add	sp, #56	@ 0x38
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	fffffedf 	.word	0xfffffedf

080036f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	0002      	movs	r2, r0
 80036f8:	1dbb      	adds	r3, r7, #6
 80036fa:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003700:	1dbb      	adds	r3, r7, #6
 8003702:	2200      	movs	r2, #0
 8003704:	5e9b      	ldrsh	r3, [r3, r2]
 8003706:	2b84      	cmp	r3, #132	@ 0x84
 8003708:	d006      	beq.n	8003718 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800370a:	1dbb      	adds	r3, r7, #6
 800370c:	2200      	movs	r2, #0
 800370e:	5e9a      	ldrsh	r2, [r3, r2]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	18d3      	adds	r3, r2, r3
 8003714:	3303      	adds	r3, #3
 8003716:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003718:	68fb      	ldr	r3, [r7, #12]
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}

08003722 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003728:	f3ef 8305 	mrs	r3, IPSR
 800372c:	607b      	str	r3, [r7, #4]
  return(result);
 800372e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003730:	1e5a      	subs	r2, r3, #1
 8003732:	4193      	sbcs	r3, r2
 8003734:	b2db      	uxtb	r3, r3
}
 8003736:	0018      	movs	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	b002      	add	sp, #8
 800373c:	bd80      	pop	{r7, pc}

0800373e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003742:	f001 f811 	bl	8004768 <vTaskStartScheduler>
  
  return osOK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800374e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003750:	b089      	sub	sp, #36	@ 0x24
 8003752:	af04      	add	r7, sp, #16
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <osThreadCreate+0x54>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01c      	beq.n	80037a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685c      	ldr	r4, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691e      	ldr	r6, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2208      	movs	r2, #8
 8003778:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800377a:	0018      	movs	r0, r3
 800377c:	f7ff ffb8 	bl	80036f0 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	9302      	str	r3, [sp, #8]
 800378c:	9201      	str	r2, [sp, #4]
 800378e:	9000      	str	r0, [sp, #0]
 8003790:	000b      	movs	r3, r1
 8003792:	0032      	movs	r2, r6
 8003794:	0029      	movs	r1, r5
 8003796:	0020      	movs	r0, r4
 8003798:	f000 fe37 	bl	800440a <xTaskCreateStatic>
 800379c:	0003      	movs	r3, r0
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e01d      	b.n	80037de <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685c      	ldr	r4, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037ae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2208      	movs	r2, #8
 80037b4:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7ff ff9a 	bl	80036f0 <makeFreeRtosPriority>
 80037bc:	0001      	movs	r1, r0
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	230c      	movs	r3, #12
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	9100      	str	r1, [sp, #0]
 80037c8:	0013      	movs	r3, r2
 80037ca:	0032      	movs	r2, r6
 80037cc:	0029      	movs	r1, r5
 80037ce:	0020      	movs	r0, r4
 80037d0:	f000 fe61 	bl	8004496 <xTaskCreate>
 80037d4:	0003      	movs	r3, r0
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d001      	beq.n	80037de <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037de:	68fb      	ldr	r3, [r7, #12]
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b005      	add	sp, #20
 80037e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <osDelay+0x16>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	e000      	b.n	8003800 <osDelay+0x18>
 80037fe:	2301      	movs	r3, #1
 8003800:	0018      	movs	r0, r3
 8003802:	f000 ff8b 	bl	800471c <vTaskDelay>
  
  return osOK;
 8003806:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b004      	add	sp, #16
 800380e:	bd80      	pop	{r7, pc}

08003810 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af02      	add	r7, sp, #8
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00f      	beq.n	8003842 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d10a      	bne.n	800383e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2203      	movs	r2, #3
 800382e:	9200      	str	r2, [sp, #0]
 8003830:	2200      	movs	r2, #0
 8003832:	2100      	movs	r1, #0
 8003834:	2001      	movs	r0, #1
 8003836:	f000 f999 	bl	8003b6c <xQueueGenericCreateStatic>
 800383a:	0003      	movs	r3, r0
 800383c:	e017      	b.n	800386e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	e015      	b.n	800386e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d111      	bne.n	800386c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8003848:	2203      	movs	r2, #3
 800384a:	2100      	movs	r1, #0
 800384c:	2001      	movs	r0, #1
 800384e:	f000 f9dd 	bl	8003c0c <xQueueGenericCreate>
 8003852:	0003      	movs	r3, r0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <osSemaphoreCreate+0x58>
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	2300      	movs	r3, #0
 8003860:	2200      	movs	r2, #0
 8003862:	2100      	movs	r1, #0
 8003864:	f000 fa2b 	bl	8003cbe <xQueueGenericSend>
      return sema;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	e000      	b.n	800386e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800386c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b004      	add	sp, #16
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800388c:	2380      	movs	r3, #128	@ 0x80
 800388e:	e036      	b.n	80038fe <osSemaphoreWait+0x86>
  }
  
  ticks = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	d103      	bne.n	80038a2 <osSemaphoreWait+0x2a>
    ticks = portMAX_DELAY;
 800389a:	2301      	movs	r3, #1
 800389c:	425b      	negs	r3, r3
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e009      	b.n	80038b6 <osSemaphoreWait+0x3e>
  }
  else if (millisec != 0) {
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d006      	beq.n	80038b6 <osSemaphoreWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <osSemaphoreWait+0x3e>
      ticks = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80038b6:	f7ff ff34 	bl	8003722 <inHandlerMode>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d013      	beq.n	80038e6 <osSemaphoreWait+0x6e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80038be:	2308      	movs	r3, #8
 80038c0:	18fa      	adds	r2, r7, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2100      	movs	r1, #0
 80038c6:	0018      	movs	r0, r3
 80038c8:	f000 fc07 	bl	80040da <xQueueReceiveFromISR>
 80038cc:	0003      	movs	r3, r0
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d001      	beq.n	80038d6 <osSemaphoreWait+0x5e>
      return osErrorOS;
 80038d2:	23ff      	movs	r3, #255	@ 0xff
 80038d4:	e013      	b.n	80038fe <osSemaphoreWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00f      	beq.n	80038fc <osSemaphoreWait+0x84>
 80038dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003908 <osSemaphoreWait+0x90>)
 80038de:	2280      	movs	r2, #128	@ 0x80
 80038e0:	0552      	lsls	r2, r2, #21
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e00a      	b.n	80038fc <osSemaphoreWait+0x84>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0011      	movs	r1, r2
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 fb16 	bl	8003f1e <xQueueSemaphoreTake>
 80038f2:	0003      	movs	r3, r0
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d001      	beq.n	80038fc <osSemaphoreWait+0x84>
    return osErrorOS;
 80038f8:	23ff      	movs	r3, #255	@ 0xff
 80038fa:	e000      	b.n	80038fe <osSemaphoreWait+0x86>
  }
  
  return osOK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b004      	add	sp, #16
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800391c:	f7ff ff01 	bl	8003722 <inHandlerMode>
 8003920:	1e03      	subs	r3, r0, #0
 8003922:	d013      	beq.n	800394c <osSemaphoreRelease+0x40>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003924:	2308      	movs	r3, #8
 8003926:	18fa      	adds	r2, r7, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	0011      	movs	r1, r2
 800392c:	0018      	movs	r0, r3
 800392e:	f000 fa8e 	bl	8003e4e <xQueueGiveFromISR>
 8003932:	0003      	movs	r3, r0
 8003934:	2b01      	cmp	r3, #1
 8003936:	d001      	beq.n	800393c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003938:	23ff      	movs	r3, #255	@ 0xff
 800393a:	e013      	b.n	8003964 <osSemaphoreRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00f      	beq.n	8003962 <osSemaphoreRelease+0x56>
 8003942:	4b0a      	ldr	r3, [pc, #40]	@ (800396c <osSemaphoreRelease+0x60>)
 8003944:	2280      	movs	r2, #128	@ 0x80
 8003946:	0552      	lsls	r2, r2, #21
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e00a      	b.n	8003962 <osSemaphoreRelease+0x56>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	2300      	movs	r3, #0
 8003950:	2200      	movs	r2, #0
 8003952:	2100      	movs	r1, #0
 8003954:	f000 f9b3 	bl	8003cbe <xQueueGenericSend>
 8003958:	0003      	movs	r3, r0
 800395a:	2b01      	cmp	r3, #1
 800395c:	d001      	beq.n	8003962 <osSemaphoreRelease+0x56>
      result = osErrorOS;
 800395e:	23ff      	movs	r3, #255	@ 0xff
 8003960:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003962:	68fb      	ldr	r3, [r7, #12]
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b004      	add	sp, #16
 800396a:	bd80      	pop	{r7, pc}
 800396c:	e000ed04 	.word	0xe000ed04

08003970 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3308      	adds	r3, #8
 800397c:	001a      	movs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	4252      	negs	r2, r2
 8003988:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3308      	adds	r3, #8
 800398e:	001a      	movs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3308      	adds	r3, #8
 8003998:	001a      	movs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039a4:	46c0      	nop			@ (mov r8, r8)
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b002      	add	sp, #8
 80039aa:	bd80      	pop	{r7, pc}

080039ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	601a      	str	r2, [r3, #0]
}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b004      	add	sp, #16
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	d103      	bne.n	8003a24 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e00c      	b.n	8003a3e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3308      	adds	r3, #8
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	e002      	b.n	8003a32 <vListInsert+0x2c>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d2f6      	bcs.n	8003a2c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	601a      	str	r2, [r3, #0]
}
 8003a6a:	46c0      	nop			@ (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b004      	add	sp, #16
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6892      	ldr	r2, [r2, #8]
 8003a88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6852      	ldr	r2, [r2, #4]
 8003a92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d103      	bne.n	8003aa6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	1e5a      	subs	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
}
 8003aba:	0018      	movs	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b004      	add	sp, #16
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <xQueueGenericReset+0x1a>
 8003ad6:	b672      	cpsid	i
 8003ad8:	46c0      	nop			@ (mov r8, r8)
 8003ada:	e7fd      	b.n	8003ad8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003adc:	f001 fc68 	bl	80053b0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	434b      	muls	r3, r1
 8003aee:	18d2      	adds	r2, r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	1e59      	subs	r1, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b10:	434b      	muls	r3, r1
 8003b12:	18d2      	adds	r2, r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2244      	movs	r2, #68	@ 0x44
 8003b1c:	21ff      	movs	r1, #255	@ 0xff
 8003b1e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2245      	movs	r2, #69	@ 0x45
 8003b24:	21ff      	movs	r1, #255	@ 0xff
 8003b26:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10d      	bne.n	8003b4a <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d013      	beq.n	8003b5e <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3310      	adds	r3, #16
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f001 f834 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d00c      	beq.n	8003b5e <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b44:	f001 fc24 	bl	8005390 <vPortYield>
 8003b48:	e009      	b.n	8003b5e <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3310      	adds	r3, #16
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7ff ff0e 	bl	8003970 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3324      	adds	r3, #36	@ 0x24
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7ff ff09 	bl	8003970 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b5e:	f001 fc39 	bl	80053d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b62:	2301      	movs	r3, #1
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b004      	add	sp, #16
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b089      	sub	sp, #36	@ 0x24
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <xQueueGenericCreateStatic+0x1a>
 8003b80:	b672      	cpsid	i
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	e7fd      	b.n	8003b82 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <xQueueGenericCreateStatic+0x26>
 8003b8c:	b672      	cpsid	i
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	e7fd      	b.n	8003b8e <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <xQueueGenericCreateStatic+0x32>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <xQueueGenericCreateStatic+0x36>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <xQueueGenericCreateStatic+0x38>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <xQueueGenericCreateStatic+0x42>
 8003ba8:	b672      	cpsid	i
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	e7fd      	b.n	8003baa <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <xQueueGenericCreateStatic+0x4e>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <xQueueGenericCreateStatic+0x52>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <xQueueGenericCreateStatic+0x54>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <xQueueGenericCreateStatic+0x5e>
 8003bc4:	b672      	cpsid	i
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	e7fd      	b.n	8003bc6 <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003bca:	2348      	movs	r3, #72	@ 0x48
 8003bcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b48      	cmp	r3, #72	@ 0x48
 8003bd2:	d002      	beq.n	8003bda <xQueueGenericCreateStatic+0x6e>
 8003bd4:	b672      	cpsid	i
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	e7fd      	b.n	8003bd6 <xQueueGenericCreateStatic+0x6a>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00e      	beq.n	8003c02 <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2246      	movs	r2, #70	@ 0x46
 8003be8:	2101      	movs	r1, #1
 8003bea:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bec:	2328      	movs	r3, #40	@ 0x28
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	781c      	ldrb	r4, [r3, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	0023      	movs	r3, r4
 8003bfe:	f000 f83c 	bl	8003c7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003c02:	697b      	ldr	r3, [r7, #20]
	}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b007      	add	sp, #28
 8003c0a:	bd90      	pop	{r4, r7, pc}

08003c0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b08b      	sub	sp, #44	@ 0x2c
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	1dfb      	adds	r3, r7, #7
 8003c18:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <xQueueGenericCreate+0x1a>
 8003c20:	b672      	cpsid	i
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	e7fd      	b.n	8003c22 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <xQueueGenericCreate+0x26>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e003      	b.n	8003c3a <xQueueGenericCreate+0x2e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	4353      	muls	r3, r2
 8003c38:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3348      	adds	r3, #72	@ 0x48
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f001 fc4e 	bl	80054e0 <pvPortMalloc>
 8003c44:	0003      	movs	r3, r0
 8003c46:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d010      	beq.n	8003c70 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	3348      	adds	r3, #72	@ 0x48
 8003c52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2246      	movs	r2, #70	@ 0x46
 8003c58:	2100      	movs	r1, #0
 8003c5a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c5c:	1dfb      	adds	r3, r7, #7
 8003c5e:	781c      	ldrb	r4, [r3, #0]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	0023      	movs	r3, r4
 8003c6c:	f000 f805 	bl	8003c7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003c70:	69bb      	ldr	r3, [r7, #24]
	}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b009      	add	sp, #36	@ 0x24
 8003c78:	bd90      	pop	{r4, r7, pc}

08003c7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	001a      	movs	r2, r3
 8003c88:	1cfb      	adds	r3, r7, #3
 8003c8a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	e002      	b.n	8003ca0 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2101      	movs	r1, #1
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7ff ff06 	bl	8003ac2 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b004      	add	sp, #16
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b08a      	sub	sp, #40	@ 0x28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <xQueueGenericSend+0x22>
 8003cda:	b672      	cpsid	i
 8003cdc:	46c0      	nop			@ (mov r8, r8)
 8003cde:	e7fd      	b.n	8003cdc <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <xQueueGenericSend+0x30>
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <xQueueGenericSend+0x34>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <xQueueGenericSend+0x36>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <xQueueGenericSend+0x40>
 8003cf8:	b672      	cpsid	i
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	e7fd      	b.n	8003cfa <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d103      	bne.n	8003d0c <xQueueGenericSend+0x4e>
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <xQueueGenericSend+0x52>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <xQueueGenericSend+0x54>
 8003d10:	2300      	movs	r3, #0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <xQueueGenericSend+0x5e>
 8003d16:	b672      	cpsid	i
 8003d18:	46c0      	nop			@ (mov r8, r8)
 8003d1a:	e7fd      	b.n	8003d18 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d1c:	f001 f8e6 	bl	8004eec <xTaskGetSchedulerState>
 8003d20:	1e03      	subs	r3, r0, #0
 8003d22:	d102      	bne.n	8003d2a <xQueueGenericSend+0x6c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <xQueueGenericSend+0x70>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <xQueueGenericSend+0x72>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <xQueueGenericSend+0x7c>
 8003d34:	b672      	cpsid	i
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	e7fd      	b.n	8003d36 <xQueueGenericSend+0x78>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d3a:	f001 fb39 	bl	80053b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <xQueueGenericSend+0x92>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d11e      	bne.n	8003d8e <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 fa3a 	bl	80041d0 <prvCopyDataToQueue>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	3324      	adds	r3, #36	@ 0x24
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f000 ff1b 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003d72:	1e03      	subs	r3, r0, #0
 8003d74:	d007      	beq.n	8003d86 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d76:	f001 fb0b 	bl	8005390 <vPortYield>
 8003d7a:	e004      	b.n	8003d86 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d82:	f001 fb05 	bl	8005390 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d86:	f001 fb25 	bl	80053d4 <vPortExitCritical>
				return pdPASS;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e05b      	b.n	8003e46 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d103      	bne.n	8003d9c <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d94:	f001 fb1e 	bl	80053d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e054      	b.n	8003e46 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003da2:	2314      	movs	r3, #20
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 ff5c 	bl	8004c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dac:	2301      	movs	r3, #1
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003db0:	f001 fb10 	bl	80053d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003db4:	f000 fd30 	bl	8004818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003db8:	f001 fafa 	bl	80053b0 <vPortEnterCritical>
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	2244      	movs	r2, #68	@ 0x44
 8003dc0:	5c9b      	ldrb	r3, [r3, r2]
 8003dc2:	b25b      	sxtb	r3, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	d103      	bne.n	8003dd0 <xQueueGenericSend+0x112>
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	2244      	movs	r2, #68	@ 0x44
 8003dcc:	2100      	movs	r1, #0
 8003dce:	5499      	strb	r1, [r3, r2]
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	2245      	movs	r2, #69	@ 0x45
 8003dd4:	5c9b      	ldrb	r3, [r3, r2]
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	3301      	adds	r3, #1
 8003dda:	d103      	bne.n	8003de4 <xQueueGenericSend+0x126>
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	2245      	movs	r2, #69	@ 0x45
 8003de0:	2100      	movs	r1, #0
 8003de2:	5499      	strb	r1, [r3, r2]
 8003de4:	f001 faf6 	bl	80053d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de8:	1d3a      	adds	r2, r7, #4
 8003dea:	2314      	movs	r3, #20
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	0011      	movs	r1, r2
 8003df0:	0018      	movs	r0, r3
 8003df2:	f000 ff4b 	bl	8004c8c <xTaskCheckForTimeOut>
 8003df6:	1e03      	subs	r3, r0, #0
 8003df8:	d11e      	bne.n	8003e38 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f000 faec 	bl	80043da <prvIsQueueFull>
 8003e02:	1e03      	subs	r3, r0, #0
 8003e04:	d011      	beq.n	8003e2a <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	3310      	adds	r3, #16
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	0011      	movs	r1, r2
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 feaa 	bl	8004b68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 fa6b 	bl	80042f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e1c:	f000 fd08 	bl	8004830 <xTaskResumeAll>
 8003e20:	1e03      	subs	r3, r0, #0
 8003e22:	d18a      	bne.n	8003d3a <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8003e24:	f001 fab4 	bl	8005390 <vPortYield>
 8003e28:	e787      	b.n	8003d3a <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 fa60 	bl	80042f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e32:	f000 fcfd 	bl	8004830 <xTaskResumeAll>
 8003e36:	e780      	b.n	8003d3a <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f000 fa59 	bl	80042f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e40:	f000 fcf6 	bl	8004830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e44:	2300      	movs	r3, #0
		}
	}
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b00a      	add	sp, #40	@ 0x28
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b088      	sub	sp, #32
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d102      	bne.n	8003e68 <xQueueGiveFromISR+0x1a>
 8003e62:	b672      	cpsid	i
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	e7fd      	b.n	8003e64 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <xQueueGiveFromISR+0x28>
 8003e70:	b672      	cpsid	i
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	e7fd      	b.n	8003e72 <xQueueGiveFromISR+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <xQueueGiveFromISR+0x38>
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <xQueueGiveFromISR+0x3c>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <xQueueGiveFromISR+0x3e>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <xQueueGiveFromISR+0x48>
 8003e90:	b672      	cpsid	i
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	e7fd      	b.n	8003e92 <xQueueGiveFromISR+0x44>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e96:	f001 fab5 	bl	8005404 <ulSetInterruptMaskFromISR>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea2:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d22c      	bcs.n	8003f08 <xQueueGiveFromISR+0xba>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003eae:	200f      	movs	r0, #15
 8003eb0:	183b      	adds	r3, r7, r0
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	2145      	movs	r1, #69	@ 0x45
 8003eb6:	5c52      	ldrb	r2, [r2, r1]
 8003eb8:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ec2:	183b      	adds	r3, r7, r0
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	b25b      	sxtb	r3, r3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	d111      	bne.n	8003ef0 <xQueueGiveFromISR+0xa2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d016      	beq.n	8003f02 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	3324      	adds	r3, #36	@ 0x24
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f000 fe65 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003ede:	1e03      	subs	r3, r0, #0
 8003ee0:	d00f      	beq.n	8003f02 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00c      	beq.n	8003f02 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e008      	b.n	8003f02 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ef0:	230f      	movs	r3, #15
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	b259      	sxtb	r1, r3
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2245      	movs	r2, #69	@ 0x45
 8003f00:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003f02:	2301      	movs	r3, #1
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	e001      	b.n	8003f0c <xQueueGiveFromISR+0xbe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f001 fa7e 	bl	8005410 <vClearInterruptMaskFromISR>

	return xReturn;
 8003f14:	69fb      	ldr	r3, [r7, #28]
}
 8003f16:	0018      	movs	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b008      	add	sp, #32
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b08a      	sub	sp, #40	@ 0x28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003f30:	2300      	movs	r3, #0
 8003f32:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <xQueueSemaphoreTake+0x22>
 8003f3a:	b672      	cpsid	i
 8003f3c:	46c0      	nop			@ (mov r8, r8)
 8003f3e:	e7fd      	b.n	8003f3c <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <xQueueSemaphoreTake+0x30>
 8003f48:	b672      	cpsid	i
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	e7fd      	b.n	8003f4a <xQueueSemaphoreTake+0x2c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f4e:	f000 ffcd 	bl	8004eec <xTaskGetSchedulerState>
 8003f52:	1e03      	subs	r3, r0, #0
 8003f54:	d102      	bne.n	8003f5c <xQueueSemaphoreTake+0x3e>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <xQueueSemaphoreTake+0x42>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <xQueueSemaphoreTake+0x44>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d102      	bne.n	8003f6c <xQueueSemaphoreTake+0x4e>
 8003f66:	b672      	cpsid	i
 8003f68:	46c0      	nop			@ (mov r8, r8)
 8003f6a:	e7fd      	b.n	8003f68 <xQueueSemaphoreTake+0x4a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f6c:	f001 fa20 	bl	80053b0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01d      	beq.n	8003fb8 <xQueueSemaphoreTake+0x9a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	1e5a      	subs	r2, r3, #1
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <xQueueSemaphoreTake+0x78>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003f8c:	f001 f90c 	bl	80051a8 <pvTaskIncrementMutexHeldCount>
 8003f90:	0002      	movs	r2, r0
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d008      	beq.n	8003fb0 <xQueueSemaphoreTake+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3310      	adds	r3, #16
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 fe00 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003fa8:	1e03      	subs	r3, r0, #0
 8003faa:	d001      	beq.n	8003fb0 <xQueueSemaphoreTake+0x92>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fac:	f001 f9f0 	bl	8005390 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fb0:	f001 fa10 	bl	80053d4 <vPortExitCritical>
				return pdPASS;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e08c      	b.n	80040d2 <xQueueSemaphoreTake+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <xQueueSemaphoreTake+0xb4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <xQueueSemaphoreTake+0xac>
 8003fc4:	b672      	cpsid	i
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	e7fd      	b.n	8003fc6 <xQueueSemaphoreTake+0xa8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003fca:	f001 fa03 	bl	80053d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e07f      	b.n	80040d2 <xQueueSemaphoreTake+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <xQueueSemaphoreTake+0xc8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fd8:	230c      	movs	r3, #12
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 fe41 	bl	8004c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fe6:	f001 f9f5 	bl	80053d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fea:	f000 fc15 	bl	8004818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fee:	f001 f9df 	bl	80053b0 <vPortEnterCritical>
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	2244      	movs	r2, #68	@ 0x44
 8003ff6:	5c9b      	ldrb	r3, [r3, r2]
 8003ff8:	b25b      	sxtb	r3, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	d103      	bne.n	8004006 <xQueueSemaphoreTake+0xe8>
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	2244      	movs	r2, #68	@ 0x44
 8004002:	2100      	movs	r1, #0
 8004004:	5499      	strb	r1, [r3, r2]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2245      	movs	r2, #69	@ 0x45
 800400a:	5c9b      	ldrb	r3, [r3, r2]
 800400c:	b25b      	sxtb	r3, r3
 800400e:	3301      	adds	r3, #1
 8004010:	d103      	bne.n	800401a <xQueueSemaphoreTake+0xfc>
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	2245      	movs	r2, #69	@ 0x45
 8004016:	2100      	movs	r1, #0
 8004018:	5499      	strb	r1, [r3, r2]
 800401a:	f001 f9db 	bl	80053d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800401e:	003a      	movs	r2, r7
 8004020:	230c      	movs	r3, #12
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f000 fe30 	bl	8004c8c <xTaskCheckForTimeOut>
 800402c:	1e03      	subs	r3, r0, #0
 800402e:	d12e      	bne.n	800408e <xQueueSemaphoreTake+0x170>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	0018      	movs	r0, r3
 8004034:	f000 f9bb 	bl	80043ae <prvIsQueueEmpty>
 8004038:	1e03      	subs	r3, r0, #0
 800403a:	d021      	beq.n	8004080 <xQueueSemaphoreTake+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <xQueueSemaphoreTake+0x13c>
					{
						taskENTER_CRITICAL();
 8004044:	f001 f9b4 	bl	80053b0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	0018      	movs	r0, r3
 800404e:	f000 ff69 	bl	8004f24 <xTaskPriorityInherit>
 8004052:	0003      	movs	r3, r0
 8004054:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8004056:	f001 f9bd 	bl	80053d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3324      	adds	r3, #36	@ 0x24
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	0011      	movs	r1, r2
 8004062:	0018      	movs	r0, r3
 8004064:	f000 fd80 	bl	8004b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	0018      	movs	r0, r3
 800406c:	f000 f941 	bl	80042f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004070:	f000 fbde 	bl	8004830 <xTaskResumeAll>
 8004074:	1e03      	subs	r3, r0, #0
 8004076:	d000      	beq.n	800407a <xQueueSemaphoreTake+0x15c>
 8004078:	e778      	b.n	8003f6c <xQueueSemaphoreTake+0x4e>
				{
					portYIELD_WITHIN_API();
 800407a:	f001 f989 	bl	8005390 <vPortYield>
 800407e:	e775      	b.n	8003f6c <xQueueSemaphoreTake+0x4e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	0018      	movs	r0, r3
 8004084:	f000 f935 	bl	80042f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004088:	f000 fbd2 	bl	8004830 <xTaskResumeAll>
 800408c:	e76e      	b.n	8003f6c <xQueueSemaphoreTake+0x4e>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	0018      	movs	r0, r3
 8004092:	f000 f92e 	bl	80042f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004096:	f000 fbcb 	bl	8004830 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	0018      	movs	r0, r3
 800409e:	f000 f986 	bl	80043ae <prvIsQueueEmpty>
 80040a2:	1e03      	subs	r3, r0, #0
 80040a4:	d100      	bne.n	80040a8 <xQueueSemaphoreTake+0x18a>
 80040a6:	e761      	b.n	8003f6c <xQueueSemaphoreTake+0x4e>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d010      	beq.n	80040d0 <xQueueSemaphoreTake+0x1b2>
					{
						taskENTER_CRITICAL();
 80040ae:	f001 f97f 	bl	80053b0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 f875 	bl	80041a4 <prvGetDisinheritPriorityAfterTimeout>
 80040ba:	0003      	movs	r3, r0
 80040bc:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	0011      	movs	r1, r2
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 fff8 	bl	80050bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80040cc:	f001 f982 	bl	80053d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040d2:	0018      	movs	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b00a      	add	sp, #40	@ 0x28
 80040d8:	bd80      	pop	{r7, pc}

080040da <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80040da:	b590      	push	{r4, r7, lr}
 80040dc:	b08b      	sub	sp, #44	@ 0x2c
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <xQueueReceiveFromISR+0x1c>
 80040f0:	b672      	cpsid	i
 80040f2:	46c0      	nop			@ (mov r8, r8)
 80040f4:	e7fd      	b.n	80040f2 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d103      	bne.n	8004104 <xQueueReceiveFromISR+0x2a>
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <xQueueReceiveFromISR+0x2e>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <xQueueReceiveFromISR+0x30>
 8004108:	2300      	movs	r3, #0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <xQueueReceiveFromISR+0x3a>
 800410e:	b672      	cpsid	i
 8004110:	46c0      	nop			@ (mov r8, r8)
 8004112:	e7fd      	b.n	8004110 <xQueueReceiveFromISR+0x36>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004114:	f001 f976 	bl	8005404 <ulSetInterruptMaskFromISR>
 8004118:	0003      	movs	r3, r0
 800411a:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d032      	beq.n	800418e <xQueueReceiveFromISR+0xb4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004128:	2417      	movs	r4, #23
 800412a:	193b      	adds	r3, r7, r4
 800412c:	6a3a      	ldr	r2, [r7, #32]
 800412e:	2144      	movs	r1, #68	@ 0x44
 8004130:	5c52      	ldrb	r2, [r2, r1]
 8004132:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	0011      	movs	r1, r2
 800413a:	0018      	movs	r0, r3
 800413c:	f000 f8b3 	bl	80042a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	1e5a      	subs	r2, r3, #1
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004148:	193b      	adds	r3, r7, r4
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	b25b      	sxtb	r3, r3
 800414e:	3301      	adds	r3, #1
 8004150:	d111      	bne.n	8004176 <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <xQueueReceiveFromISR+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	3310      	adds	r3, #16
 800415e:	0018      	movs	r0, r3
 8004160:	f000 fd22 	bl	8004ba8 <xTaskRemoveFromEventList>
 8004164:	1e03      	subs	r3, r0, #0
 8004166:	d00f      	beq.n	8004188 <xQueueReceiveFromISR+0xae>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00c      	beq.n	8004188 <xQueueReceiveFromISR+0xae>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	e008      	b.n	8004188 <xQueueReceiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004176:	2317      	movs	r3, #23
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	b259      	sxtb	r1, r3
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	2244      	movs	r2, #68	@ 0x44
 8004186:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004188:	2301      	movs	r3, #1
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
 800418c:	e001      	b.n	8004192 <xQueueReceiveFromISR+0xb8>
		}
		else
		{
			xReturn = pdFAIL;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	0018      	movs	r0, r3
 8004196:	f001 f93b 	bl	8005410 <vClearInterruptMaskFromISR>

	return xReturn;
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b00b      	add	sp, #44	@ 0x2c
 80041a2:	bd90      	pop	{r4, r7, pc}

080041a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d006      	beq.n	80041c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2207      	movs	r2, #7
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e001      	b.n	80041c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80041c6:	68fb      	ldr	r3, [r7, #12]
	}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b004      	add	sp, #16
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10e      	bne.n	800420c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d14e      	bne.n	8004294 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f000 ff00 	bl	8005000 <xTaskPriorityDisinherit>
 8004200:	0003      	movs	r3, r0
 8004202:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	e043      	b.n	8004294 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d119      	bne.n	8004246 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6898      	ldr	r0, [r3, #8]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	0019      	movs	r1, r3
 800421e:	f001 fbfb 	bl	8005a18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	18d2      	adds	r2, r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d32b      	bcc.n	8004294 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	e026      	b.n	8004294 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68d8      	ldr	r0, [r3, #12]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	0019      	movs	r1, r3
 8004252:	f001 fbe1 	bl	8005a18 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	425b      	negs	r3, r3
 8004260:	18d2      	adds	r2, r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d207      	bcs.n	8004282 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	425b      	negs	r3, r3
 800427c:	18d2      	adds	r2, r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d105      	bne.n	8004294 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	3b01      	subs	r3, #1
 8004292:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800429c:	697b      	ldr	r3, [r7, #20]
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b006      	add	sp, #24
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d018      	beq.n	80042ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	18d2      	adds	r2, r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d303      	bcc.n	80042da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68d9      	ldr	r1, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f001 fb97 	bl	8005a18 <memcpy>
	}
}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b002      	add	sp, #8
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042fa:	f001 f859 	bl	80053b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042fe:	230f      	movs	r3, #15
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	2145      	movs	r1, #69	@ 0x45
 8004306:	5c52      	ldrb	r2, [r2, r1]
 8004308:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800430a:	e013      	b.n	8004334 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	2b00      	cmp	r3, #0
 8004312:	d016      	beq.n	8004342 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3324      	adds	r3, #36	@ 0x24
 8004318:	0018      	movs	r0, r3
 800431a:	f000 fc45 	bl	8004ba8 <xTaskRemoveFromEventList>
 800431e:	1e03      	subs	r3, r0, #0
 8004320:	d001      	beq.n	8004326 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004322:	f000 fd05 	bl	8004d30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004326:	210f      	movs	r1, #15
 8004328:	187b      	adds	r3, r7, r1
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	3b01      	subs	r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	187b      	adds	r3, r7, r1
 8004332:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004334:	230f      	movs	r3, #15
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	b25b      	sxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	dce5      	bgt.n	800430c <prvUnlockQueue+0x1a>
 8004340:	e000      	b.n	8004344 <prvUnlockQueue+0x52>
					break;
 8004342:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2245      	movs	r2, #69	@ 0x45
 8004348:	21ff      	movs	r1, #255	@ 0xff
 800434a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800434c:	f001 f842 	bl	80053d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004350:	f001 f82e 	bl	80053b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004354:	230e      	movs	r3, #14
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	2144      	movs	r1, #68	@ 0x44
 800435c:	5c52      	ldrb	r2, [r2, r1]
 800435e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004360:	e013      	b.n	800438a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d016      	beq.n	8004398 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3310      	adds	r3, #16
 800436e:	0018      	movs	r0, r3
 8004370:	f000 fc1a 	bl	8004ba8 <xTaskRemoveFromEventList>
 8004374:	1e03      	subs	r3, r0, #0
 8004376:	d001      	beq.n	800437c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004378:	f000 fcda 	bl	8004d30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800437c:	210e      	movs	r1, #14
 800437e:	187b      	adds	r3, r7, r1
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	3b01      	subs	r3, #1
 8004384:	b2da      	uxtb	r2, r3
 8004386:	187b      	adds	r3, r7, r1
 8004388:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800438a:	230e      	movs	r3, #14
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b25b      	sxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	dce5      	bgt.n	8004362 <prvUnlockQueue+0x70>
 8004396:	e000      	b.n	800439a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004398:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2244      	movs	r2, #68	@ 0x44
 800439e:	21ff      	movs	r1, #255	@ 0xff
 80043a0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80043a2:	f001 f817 	bl	80053d4 <vPortExitCritical>
}
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b004      	add	sp, #16
 80043ac:	bd80      	pop	{r7, pc}

080043ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043b6:	f000 fffb 	bl	80053b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80043c2:	2301      	movs	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	e001      	b.n	80043cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043cc:	f001 f802 	bl	80053d4 <vPortExitCritical>

	return xReturn;
 80043d0:	68fb      	ldr	r3, [r7, #12]
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b004      	add	sp, #16
 80043d8:	bd80      	pop	{r7, pc}

080043da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043e2:	f000 ffe5 	bl	80053b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d102      	bne.n	80043f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043f2:	2301      	movs	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e001      	b.n	80043fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043fc:	f000 ffea 	bl	80053d4 <vPortExitCritical>

	return xReturn;
 8004400:	68fb      	ldr	r3, [r7, #12]
}
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b004      	add	sp, #16
 8004408:	bd80      	pop	{r7, pc}

0800440a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800440a:	b590      	push	{r4, r7, lr}
 800440c:	b08d      	sub	sp, #52	@ 0x34
 800440e:	af04      	add	r7, sp, #16
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <xTaskCreateStatic+0x1a>
 800441e:	b672      	cpsid	i
 8004420:	46c0      	nop			@ (mov r8, r8)
 8004422:	e7fd      	b.n	8004420 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004426:	2b00      	cmp	r3, #0
 8004428:	d102      	bne.n	8004430 <xTaskCreateStatic+0x26>
 800442a:	b672      	cpsid	i
 800442c:	46c0      	nop			@ (mov r8, r8)
 800442e:	e7fd      	b.n	800442c <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004430:	23a0      	movs	r3, #160	@ 0xa0
 8004432:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2ba0      	cmp	r3, #160	@ 0xa0
 8004438:	d002      	beq.n	8004440 <xTaskCreateStatic+0x36>
 800443a:	b672      	cpsid	i
 800443c:	46c0      	nop			@ (mov r8, r8)
 800443e:	e7fd      	b.n	800443c <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004442:	2b00      	cmp	r3, #0
 8004444:	d020      	beq.n	8004488 <xTaskCreateStatic+0x7e>
 8004446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01d      	beq.n	8004488 <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800444c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004454:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	229d      	movs	r2, #157	@ 0x9d
 800445a:	2102      	movs	r1, #2
 800445c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800445e:	683c      	ldr	r4, [r7, #0]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	2300      	movs	r3, #0
 8004468:	9303      	str	r3, [sp, #12]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	9302      	str	r3, [sp, #8]
 800446e:	2318      	movs	r3, #24
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	0023      	movs	r3, r4
 800447a:	f000 f859 	bl	8004530 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	0018      	movs	r0, r3
 8004482:	f000 f8e7 	bl	8004654 <prvAddNewTaskToReadyList>
 8004486:	e001      	b.n	800448c <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800448c:	69bb      	ldr	r3, [r7, #24]
	}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b009      	add	sp, #36	@ 0x24
 8004494:	bd90      	pop	{r4, r7, pc}

08004496 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004496:	b590      	push	{r4, r7, lr}
 8004498:	b08d      	sub	sp, #52	@ 0x34
 800449a:	af04      	add	r7, sp, #16
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	1dbb      	adds	r3, r7, #6
 80044a4:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a6:	1dbb      	adds	r3, r7, #6
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	0018      	movs	r0, r3
 80044ae:	f001 f817 	bl	80054e0 <pvPortMalloc>
 80044b2:	0003      	movs	r3, r0
 80044b4:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80044bc:	20a0      	movs	r0, #160	@ 0xa0
 80044be:	f001 f80f 	bl	80054e0 <pvPortMalloc>
 80044c2:	0003      	movs	r3, r0
 80044c4:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80044d2:	e006      	b.n	80044e2 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	0018      	movs	r0, r3
 80044d8:	f001 f8aa 	bl	8005630 <vPortFree>
 80044dc:	e001      	b.n	80044e2 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01a      	beq.n	800451e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	229d      	movs	r2, #157	@ 0x9d
 80044ec:	2100      	movs	r1, #0
 80044ee:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044f0:	1dbb      	adds	r3, r7, #6
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	683c      	ldr	r4, [r7, #0]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	2300      	movs	r3, #0
 80044fc:	9303      	str	r3, [sp, #12]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	9302      	str	r3, [sp, #8]
 8004502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	0023      	movs	r3, r4
 800450c:	f000 f810 	bl	8004530 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	0018      	movs	r0, r3
 8004514:	f000 f89e 	bl	8004654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004518:	2301      	movs	r3, #1
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	e002      	b.n	8004524 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800451e:	2301      	movs	r3, #1
 8004520:	425b      	negs	r3, r3
 8004522:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004524:	69bb      	ldr	r3, [r7, #24]
	}
 8004526:	0018      	movs	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	b009      	add	sp, #36	@ 0x24
 800452c:	bd90      	pop	{r4, r7, pc}
	...

08004530 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800453e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	493f      	ldr	r1, [pc, #252]	@ (8004644 <prvInitialiseNewTask+0x114>)
 8004546:	468c      	mov	ip, r1
 8004548:	4463      	add	r3, ip
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	18d3      	adds	r3, r2, r3
 800454e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2207      	movs	r2, #7
 8004554:	4393      	bics	r3, r2
 8004556:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2207      	movs	r2, #7
 800455c:	4013      	ands	r3, r2
 800455e:	d002      	beq.n	8004566 <prvInitialiseNewTask+0x36>
 8004560:	b672      	cpsid	i
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	e7fd      	b.n	8004562 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e013      	b.n	8004594 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	18d3      	adds	r3, r2, r3
 8004572:	7818      	ldrb	r0, [r3, #0]
 8004574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004576:	2134      	movs	r1, #52	@ 0x34
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	18d3      	adds	r3, r2, r3
 800457c:	185b      	adds	r3, r3, r1
 800457e:	1c02      	adds	r2, r0, #0
 8004580:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	18d3      	adds	r3, r2, r3
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d006      	beq.n	800459c <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	3301      	adds	r3, #1
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b0f      	cmp	r3, #15
 8004598:	d9e8      	bls.n	800456c <prvInitialiseNewTask+0x3c>
 800459a:	e000      	b.n	800459e <prvInitialiseNewTask+0x6e>
		{
			break;
 800459c:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800459e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a0:	2243      	movs	r2, #67	@ 0x43
 80045a2:	2100      	movs	r1, #0
 80045a4:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	2b06      	cmp	r3, #6
 80045aa:	d901      	bls.n	80045b0 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045ac:	2306      	movs	r3, #6
 80045ae:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b2:	6a3a      	ldr	r2, [r7, #32]
 80045b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b8:	6a3a      	ldr	r2, [r7, #32]
 80045ba:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	2200      	movs	r2, #0
 80045c0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	3304      	adds	r3, #4
 80045c6:	0018      	movs	r0, r3
 80045c8:	f7ff f9f0 	bl	80039ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ce:	3318      	adds	r3, #24
 80045d0:	0018      	movs	r0, r3
 80045d2:	f7ff f9eb 	bl	80039ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	2207      	movs	r2, #7
 80045e0:	1ad2      	subs	r2, r2, r3
 80045e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ee:	2298      	movs	r2, #152	@ 0x98
 80045f0:	2100      	movs	r1, #0
 80045f2:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f6:	229c      	movs	r2, #156	@ 0x9c
 80045f8:	2100      	movs	r1, #0
 80045fa:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fe:	334c      	adds	r3, #76	@ 0x4c
 8004600:	224c      	movs	r2, #76	@ 0x4c
 8004602:	2100      	movs	r1, #0
 8004604:	0018      	movs	r0, r3
 8004606:	f001 f973 	bl	80058f0 <memset>
 800460a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460c:	4a0e      	ldr	r2, [pc, #56]	@ (8004648 <prvInitialiseNewTask+0x118>)
 800460e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	4a0e      	ldr	r2, [pc, #56]	@ (800464c <prvInitialiseNewTask+0x11c>)
 8004614:	655a      	str	r2, [r3, #84]	@ 0x54
 8004616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004618:	4a0d      	ldr	r2, [pc, #52]	@ (8004650 <prvInitialiseNewTask+0x120>)
 800461a:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	68f9      	ldr	r1, [r7, #12]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	0018      	movs	r0, r3
 8004624:	f000 fe26 	bl	8005274 <pxPortInitialiseStack>
 8004628:	0002      	movs	r2, r0
 800462a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800463a:	46c0      	nop			@ (mov r8, r8)
 800463c:	46bd      	mov	sp, r7
 800463e:	b006      	add	sp, #24
 8004640:	bd80      	pop	{r7, pc}
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	3fffffff 	.word	0x3fffffff
 8004648:	20000ca0 	.word	0x20000ca0
 800464c:	20000d08 	.word	0x20000d08
 8004650:	20000d70 	.word	0x20000d70

08004654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800465c:	f000 fea8 	bl	80053b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004660:	4b28      	ldr	r3, [pc, #160]	@ (8004704 <prvAddNewTaskToReadyList+0xb0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	4b27      	ldr	r3, [pc, #156]	@ (8004704 <prvAddNewTaskToReadyList+0xb0>)
 8004668:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800466a:	4b27      	ldr	r3, [pc, #156]	@ (8004708 <prvAddNewTaskToReadyList+0xb4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004672:	4b25      	ldr	r3, [pc, #148]	@ (8004708 <prvAddNewTaskToReadyList+0xb4>)
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004678:	4b22      	ldr	r3, [pc, #136]	@ (8004704 <prvAddNewTaskToReadyList+0xb0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d110      	bne.n	80046a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004680:	f000 fb70 	bl	8004d64 <prvInitialiseTaskLists>
 8004684:	e00d      	b.n	80046a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004686:	4b21      	ldr	r3, [pc, #132]	@ (800470c <prvAddNewTaskToReadyList+0xb8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800468e:	4b1e      	ldr	r3, [pc, #120]	@ (8004708 <prvAddNewTaskToReadyList+0xb4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	429a      	cmp	r2, r3
 800469a:	d802      	bhi.n	80046a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800469c:	4b1a      	ldr	r3, [pc, #104]	@ (8004708 <prvAddNewTaskToReadyList+0xb4>)
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004710 <prvAddNewTaskToReadyList+0xbc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	4b19      	ldr	r3, [pc, #100]	@ (8004710 <prvAddNewTaskToReadyList+0xbc>)
 80046aa:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b0:	4b18      	ldr	r3, [pc, #96]	@ (8004714 <prvAddNewTaskToReadyList+0xc0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d903      	bls.n	80046c0 <prvAddNewTaskToReadyList+0x6c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046bc:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <prvAddNewTaskToReadyList+0xc0>)
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c4:	0013      	movs	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	189b      	adds	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4a12      	ldr	r2, [pc, #72]	@ (8004718 <prvAddNewTaskToReadyList+0xc4>)
 80046ce:	189a      	adds	r2, r3, r2
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	0019      	movs	r1, r3
 80046d6:	0010      	movs	r0, r2
 80046d8:	f7ff f973 	bl	80039c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046dc:	f000 fe7a 	bl	80053d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046e0:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <prvAddNewTaskToReadyList+0xb8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046e8:	4b07      	ldr	r3, [pc, #28]	@ (8004708 <prvAddNewTaskToReadyList+0xb4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d201      	bcs.n	80046fa <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046f6:	f000 fe4b 	bl	8005390 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046fa:	46c0      	nop			@ (mov r8, r8)
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	2000045c 	.word	0x2000045c
 8004708:	2000035c 	.word	0x2000035c
 800470c:	20000468 	.word	0x20000468
 8004710:	20000478 	.word	0x20000478
 8004714:	20000464 	.word	0x20000464
 8004718:	20000360 	.word	0x20000360

0800471c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d011      	beq.n	8004752 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800472e:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <vTaskDelay+0x48>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <vTaskDelay+0x20>
 8004736:	b672      	cpsid	i
 8004738:	46c0      	nop			@ (mov r8, r8)
 800473a:	e7fd      	b.n	8004738 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800473c:	f000 f86c 	bl	8004818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2100      	movs	r1, #0
 8004744:	0018      	movs	r0, r3
 8004746:	f000 fd41 	bl	80051cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800474a:	f000 f871 	bl	8004830 <xTaskResumeAll>
 800474e:	0003      	movs	r3, r0
 8004750:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8004758:	f000 fe1a 	bl	8005390 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800475c:	46c0      	nop			@ (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	b004      	add	sp, #16
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000484 	.word	0x20000484

08004768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b089      	sub	sp, #36	@ 0x24
 800476c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004776:	003a      	movs	r2, r7
 8004778:	1d39      	adds	r1, r7, #4
 800477a:	2308      	movs	r3, #8
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	0018      	movs	r0, r3
 8004780:	f7fb fd60 	bl	8000244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004784:	683c      	ldr	r4, [r7, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	491b      	ldr	r1, [pc, #108]	@ (80047f8 <vTaskStartScheduler+0x90>)
 800478c:	481b      	ldr	r0, [pc, #108]	@ (80047fc <vTaskStartScheduler+0x94>)
 800478e:	9202      	str	r2, [sp, #8]
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	2300      	movs	r3, #0
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	2300      	movs	r3, #0
 8004798:	0022      	movs	r2, r4
 800479a:	f7ff fe36 	bl	800440a <xTaskCreateStatic>
 800479e:	0002      	movs	r2, r0
 80047a0:	4b17      	ldr	r3, [pc, #92]	@ (8004800 <vTaskStartScheduler+0x98>)
 80047a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047a4:	4b16      	ldr	r3, [pc, #88]	@ (8004800 <vTaskStartScheduler+0x98>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047ac:	2301      	movs	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	e001      	b.n	80047b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d113      	bne.n	80047e4 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80047bc:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047be:	4b11      	ldr	r3, [pc, #68]	@ (8004804 <vTaskStartScheduler+0x9c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	334c      	adds	r3, #76	@ 0x4c
 80047c4:	001a      	movs	r2, r3
 80047c6:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <vTaskStartScheduler+0xa0>)
 80047c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047ca:	4b10      	ldr	r3, [pc, #64]	@ (800480c <vTaskStartScheduler+0xa4>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	4252      	negs	r2, r2
 80047d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <vTaskStartScheduler+0xa8>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80047d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004814 <vTaskStartScheduler+0xac>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047de:	f000 fdb3 	bl	8005348 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047e2:	e005      	b.n	80047f0 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	d102      	bne.n	80047f0 <vTaskStartScheduler+0x88>
 80047ea:	b672      	cpsid	i
 80047ec:	46c0      	nop			@ (mov r8, r8)
 80047ee:	e7fd      	b.n	80047ec <vTaskStartScheduler+0x84>
}
 80047f0:	46c0      	nop			@ (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b005      	add	sp, #20
 80047f6:	bd90      	pop	{r4, r7, pc}
 80047f8:	08006cc0 	.word	0x08006cc0
 80047fc:	08004d45 	.word	0x08004d45
 8004800:	20000480 	.word	0x20000480
 8004804:	2000035c 	.word	0x2000035c
 8004808:	20000020 	.word	0x20000020
 800480c:	2000047c 	.word	0x2000047c
 8004810:	20000468 	.word	0x20000468
 8004814:	20000460 	.word	0x20000460

08004818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800481c:	4b03      	ldr	r3, [pc, #12]	@ (800482c <vTaskSuspendAll+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	4b02      	ldr	r3, [pc, #8]	@ (800482c <vTaskSuspendAll+0x14>)
 8004824:	601a      	str	r2, [r3, #0]
}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000484 	.word	0x20000484

08004830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800483e:	4b3a      	ldr	r3, [pc, #232]	@ (8004928 <xTaskResumeAll+0xf8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <xTaskResumeAll+0x1c>
 8004846:	b672      	cpsid	i
 8004848:	46c0      	nop			@ (mov r8, r8)
 800484a:	e7fd      	b.n	8004848 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800484c:	f000 fdb0 	bl	80053b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004850:	4b35      	ldr	r3, [pc, #212]	@ (8004928 <xTaskResumeAll+0xf8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	1e5a      	subs	r2, r3, #1
 8004856:	4b34      	ldr	r3, [pc, #208]	@ (8004928 <xTaskResumeAll+0xf8>)
 8004858:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800485a:	4b33      	ldr	r3, [pc, #204]	@ (8004928 <xTaskResumeAll+0xf8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d15b      	bne.n	800491a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004862:	4b32      	ldr	r3, [pc, #200]	@ (800492c <xTaskResumeAll+0xfc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d057      	beq.n	800491a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800486a:	e02f      	b.n	80048cc <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800486c:	4b30      	ldr	r3, [pc, #192]	@ (8004930 <xTaskResumeAll+0x100>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3318      	adds	r3, #24
 8004878:	0018      	movs	r0, r3
 800487a:	f7ff f8fa 	bl	8003a72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3304      	adds	r3, #4
 8004882:	0018      	movs	r0, r3
 8004884:	f7ff f8f5 	bl	8003a72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488c:	4b29      	ldr	r3, [pc, #164]	@ (8004934 <xTaskResumeAll+0x104>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d903      	bls.n	800489c <xTaskResumeAll+0x6c>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004898:	4b26      	ldr	r3, [pc, #152]	@ (8004934 <xTaskResumeAll+0x104>)
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a0:	0013      	movs	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	189b      	adds	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4a23      	ldr	r2, [pc, #140]	@ (8004938 <xTaskResumeAll+0x108>)
 80048aa:	189a      	adds	r2, r3, r2
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3304      	adds	r3, #4
 80048b0:	0019      	movs	r1, r3
 80048b2:	0010      	movs	r0, r2
 80048b4:	f7ff f885 	bl	80039c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048bc:	4b1f      	ldr	r3, [pc, #124]	@ (800493c <xTaskResumeAll+0x10c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80048c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004940 <xTaskResumeAll+0x110>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048cc:	4b18      	ldr	r3, [pc, #96]	@ (8004930 <xTaskResumeAll+0x100>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1cb      	bne.n	800486c <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048da:	f000 fae3 	bl	8004ea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048de:	4b19      	ldr	r3, [pc, #100]	@ (8004944 <xTaskResumeAll+0x114>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00f      	beq.n	800490a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048ea:	f000 f82d 	bl	8004948 <xTaskIncrementTick>
 80048ee:	1e03      	subs	r3, r0, #0
 80048f0:	d002      	beq.n	80048f8 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 80048f2:	4b13      	ldr	r3, [pc, #76]	@ (8004940 <xTaskResumeAll+0x110>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f2      	bne.n	80048ea <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8004904:	4b0f      	ldr	r3, [pc, #60]	@ (8004944 <xTaskResumeAll+0x114>)
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800490a:	4b0d      	ldr	r3, [pc, #52]	@ (8004940 <xTaskResumeAll+0x110>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004912:	2301      	movs	r3, #1
 8004914:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004916:	f000 fd3b 	bl	8005390 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800491a:	f000 fd5b 	bl	80053d4 <vPortExitCritical>

	return xAlreadyYielded;
 800491e:	68bb      	ldr	r3, [r7, #8]
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b004      	add	sp, #16
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000484 	.word	0x20000484
 800492c:	2000045c 	.word	0x2000045c
 8004930:	2000041c 	.word	0x2000041c
 8004934:	20000464 	.word	0x20000464
 8004938:	20000360 	.word	0x20000360
 800493c:	2000035c 	.word	0x2000035c
 8004940:	20000470 	.word	0x20000470
 8004944:	2000046c 	.word	0x2000046c

08004948 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004952:	4b4d      	ldr	r3, [pc, #308]	@ (8004a88 <xTaskIncrementTick+0x140>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d000      	beq.n	800495c <xTaskIncrementTick+0x14>
 800495a:	e084      	b.n	8004a66 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800495c:	4b4b      	ldr	r3, [pc, #300]	@ (8004a8c <xTaskIncrementTick+0x144>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3301      	adds	r3, #1
 8004962:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004964:	4b49      	ldr	r3, [pc, #292]	@ (8004a8c <xTaskIncrementTick+0x144>)
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d118      	bne.n	80049a2 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004970:	4b47      	ldr	r3, [pc, #284]	@ (8004a90 <xTaskIncrementTick+0x148>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <xTaskIncrementTick+0x38>
 800497a:	b672      	cpsid	i
 800497c:	46c0      	nop			@ (mov r8, r8)
 800497e:	e7fd      	b.n	800497c <xTaskIncrementTick+0x34>
 8004980:	4b43      	ldr	r3, [pc, #268]	@ (8004a90 <xTaskIncrementTick+0x148>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	4b43      	ldr	r3, [pc, #268]	@ (8004a94 <xTaskIncrementTick+0x14c>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b41      	ldr	r3, [pc, #260]	@ (8004a90 <xTaskIncrementTick+0x148>)
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	4b41      	ldr	r3, [pc, #260]	@ (8004a94 <xTaskIncrementTick+0x14c>)
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	4b40      	ldr	r3, [pc, #256]	@ (8004a98 <xTaskIncrementTick+0x150>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a98 <xTaskIncrementTick+0x150>)
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	f000 fa81 	bl	8004ea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049a2:	4b3e      	ldr	r3, [pc, #248]	@ (8004a9c <xTaskIncrementTick+0x154>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d34e      	bcc.n	8004a4a <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ac:	4b38      	ldr	r3, [pc, #224]	@ (8004a90 <xTaskIncrementTick+0x148>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <xTaskIncrementTick+0x72>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <xTaskIncrementTick+0x74>
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c0:	4b36      	ldr	r3, [pc, #216]	@ (8004a9c <xTaskIncrementTick+0x154>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	4252      	negs	r2, r2
 80049c6:	601a      	str	r2, [r3, #0]
					break;
 80049c8:	e03f      	b.n	8004a4a <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049ca:	4b31      	ldr	r3, [pc, #196]	@ (8004a90 <xTaskIncrementTick+0x148>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d203      	bcs.n	80049ea <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049e2:	4b2e      	ldr	r3, [pc, #184]	@ (8004a9c <xTaskIncrementTick+0x154>)
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]
						break;
 80049e8:	e02f      	b.n	8004a4a <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3304      	adds	r3, #4
 80049ee:	0018      	movs	r0, r3
 80049f0:	f7ff f83f 	bl	8003a72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	3318      	adds	r3, #24
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7ff f836 	bl	8003a72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0a:	4b25      	ldr	r3, [pc, #148]	@ (8004aa0 <xTaskIncrementTick+0x158>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d903      	bls.n	8004a1a <xTaskIncrementTick+0xd2>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a16:	4b22      	ldr	r3, [pc, #136]	@ (8004aa0 <xTaskIncrementTick+0x158>)
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a1e:	0013      	movs	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa4 <xTaskIncrementTick+0x15c>)
 8004a28:	189a      	adds	r2, r3, r2
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	0019      	movs	r1, r3
 8004a30:	0010      	movs	r0, r2
 8004a32:	f7fe ffc6 	bl	80039c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa8 <xTaskIncrementTick+0x160>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d3b3      	bcc.n	80049ac <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8004a44:	2301      	movs	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a48:	e7b0      	b.n	80049ac <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a4a:	4b17      	ldr	r3, [pc, #92]	@ (8004aa8 <xTaskIncrementTick+0x160>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a50:	4914      	ldr	r1, [pc, #80]	@ (8004aa4 <xTaskIncrementTick+0x15c>)
 8004a52:	0013      	movs	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	585b      	ldr	r3, [r3, r1]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d907      	bls.n	8004a70 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004a60:	2301      	movs	r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	e004      	b.n	8004a70 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a66:	4b11      	ldr	r3, [pc, #68]	@ (8004aac <xTaskIncrementTick+0x164>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004aac <xTaskIncrementTick+0x164>)
 8004a6e:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a70:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab0 <xTaskIncrementTick+0x168>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a7c:	697b      	ldr	r3, [r7, #20]
}
 8004a7e:	0018      	movs	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b006      	add	sp, #24
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	20000484 	.word	0x20000484
 8004a8c:	20000460 	.word	0x20000460
 8004a90:	20000414 	.word	0x20000414
 8004a94:	20000418 	.word	0x20000418
 8004a98:	20000474 	.word	0x20000474
 8004a9c:	2000047c 	.word	0x2000047c
 8004aa0:	20000464 	.word	0x20000464
 8004aa4:	20000360 	.word	0x20000360
 8004aa8:	2000035c 	.word	0x2000035c
 8004aac:	2000046c 	.word	0x2000046c
 8004ab0:	20000470 	.word	0x20000470

08004ab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004aba:	4b25      	ldr	r3, [pc, #148]	@ (8004b50 <vTaskSwitchContext+0x9c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ac2:	4b24      	ldr	r3, [pc, #144]	@ (8004b54 <vTaskSwitchContext+0xa0>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ac8:	e03e      	b.n	8004b48 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004aca:	4b22      	ldr	r3, [pc, #136]	@ (8004b54 <vTaskSwitchContext+0xa0>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004ad0:	4b21      	ldr	r3, [pc, #132]	@ (8004b58 <vTaskSwitchContext+0xa4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	e008      	b.n	8004aea <vTaskSwitchContext+0x36>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <vTaskSwitchContext+0x30>
 8004ade:	b672      	cpsid	i
 8004ae0:	46c0      	nop			@ (mov r8, r8)
 8004ae2:	e7fd      	b.n	8004ae0 <vTaskSwitchContext+0x2c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	491c      	ldr	r1, [pc, #112]	@ (8004b5c <vTaskSwitchContext+0xa8>)
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	0013      	movs	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	189b      	adds	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	585b      	ldr	r3, [r3, r1]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ed      	beq.n	8004ad8 <vTaskSwitchContext+0x24>
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	0013      	movs	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	189b      	adds	r3, r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4a15      	ldr	r2, [pc, #84]	@ (8004b5c <vTaskSwitchContext+0xa8>)
 8004b08:	189b      	adds	r3, r3, r2
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	605a      	str	r2, [r3, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d104      	bne.n	8004b2c <vTaskSwitchContext+0x78>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	4b0b      	ldr	r3, [pc, #44]	@ (8004b60 <vTaskSwitchContext+0xac>)
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	4b08      	ldr	r3, [pc, #32]	@ (8004b58 <vTaskSwitchContext+0xa4>)
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b3c:	4b08      	ldr	r3, [pc, #32]	@ (8004b60 <vTaskSwitchContext+0xac>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	334c      	adds	r3, #76	@ 0x4c
 8004b42:	001a      	movs	r2, r3
 8004b44:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <vTaskSwitchContext+0xb0>)
 8004b46:	601a      	str	r2, [r3, #0]
}
 8004b48:	46c0      	nop			@ (mov r8, r8)
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000484 	.word	0x20000484
 8004b54:	20000470 	.word	0x20000470
 8004b58:	20000464 	.word	0x20000464
 8004b5c:	20000360 	.word	0x20000360
 8004b60:	2000035c 	.word	0x2000035c
 8004b64:	20000020 	.word	0x20000020

08004b68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <vTaskPlaceOnEventList+0x16>
 8004b78:	b672      	cpsid	i
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	e7fd      	b.n	8004b7a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ba4 <vTaskPlaceOnEventList+0x3c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3318      	adds	r3, #24
 8004b84:	001a      	movs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0011      	movs	r1, r2
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7fe ff3b 	bl	8003a06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2101      	movs	r1, #1
 8004b94:	0018      	movs	r0, r3
 8004b96:	f000 fb19 	bl	80051cc <prvAddCurrentTaskToDelayedList>
}
 8004b9a:	46c0      	nop			@ (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b002      	add	sp, #8
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	2000035c 	.word	0x2000035c

08004ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <xTaskRemoveFromEventList+0x1c>
 8004bbe:	b672      	cpsid	i
 8004bc0:	46c0      	nop			@ (mov r8, r8)
 8004bc2:	e7fd      	b.n	8004bc0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	3318      	adds	r3, #24
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7fe ff52 	bl	8003a72 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bce:	4b1f      	ldr	r3, [pc, #124]	@ (8004c4c <xTaskRemoveFromEventList+0xa4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11d      	bne.n	8004c12 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f7fe ff49 	bl	8003a72 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c50 <xTaskRemoveFromEventList+0xa8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d903      	bls.n	8004bf4 <xTaskRemoveFromEventList+0x4c>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf0:	4b17      	ldr	r3, [pc, #92]	@ (8004c50 <xTaskRemoveFromEventList+0xa8>)
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf8:	0013      	movs	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	189b      	adds	r3, r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4a14      	ldr	r2, [pc, #80]	@ (8004c54 <xTaskRemoveFromEventList+0xac>)
 8004c02:	189a      	adds	r2, r3, r2
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	3304      	adds	r3, #4
 8004c08:	0019      	movs	r1, r3
 8004c0a:	0010      	movs	r0, r2
 8004c0c:	f7fe fed9 	bl	80039c2 <vListInsertEnd>
 8004c10:	e007      	b.n	8004c22 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	3318      	adds	r3, #24
 8004c16:	001a      	movs	r2, r3
 8004c18:	4b0f      	ldr	r3, [pc, #60]	@ (8004c58 <xTaskRemoveFromEventList+0xb0>)
 8004c1a:	0011      	movs	r1, r2
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f7fe fed0 	bl	80039c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c26:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <xTaskRemoveFromEventList+0xb4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d905      	bls.n	8004c3c <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c34:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <xTaskRemoveFromEventList+0xb8>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e001      	b.n	8004c40 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c40:	68fb      	ldr	r3, [r7, #12]
}
 8004c42:	0018      	movs	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b004      	add	sp, #16
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	20000484 	.word	0x20000484
 8004c50:	20000464 	.word	0x20000464
 8004c54:	20000360 	.word	0x20000360
 8004c58:	2000041c 	.word	0x2000041c
 8004c5c:	2000035c 	.word	0x2000035c
 8004c60:	20000470 	.word	0x20000470

08004c64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c6c:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <vTaskInternalSetTimeOutState+0x20>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c74:	4b04      	ldr	r3, [pc, #16]	@ (8004c88 <vTaskInternalSetTimeOutState+0x24>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	605a      	str	r2, [r3, #4]
}
 8004c7c:	46c0      	nop			@ (mov r8, r8)
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b002      	add	sp, #8
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20000474 	.word	0x20000474
 8004c88:	20000460 	.word	0x20000460

08004c8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <xTaskCheckForTimeOut+0x16>
 8004c9c:	b672      	cpsid	i
 8004c9e:	46c0      	nop			@ (mov r8, r8)
 8004ca0:	e7fd      	b.n	8004c9e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <xTaskCheckForTimeOut+0x22>
 8004ca8:	b672      	cpsid	i
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	e7fd      	b.n	8004caa <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8004cae:	f000 fb7f 	bl	80053b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d28 <xTaskCheckForTimeOut+0x9c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	d102      	bne.n	8004cd0 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e024      	b.n	8004d1a <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b15      	ldr	r3, [pc, #84]	@ (8004d2c <xTaskCheckForTimeOut+0xa0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d007      	beq.n	8004cec <xTaskCheckForTimeOut+0x60>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d302      	bcc.n	8004cec <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e016      	b.n	8004d1a <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d20c      	bcs.n	8004d10 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad2      	subs	r2, r2, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f7ff ffad 	bl	8004c64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	e004      	b.n	8004d1a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d16:	2301      	movs	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004d1a:	f000 fb5b 	bl	80053d4 <vPortExitCritical>

	return xReturn;
 8004d1e:	697b      	ldr	r3, [r7, #20]
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b006      	add	sp, #24
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000460 	.word	0x20000460
 8004d2c:	20000474 	.word	0x20000474

08004d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d34:	4b02      	ldr	r3, [pc, #8]	@ (8004d40 <vTaskMissedYield+0x10>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000470 	.word	0x20000470

08004d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d4c:	f000 f84e 	bl	8004dec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d50:	4b03      	ldr	r3, [pc, #12]	@ (8004d60 <prvIdleTask+0x1c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d9f9      	bls.n	8004d4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d58:	f000 fb1a 	bl	8005390 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004d5c:	e7f6      	b.n	8004d4c <prvIdleTask+0x8>
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	20000360 	.word	0x20000360

08004d64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	e00c      	b.n	8004d8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	0013      	movs	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4a14      	ldr	r2, [pc, #80]	@ (8004dcc <prvInitialiseTaskLists+0x68>)
 8004d7c:	189b      	adds	r3, r3, r2
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f7fe fdf6 	bl	8003970 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3301      	adds	r3, #1
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b06      	cmp	r3, #6
 8004d8e:	d9ef      	bls.n	8004d70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d90:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd0 <prvInitialiseTaskLists+0x6c>)
 8004d92:	0018      	movs	r0, r3
 8004d94:	f7fe fdec 	bl	8003970 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d98:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd4 <prvInitialiseTaskLists+0x70>)
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f7fe fde8 	bl	8003970 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004da0:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd8 <prvInitialiseTaskLists+0x74>)
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7fe fde4 	bl	8003970 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004da8:	4b0c      	ldr	r3, [pc, #48]	@ (8004ddc <prvInitialiseTaskLists+0x78>)
 8004daa:	0018      	movs	r0, r3
 8004dac:	f7fe fde0 	bl	8003970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004db0:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <prvInitialiseTaskLists+0x7c>)
 8004db2:	0018      	movs	r0, r3
 8004db4:	f7fe fddc 	bl	8003970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	@ (8004de4 <prvInitialiseTaskLists+0x80>)
 8004dba:	4a05      	ldr	r2, [pc, #20]	@ (8004dd0 <prvInitialiseTaskLists+0x6c>)
 8004dbc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <prvInitialiseTaskLists+0x84>)
 8004dc0:	4a04      	ldr	r2, [pc, #16]	@ (8004dd4 <prvInitialiseTaskLists+0x70>)
 8004dc2:	601a      	str	r2, [r3, #0]
}
 8004dc4:	46c0      	nop			@ (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000360 	.word	0x20000360
 8004dd0:	200003ec 	.word	0x200003ec
 8004dd4:	20000400 	.word	0x20000400
 8004dd8:	2000041c 	.word	0x2000041c
 8004ddc:	20000430 	.word	0x20000430
 8004de0:	20000448 	.word	0x20000448
 8004de4:	20000414 	.word	0x20000414
 8004de8:	20000418 	.word	0x20000418

08004dec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004df2:	e01a      	b.n	8004e2a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004df4:	f000 fadc 	bl	80053b0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004df8:	4b10      	ldr	r3, [pc, #64]	@ (8004e3c <prvCheckTasksWaitingTermination+0x50>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3304      	adds	r3, #4
 8004e04:	0018      	movs	r0, r3
 8004e06:	f7fe fe34 	bl	8003a72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <prvCheckTasksWaitingTermination+0x54>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	1e5a      	subs	r2, r3, #1
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <prvCheckTasksWaitingTermination+0x54>)
 8004e12:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e14:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <prvCheckTasksWaitingTermination+0x58>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	1e5a      	subs	r2, r3, #1
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e44 <prvCheckTasksWaitingTermination+0x58>)
 8004e1c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004e1e:	f000 fad9 	bl	80053d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	0018      	movs	r0, r3
 8004e26:	f000 f80f 	bl	8004e48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e2a:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <prvCheckTasksWaitingTermination+0x58>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e0      	bne.n	8004df4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	46c0      	nop			@ (mov r8, r8)
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b002      	add	sp, #8
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20000430 	.word	0x20000430
 8004e40:	2000045c 	.word	0x2000045c
 8004e44:	20000444 	.word	0x20000444

08004e48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	334c      	adds	r3, #76	@ 0x4c
 8004e54:	0018      	movs	r0, r3
 8004e56:	f000 fd53 	bl	8005900 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	229d      	movs	r2, #157	@ 0x9d
 8004e5e:	5c9b      	ldrb	r3, [r3, r2]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f000 fbe1 	bl	8005630 <vPortFree>
				vPortFree( pxTCB );
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	0018      	movs	r0, r3
 8004e72:	f000 fbdd 	bl	8005630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e76:	e011      	b.n	8004e9c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	229d      	movs	r2, #157	@ 0x9d
 8004e7c:	5c9b      	ldrb	r3, [r3, r2]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d104      	bne.n	8004e8c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 fbd3 	bl	8005630 <vPortFree>
	}
 8004e8a:	e007      	b.n	8004e9c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	229d      	movs	r2, #157	@ 0x9d
 8004e90:	5c9b      	ldrb	r3, [r3, r2]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d002      	beq.n	8004e9c <prvDeleteTCB+0x54>
 8004e96:	b672      	cpsid	i
 8004e98:	46c0      	nop			@ (mov r8, r8)
 8004e9a:	e7fd      	b.n	8004e98 <prvDeleteTCB+0x50>
	}
 8004e9c:	46c0      	nop			@ (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee4 <prvResetNextTaskUnblockTime+0x40>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <prvResetNextTaskUnblockTime+0x14>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <prvResetNextTaskUnblockTime+0x16>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <prvResetNextTaskUnblockTime+0x44>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	4252      	negs	r2, r2
 8004ec4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ec6:	e008      	b.n	8004eda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ec8:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <prvResetNextTaskUnblockTime+0x40>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <prvResetNextTaskUnblockTime+0x44>)
 8004ed8:	601a      	str	r2, [r3, #0]
}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b002      	add	sp, #8
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	20000414 	.word	0x20000414
 8004ee8:	2000047c 	.word	0x2000047c

08004eec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f1c <xTaskGetSchedulerState+0x30>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004efa:	2301      	movs	r3, #1
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	e008      	b.n	8004f12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f00:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <xTaskGetSchedulerState+0x34>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	607b      	str	r3, [r7, #4]
 8004f0c:	e001      	b.n	8004f12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f12:	687b      	ldr	r3, [r7, #4]
	}
 8004f14:	0018      	movs	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b002      	add	sp, #8
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000468 	.word	0x20000468
 8004f20:	20000484 	.word	0x20000484

08004f24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d056      	beq.n	8004fe8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff4 <xTaskPriorityInherit+0xd0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d246      	bcs.n	8004fd6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	db06      	blt.n	8004f5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f50:	4b28      	ldr	r3, [pc, #160]	@ (8004ff4 <xTaskPriorityInherit+0xd0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	2207      	movs	r2, #7
 8004f58:	1ad2      	subs	r2, r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6959      	ldr	r1, [r3, #20]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f66:	0013      	movs	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	189b      	adds	r3, r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4a22      	ldr	r2, [pc, #136]	@ (8004ff8 <xTaskPriorityInherit+0xd4>)
 8004f70:	189b      	adds	r3, r3, r2
 8004f72:	4299      	cmp	r1, r3
 8004f74:	d101      	bne.n	8004f7a <xTaskPriorityInherit+0x56>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <xTaskPriorityInherit+0x58>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d022      	beq.n	8004fc6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	3304      	adds	r3, #4
 8004f84:	0018      	movs	r0, r3
 8004f86:	f7fe fd74 	bl	8003a72 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff4 <xTaskPriorityInherit+0xd0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f98:	4b18      	ldr	r3, [pc, #96]	@ (8004ffc <xTaskPriorityInherit+0xd8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d903      	bls.n	8004fa8 <xTaskPriorityInherit+0x84>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa4:	4b15      	ldr	r3, [pc, #84]	@ (8004ffc <xTaskPriorityInherit+0xd8>)
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fac:	0013      	movs	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	189b      	adds	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4a10      	ldr	r2, [pc, #64]	@ (8004ff8 <xTaskPriorityInherit+0xd4>)
 8004fb6:	189a      	adds	r2, r3, r2
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	0019      	movs	r1, r3
 8004fbe:	0010      	movs	r0, r2
 8004fc0:	f7fe fcff 	bl	80039c2 <vListInsertEnd>
 8004fc4:	e004      	b.n	8004fd0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff4 <xTaskPriorityInherit+0xd0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e008      	b.n	8004fe8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <xTaskPriorityInherit+0xd0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d201      	bcs.n	8004fe8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
	}
 8004fea:	0018      	movs	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b004      	add	sp, #16
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	2000035c 	.word	0x2000035c
 8004ff8:	20000360 	.word	0x20000360
 8004ffc:	20000464 	.word	0x20000464

08005000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d046      	beq.n	80050a4 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005016:	4b26      	ldr	r3, [pc, #152]	@ (80050b0 <xTaskPriorityDisinherit+0xb0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	429a      	cmp	r2, r3
 800501e:	d002      	beq.n	8005026 <xTaskPriorityDisinherit+0x26>
 8005020:	b672      	cpsid	i
 8005022:	46c0      	nop			@ (mov r8, r8)
 8005024:	e7fd      	b.n	8005022 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <xTaskPriorityDisinherit+0x34>
 800502e:	b672      	cpsid	i
 8005030:	46c0      	nop			@ (mov r8, r8)
 8005032:	e7fd      	b.n	8005030 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005038:	1e5a      	subs	r2, r3, #1
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005046:	429a      	cmp	r2, r3
 8005048:	d02c      	beq.n	80050a4 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504e:	2b00      	cmp	r3, #0
 8005050:	d128      	bne.n	80050a4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	3304      	adds	r3, #4
 8005056:	0018      	movs	r0, r3
 8005058:	f7fe fd0b 	bl	8003a72 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	2207      	movs	r2, #7
 800506a:	1ad2      	subs	r2, r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005074:	4b0f      	ldr	r3, [pc, #60]	@ (80050b4 <xTaskPriorityDisinherit+0xb4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d903      	bls.n	8005084 <xTaskPriorityDisinherit+0x84>
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005080:	4b0c      	ldr	r3, [pc, #48]	@ (80050b4 <xTaskPriorityDisinherit+0xb4>)
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005088:	0013      	movs	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	189b      	adds	r3, r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4a09      	ldr	r2, [pc, #36]	@ (80050b8 <xTaskPriorityDisinherit+0xb8>)
 8005092:	189a      	adds	r2, r3, r2
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	3304      	adds	r3, #4
 8005098:	0019      	movs	r1, r3
 800509a:	0010      	movs	r0, r2
 800509c:	f7fe fc91 	bl	80039c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050a0:	2301      	movs	r3, #1
 80050a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050a4:	68fb      	ldr	r3, [r7, #12]
	}
 80050a6:	0018      	movs	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b004      	add	sp, #16
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	46c0      	nop			@ (mov r8, r8)
 80050b0:	2000035c 	.word	0x2000035c
 80050b4:	20000464 	.word	0x20000464
 80050b8:	20000360 	.word	0x20000360

080050bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80050ca:	2301      	movs	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d05f      	beq.n	8005194 <vTaskPriorityDisinheritAfterTimeout+0xd8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <vTaskPriorityDisinheritAfterTimeout+0x26>
 80050dc:	b672      	cpsid	i
 80050de:	46c0      	nop			@ (mov r8, r8)
 80050e0:	e7fd      	b.n	80050de <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d902      	bls.n	80050f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e002      	b.n	80050f8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f6:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d048      	beq.n	8005194 <vTaskPriorityDisinheritAfterTimeout+0xd8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	429a      	cmp	r2, r3
 800510a:	d143      	bne.n	8005194 <vTaskPriorityDisinheritAfterTimeout+0xd8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800510c:	4b23      	ldr	r3, [pc, #140]	@ (800519c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d102      	bne.n	800511c <vTaskPriorityDisinheritAfterTimeout+0x60>
 8005116:	b672      	cpsid	i
 8005118:	46c0      	nop			@ (mov r8, r8)
 800511a:	e7fd      	b.n	8005118 <vTaskPriorityDisinheritAfterTimeout+0x5c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005120:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	2b00      	cmp	r3, #0
 800512e:	db04      	blt.n	800513a <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2207      	movs	r2, #7
 8005134:	1ad2      	subs	r2, r2, r3
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	6959      	ldr	r1, [r3, #20]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	0013      	movs	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	189b      	adds	r3, r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4a15      	ldr	r2, [pc, #84]	@ (80051a0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800514a:	189b      	adds	r3, r3, r2
 800514c:	4299      	cmp	r1, r3
 800514e:	d101      	bne.n	8005154 <vTaskPriorityDisinheritAfterTimeout+0x98>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <vTaskPriorityDisinheritAfterTimeout+0x9a>
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01c      	beq.n	8005194 <vTaskPriorityDisinheritAfterTimeout+0xd8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3304      	adds	r3, #4
 800515e:	0018      	movs	r0, r3
 8005160:	f7fe fc87 	bl	8003a72 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005168:	4b0e      	ldr	r3, [pc, #56]	@ (80051a4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d903      	bls.n	8005178 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005174:	4b0b      	ldr	r3, [pc, #44]	@ (80051a4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800517c:	0013      	movs	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	189b      	adds	r3, r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4a06      	ldr	r2, [pc, #24]	@ (80051a0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8005186:	189a      	adds	r2, r3, r2
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	3304      	adds	r3, #4
 800518c:	0019      	movs	r1, r3
 800518e:	0010      	movs	r0, r2
 8005190:	f7fe fc17 	bl	80039c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005194:	46c0      	nop			@ (mov r8, r8)
 8005196:	46bd      	mov	sp, r7
 8005198:	b006      	add	sp, #24
 800519a:	bd80      	pop	{r7, pc}
 800519c:	2000035c 	.word	0x2000035c
 80051a0:	20000360 	.word	0x20000360
 80051a4:	20000464 	.word	0x20000464

080051a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80051ac:	4b06      	ldr	r3, [pc, #24]	@ (80051c8 <pvTaskIncrementMutexHeldCount+0x20>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80051b4:	4b04      	ldr	r3, [pc, #16]	@ (80051c8 <pvTaskIncrementMutexHeldCount+0x20>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051ba:	3201      	adds	r2, #1
 80051bc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80051be:	4b02      	ldr	r3, [pc, #8]	@ (80051c8 <pvTaskIncrementMutexHeldCount+0x20>)
 80051c0:	681b      	ldr	r3, [r3, #0]
	}
 80051c2:	0018      	movs	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	2000035c 	.word	0x2000035c

080051cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051d6:	4b21      	ldr	r3, [pc, #132]	@ (800525c <prvAddCurrentTaskToDelayedList+0x90>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051dc:	4b20      	ldr	r3, [pc, #128]	@ (8005260 <prvAddCurrentTaskToDelayedList+0x94>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3304      	adds	r3, #4
 80051e2:	0018      	movs	r0, r3
 80051e4:	f7fe fc45 	bl	8003a72 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3301      	adds	r3, #1
 80051ec:	d10b      	bne.n	8005206 <prvAddCurrentTaskToDelayedList+0x3a>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005260 <prvAddCurrentTaskToDelayedList+0x94>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	1d1a      	adds	r2, r3, #4
 80051fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005264 <prvAddCurrentTaskToDelayedList+0x98>)
 80051fc:	0011      	movs	r1, r2
 80051fe:	0018      	movs	r0, r3
 8005200:	f7fe fbdf 	bl	80039c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005204:	e026      	b.n	8005254 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	18d3      	adds	r3, r2, r3
 800520c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800520e:	4b14      	ldr	r3, [pc, #80]	@ (8005260 <prvAddCurrentTaskToDelayedList+0x94>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	429a      	cmp	r2, r3
 800521c:	d209      	bcs.n	8005232 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800521e:	4b12      	ldr	r3, [pc, #72]	@ (8005268 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b0f      	ldr	r3, [pc, #60]	@ (8005260 <prvAddCurrentTaskToDelayedList+0x94>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3304      	adds	r3, #4
 8005228:	0019      	movs	r1, r3
 800522a:	0010      	movs	r0, r2
 800522c:	f7fe fbeb 	bl	8003a06 <vListInsert>
}
 8005230:	e010      	b.n	8005254 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005232:	4b0e      	ldr	r3, [pc, #56]	@ (800526c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <prvAddCurrentTaskToDelayedList+0x94>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3304      	adds	r3, #4
 800523c:	0019      	movs	r1, r3
 800523e:	0010      	movs	r0, r2
 8005240:	f7fe fbe1 	bl	8003a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005244:	4b0a      	ldr	r3, [pc, #40]	@ (8005270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	d202      	bcs.n	8005254 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800524e:	4b08      	ldr	r3, [pc, #32]	@ (8005270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	601a      	str	r2, [r3, #0]
}
 8005254:	46c0      	nop			@ (mov r8, r8)
 8005256:	46bd      	mov	sp, r7
 8005258:	b004      	add	sp, #16
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000460 	.word	0x20000460
 8005260:	2000035c 	.word	0x2000035c
 8005264:	20000448 	.word	0x20000448
 8005268:	20000418 	.word	0x20000418
 800526c:	20000414 	.word	0x20000414
 8005270:	2000047c 	.word	0x2000047c

08005274 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3b04      	subs	r3, #4
 8005284:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2280      	movs	r2, #128	@ 0x80
 800528a:	0452      	lsls	r2, r2, #17
 800528c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3b04      	subs	r3, #4
 8005292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3b04      	subs	r3, #4
 800529e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052a0:	4a08      	ldr	r2, [pc, #32]	@ (80052c4 <pxPortInitialiseStack+0x50>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b14      	subs	r3, #20
 80052aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3b20      	subs	r3, #32
 80052b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	0018      	movs	r0, r3
 80052bc:	46bd      	mov	sp, r7
 80052be:	b004      	add	sp, #16
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	46c0      	nop			@ (mov r8, r8)
 80052c4:	080052c9 	.word	0x080052c9

080052c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052d2:	4b08      	ldr	r3, [pc, #32]	@ (80052f4 <prvTaskExitError+0x2c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3301      	adds	r3, #1
 80052d8:	d002      	beq.n	80052e0 <prvTaskExitError+0x18>
 80052da:	b672      	cpsid	i
 80052dc:	46c0      	nop			@ (mov r8, r8)
 80052de:	e7fd      	b.n	80052dc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80052e0:	b672      	cpsid	i
	while( ulDummy == 0 )
 80052e2:	46c0      	nop			@ (mov r8, r8)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0fc      	beq.n	80052e4 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	46c0      	nop			@ (mov r8, r8)
 80052ee:	46bd      	mov	sp, r7
 80052f0:	b002      	add	sp, #8
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	2000001c 	.word	0x2000001c

080052f8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80052fc:	46c0      	nop			@ (mov r8, r8)
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005310 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005310:	4a0b      	ldr	r2, [pc, #44]	@ (8005340 <pxCurrentTCBConst2>)
 8005312:	6813      	ldr	r3, [r2, #0]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	3020      	adds	r0, #32
 8005318:	f380 8809 	msr	PSP, r0
 800531c:	2002      	movs	r0, #2
 800531e:	f380 8814 	msr	CONTROL, r0
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005328:	46ae      	mov	lr, r5
 800532a:	bc08      	pop	{r3}
 800532c:	bc04      	pop	{r2}
 800532e:	b662      	cpsie	i
 8005330:	4718      	bx	r3
 8005332:	46c0      	nop			@ (mov r8, r8)
 8005334:	46c0      	nop			@ (mov r8, r8)
 8005336:	46c0      	nop			@ (mov r8, r8)
 8005338:	46c0      	nop			@ (mov r8, r8)
 800533a:	46c0      	nop			@ (mov r8, r8)
 800533c:	46c0      	nop			@ (mov r8, r8)
 800533e:	46c0      	nop			@ (mov r8, r8)

08005340 <pxCurrentTCBConst2>:
 8005340:	2000035c 	.word	0x2000035c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005344:	46c0      	nop			@ (mov r8, r8)
 8005346:	46c0      	nop			@ (mov r8, r8)

08005348 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800534c:	4b0e      	ldr	r3, [pc, #56]	@ (8005388 <xPortStartScheduler+0x40>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <xPortStartScheduler+0x40>)
 8005352:	21ff      	movs	r1, #255	@ 0xff
 8005354:	0409      	lsls	r1, r1, #16
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800535a:	4b0b      	ldr	r3, [pc, #44]	@ (8005388 <xPortStartScheduler+0x40>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b0a      	ldr	r3, [pc, #40]	@ (8005388 <xPortStartScheduler+0x40>)
 8005360:	21ff      	movs	r1, #255	@ 0xff
 8005362:	0609      	lsls	r1, r1, #24
 8005364:	430a      	orrs	r2, r1
 8005366:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005368:	f000 f898 	bl	800549c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800536c:	4b07      	ldr	r3, [pc, #28]	@ (800538c <xPortStartScheduler+0x44>)
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005372:	f7ff ffcd 	bl	8005310 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005376:	f7ff fb9d 	bl	8004ab4 <vTaskSwitchContext>
	prvTaskExitError();
 800537a:	f7ff ffa5 	bl	80052c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800537e:	2300      	movs	r3, #0
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	46c0      	nop			@ (mov r8, r8)
 8005388:	e000ed20 	.word	0xe000ed20
 800538c:	2000001c 	.word	0x2000001c

08005390 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005394:	4b05      	ldr	r3, [pc, #20]	@ (80053ac <vPortYield+0x1c>)
 8005396:	2280      	movs	r2, #128	@ 0x80
 8005398:	0552      	lsls	r2, r2, #21
 800539a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800539c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80053a0:	f3bf 8f6f 	isb	sy
}
 80053a4:	46c0      	nop			@ (mov r8, r8)
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80053b4:	b672      	cpsid	i
    uxCriticalNesting++;
 80053b6:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <vPortEnterCritical+0x20>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	4b04      	ldr	r3, [pc, #16]	@ (80053d0 <vPortEnterCritical+0x20>)
 80053be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80053c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80053c4:	f3bf 8f6f 	isb	sy
}
 80053c8:	46c0      	nop			@ (mov r8, r8)
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	46c0      	nop			@ (mov r8, r8)
 80053d0:	2000001c 	.word	0x2000001c

080053d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053d8:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <vPortExitCritical+0x2c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <vPortExitCritical+0x12>
 80053e0:	b672      	cpsid	i
 80053e2:	46c0      	nop			@ (mov r8, r8)
 80053e4:	e7fd      	b.n	80053e2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80053e6:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <vPortExitCritical+0x2c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	1e5a      	subs	r2, r3, #1
 80053ec:	4b04      	ldr	r3, [pc, #16]	@ (8005400 <vPortExitCritical+0x2c>)
 80053ee:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80053f0:	4b03      	ldr	r3, [pc, #12]	@ (8005400 <vPortExitCritical+0x2c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d100      	bne.n	80053fa <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 80053f8:	b662      	cpsie	i
    }
}
 80053fa:	46c0      	nop			@ (mov r8, r8)
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	2000001c 	.word	0x2000001c

08005404 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005404:	f3ef 8010 	mrs	r0, PRIMASK
 8005408:	b672      	cpsid	i
 800540a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800540c:	46c0      	nop			@ (mov r8, r8)
 800540e:	0018      	movs	r0, r3

08005410 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005410:	f380 8810 	msr	PRIMASK, r0
 8005414:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005416:	46c0      	nop			@ (mov r8, r8)
	...

08005420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005420:	f3ef 8009 	mrs	r0, PSP
 8005424:	4b0e      	ldr	r3, [pc, #56]	@ (8005460 <pxCurrentTCBConst>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	3820      	subs	r0, #32
 800542a:	6010      	str	r0, [r2, #0]
 800542c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800542e:	4644      	mov	r4, r8
 8005430:	464d      	mov	r5, r9
 8005432:	4656      	mov	r6, sl
 8005434:	465f      	mov	r7, fp
 8005436:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005438:	b508      	push	{r3, lr}
 800543a:	b672      	cpsid	i
 800543c:	f7ff fb3a 	bl	8004ab4 <vTaskSwitchContext>
 8005440:	b662      	cpsie	i
 8005442:	bc0c      	pop	{r2, r3}
 8005444:	6811      	ldr	r1, [r2, #0]
 8005446:	6808      	ldr	r0, [r1, #0]
 8005448:	3010      	adds	r0, #16
 800544a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800544c:	46a0      	mov	r8, r4
 800544e:	46a9      	mov	r9, r5
 8005450:	46b2      	mov	sl, r6
 8005452:	46bb      	mov	fp, r7
 8005454:	f380 8809 	msr	PSP, r0
 8005458:	3820      	subs	r0, #32
 800545a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800545c:	4718      	bx	r3
 800545e:	46c0      	nop			@ (mov r8, r8)

08005460 <pxCurrentTCBConst>:
 8005460:	2000035c 	.word	0x2000035c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005464:	46c0      	nop			@ (mov r8, r8)
 8005466:	46c0      	nop			@ (mov r8, r8)

08005468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800546e:	f7ff ffc9 	bl	8005404 <ulSetInterruptMaskFromISR>
 8005472:	0003      	movs	r3, r0
 8005474:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005476:	f7ff fa67 	bl	8004948 <xTaskIncrementTick>
 800547a:	1e03      	subs	r3, r0, #0
 800547c:	d003      	beq.n	8005486 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <xPortSysTickHandler+0x30>)
 8005480:	2280      	movs	r2, #128	@ 0x80
 8005482:	0552      	lsls	r2, r2, #21
 8005484:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	0018      	movs	r0, r3
 800548a:	f7ff ffc1 	bl	8005410 <vClearInterruptMaskFromISR>
}
 800548e:	46c0      	nop			@ (mov r8, r8)
 8005490:	46bd      	mov	sp, r7
 8005492:	b002      	add	sp, #8
 8005494:	bd80      	pop	{r7, pc}
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <prvSetupTimerInterrupt+0x34>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80054a6:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <prvSetupTimerInterrupt+0x38>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054ac:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <prvSetupTimerInterrupt+0x3c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	22fa      	movs	r2, #250	@ 0xfa
 80054b2:	0091      	lsls	r1, r2, #2
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7fa fe39 	bl	800012c <__udivsi3>
 80054ba:	0003      	movs	r3, r0
 80054bc:	001a      	movs	r2, r3
 80054be:	4b07      	ldr	r3, [pc, #28]	@ (80054dc <prvSetupTimerInterrupt+0x40>)
 80054c0:	3a01      	subs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80054c4:	4b02      	ldr	r3, [pc, #8]	@ (80054d0 <prvSetupTimerInterrupt+0x34>)
 80054c6:	2207      	movs	r2, #7
 80054c8:	601a      	str	r2, [r3, #0]
}
 80054ca:	46c0      	nop			@ (mov r8, r8)
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	e000e010 	.word	0xe000e010
 80054d4:	e000e018 	.word	0xe000e018
 80054d8:	20000010 	.word	0x20000010
 80054dc:	e000e014 	.word	0xe000e014

080054e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80054ec:	f7ff f994 	bl	8004818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054f0:	4b4a      	ldr	r3, [pc, #296]	@ (800561c <pvPortMalloc+0x13c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054f8:	f000 f8e4 	bl	80056c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054fc:	4b48      	ldr	r3, [pc, #288]	@ (8005620 <pvPortMalloc+0x140>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	4013      	ands	r3, r2
 8005504:	d000      	beq.n	8005508 <pvPortMalloc+0x28>
 8005506:	e07b      	b.n	8005600 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d013      	beq.n	8005536 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800550e:	2208      	movs	r2, #8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	189b      	adds	r3, r3, r2
 8005514:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2207      	movs	r2, #7
 800551a:	4013      	ands	r3, r2
 800551c:	d00b      	beq.n	8005536 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2207      	movs	r2, #7
 8005522:	4393      	bics	r3, r2
 8005524:	3308      	adds	r3, #8
 8005526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2207      	movs	r2, #7
 800552c:	4013      	ands	r3, r2
 800552e:	d002      	beq.n	8005536 <pvPortMalloc+0x56>
 8005530:	b672      	cpsid	i
 8005532:	46c0      	nop			@ (mov r8, r8)
 8005534:	e7fd      	b.n	8005532 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d061      	beq.n	8005600 <pvPortMalloc+0x120>
 800553c:	4b39      	ldr	r3, [pc, #228]	@ (8005624 <pvPortMalloc+0x144>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	429a      	cmp	r2, r3
 8005544:	d85c      	bhi.n	8005600 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005546:	4b38      	ldr	r3, [pc, #224]	@ (8005628 <pvPortMalloc+0x148>)
 8005548:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800554a:	4b37      	ldr	r3, [pc, #220]	@ (8005628 <pvPortMalloc+0x148>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005550:	e004      	b.n	800555c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	429a      	cmp	r2, r3
 8005564:	d903      	bls.n	800556e <pvPortMalloc+0x8e>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f1      	bne.n	8005552 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800556e:	4b2b      	ldr	r3, [pc, #172]	@ (800561c <pvPortMalloc+0x13c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	429a      	cmp	r2, r3
 8005576:	d043      	beq.n	8005600 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2208      	movs	r2, #8
 800557e:	189b      	adds	r3, r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	1ad2      	subs	r2, r2, r3
 8005592:	2308      	movs	r3, #8
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	429a      	cmp	r2, r3
 8005598:	d917      	bls.n	80055ca <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	18d3      	adds	r3, r2, r3
 80055a0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2207      	movs	r2, #7
 80055a6:	4013      	ands	r3, r2
 80055a8:	d002      	beq.n	80055b0 <pvPortMalloc+0xd0>
 80055aa:	b672      	cpsid	i
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	e7fd      	b.n	80055ac <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	1ad2      	subs	r2, r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0018      	movs	r0, r3
 80055c6:	f000 f8dd 	bl	8005784 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055ca:	4b16      	ldr	r3, [pc, #88]	@ (8005624 <pvPortMalloc+0x144>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	1ad2      	subs	r2, r2, r3
 80055d4:	4b13      	ldr	r3, [pc, #76]	@ (8005624 <pvPortMalloc+0x144>)
 80055d6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055d8:	4b12      	ldr	r3, [pc, #72]	@ (8005624 <pvPortMalloc+0x144>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4b13      	ldr	r3, [pc, #76]	@ (800562c <pvPortMalloc+0x14c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d203      	bcs.n	80055ec <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <pvPortMalloc+0x144>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	4b10      	ldr	r3, [pc, #64]	@ (800562c <pvPortMalloc+0x14c>)
 80055ea:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005620 <pvPortMalloc+0x140>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005600:	f7ff f916 	bl	8004830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2207      	movs	r2, #7
 8005608:	4013      	ands	r3, r2
 800560a:	d002      	beq.n	8005612 <pvPortMalloc+0x132>
 800560c:	b672      	cpsid	i
 800560e:	46c0      	nop			@ (mov r8, r8)
 8005610:	e7fd      	b.n	800560e <pvPortMalloc+0x12e>
	return pvReturn;
 8005612:	68fb      	ldr	r3, [r7, #12]
}
 8005614:	0018      	movs	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	b006      	add	sp, #24
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000c90 	.word	0x20000c90
 8005620:	20000c9c 	.word	0x20000c9c
 8005624:	20000c94 	.word	0x20000c94
 8005628:	20000c88 	.word	0x20000c88
 800562c:	20000c98 	.word	0x20000c98

08005630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d037      	beq.n	80056b2 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005642:	2308      	movs	r3, #8
 8005644:	425b      	negs	r3, r3
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	18d3      	adds	r3, r2, r3
 800564a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4b19      	ldr	r3, [pc, #100]	@ (80056bc <vPortFree+0x8c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4013      	ands	r3, r2
 800565a:	d102      	bne.n	8005662 <vPortFree+0x32>
 800565c:	b672      	cpsid	i
 800565e:	46c0      	nop			@ (mov r8, r8)
 8005660:	e7fd      	b.n	800565e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <vPortFree+0x40>
 800566a:	b672      	cpsid	i
 800566c:	46c0      	nop			@ (mov r8, r8)
 800566e:	e7fd      	b.n	800566c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	4b11      	ldr	r3, [pc, #68]	@ (80056bc <vPortFree+0x8c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4013      	ands	r3, r2
 800567a:	d01a      	beq.n	80056b2 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d116      	bne.n	80056b2 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <vPortFree+0x8c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	43db      	mvns	r3, r3
 800568e:	401a      	ands	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005694:	f7ff f8c0 	bl	8004818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	4b08      	ldr	r3, [pc, #32]	@ (80056c0 <vPortFree+0x90>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	18d2      	adds	r2, r2, r3
 80056a2:	4b07      	ldr	r3, [pc, #28]	@ (80056c0 <vPortFree+0x90>)
 80056a4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 f86b 	bl	8005784 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056ae:	f7ff f8bf 	bl	8004830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b004      	add	sp, #16
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	20000c9c 	.word	0x20000c9c
 80056c0:	20000c94 	.word	0x20000c94

080056c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056ca:	2380      	movs	r3, #128	@ 0x80
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056d0:	4b26      	ldr	r3, [pc, #152]	@ (800576c <prvHeapInit+0xa8>)
 80056d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2207      	movs	r2, #7
 80056d8:	4013      	ands	r3, r2
 80056da:	d00c      	beq.n	80056f6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3307      	adds	r3, #7
 80056e0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2207      	movs	r2, #7
 80056e6:	4393      	bics	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1ad2      	subs	r2, r2, r3
 80056f0:	4b1e      	ldr	r3, [pc, #120]	@ (800576c <prvHeapInit+0xa8>)
 80056f2:	18d3      	adds	r3, r2, r3
 80056f4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005770 <prvHeapInit+0xac>)
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005700:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <prvHeapInit+0xac>)
 8005702:	2200      	movs	r2, #0
 8005704:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	18d3      	adds	r3, r2, r3
 800570c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800570e:	2208      	movs	r2, #8
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2207      	movs	r2, #7
 800571a:	4393      	bics	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4b14      	ldr	r3, [pc, #80]	@ (8005774 <prvHeapInit+0xb0>)
 8005722:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005724:	4b13      	ldr	r3, [pc, #76]	@ (8005774 <prvHeapInit+0xb0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2200      	movs	r2, #0
 800572a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800572c:	4b11      	ldr	r3, [pc, #68]	@ (8005774 <prvHeapInit+0xb0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	1ad2      	subs	r2, r2, r3
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005742:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <prvHeapInit+0xb0>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	4b0a      	ldr	r3, [pc, #40]	@ (8005778 <prvHeapInit+0xb4>)
 8005750:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	4b09      	ldr	r3, [pc, #36]	@ (800577c <prvHeapInit+0xb8>)
 8005758:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800575a:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <prvHeapInit+0xbc>)
 800575c:	2280      	movs	r2, #128	@ 0x80
 800575e:	0612      	lsls	r2, r2, #24
 8005760:	601a      	str	r2, [r3, #0]
}
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	46bd      	mov	sp, r7
 8005766:	b004      	add	sp, #16
 8005768:	bd80      	pop	{r7, pc}
 800576a:	46c0      	nop			@ (mov r8, r8)
 800576c:	20000488 	.word	0x20000488
 8005770:	20000c88 	.word	0x20000c88
 8005774:	20000c90 	.word	0x20000c90
 8005778:	20000c98 	.word	0x20000c98
 800577c:	20000c94 	.word	0x20000c94
 8005780:	20000c9c 	.word	0x20000c9c

08005784 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800578c:	4b27      	ldr	r3, [pc, #156]	@ (800582c <prvInsertBlockIntoFreeList+0xa8>)
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e002      	b.n	8005798 <prvInsertBlockIntoFreeList+0x14>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d8f7      	bhi.n	8005792 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	18d3      	adds	r3, r2, r3
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d108      	bne.n	80057c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	18d2      	adds	r2, r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	18d2      	adds	r2, r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d118      	bne.n	800580c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b14      	ldr	r3, [pc, #80]	@ (8005830 <prvInsertBlockIntoFreeList+0xac>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d00d      	beq.n	8005802 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	18d2      	adds	r2, r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	e008      	b.n	8005814 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005802:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <prvInsertBlockIntoFreeList+0xac>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	e003      	b.n	8005814 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	429a      	cmp	r2, r3
 800581a:	d002      	beq.n	8005822 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b004      	add	sp, #16
 8005828:	bd80      	pop	{r7, pc}
 800582a:	46c0      	nop			@ (mov r8, r8)
 800582c:	20000c88 	.word	0x20000c88
 8005830:	20000c90 	.word	0x20000c90

08005834 <sniprintf>:
 8005834:	b40c      	push	{r2, r3}
 8005836:	b530      	push	{r4, r5, lr}
 8005838:	4b17      	ldr	r3, [pc, #92]	@ (8005898 <sniprintf+0x64>)
 800583a:	000c      	movs	r4, r1
 800583c:	681d      	ldr	r5, [r3, #0]
 800583e:	b09d      	sub	sp, #116	@ 0x74
 8005840:	2900      	cmp	r1, #0
 8005842:	da08      	bge.n	8005856 <sniprintf+0x22>
 8005844:	238b      	movs	r3, #139	@ 0x8b
 8005846:	2001      	movs	r0, #1
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	4240      	negs	r0, r0
 800584c:	b01d      	add	sp, #116	@ 0x74
 800584e:	bc30      	pop	{r4, r5}
 8005850:	bc08      	pop	{r3}
 8005852:	b002      	add	sp, #8
 8005854:	4718      	bx	r3
 8005856:	2382      	movs	r3, #130	@ 0x82
 8005858:	466a      	mov	r2, sp
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	8293      	strh	r3, [r2, #20]
 800585e:	2300      	movs	r3, #0
 8005860:	9002      	str	r0, [sp, #8]
 8005862:	9006      	str	r0, [sp, #24]
 8005864:	4299      	cmp	r1, r3
 8005866:	d000      	beq.n	800586a <sniprintf+0x36>
 8005868:	1e4b      	subs	r3, r1, #1
 800586a:	9304      	str	r3, [sp, #16]
 800586c:	9307      	str	r3, [sp, #28]
 800586e:	2301      	movs	r3, #1
 8005870:	466a      	mov	r2, sp
 8005872:	425b      	negs	r3, r3
 8005874:	82d3      	strh	r3, [r2, #22]
 8005876:	0028      	movs	r0, r5
 8005878:	ab21      	add	r3, sp, #132	@ 0x84
 800587a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800587c:	a902      	add	r1, sp, #8
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	f000 fa30 	bl	8005ce4 <_svfiprintf_r>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	da01      	bge.n	800588c <sniprintf+0x58>
 8005888:	238b      	movs	r3, #139	@ 0x8b
 800588a:	602b      	str	r3, [r5, #0]
 800588c:	2c00      	cmp	r4, #0
 800588e:	d0dd      	beq.n	800584c <sniprintf+0x18>
 8005890:	2200      	movs	r2, #0
 8005892:	9b02      	ldr	r3, [sp, #8]
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	e7d9      	b.n	800584c <sniprintf+0x18>
 8005898:	20000020 	.word	0x20000020

0800589c <siscanf>:
 800589c:	b40e      	push	{r1, r2, r3}
 800589e:	b530      	push	{r4, r5, lr}
 80058a0:	2381      	movs	r3, #129	@ 0x81
 80058a2:	b09c      	sub	sp, #112	@ 0x70
 80058a4:	466a      	mov	r2, sp
 80058a6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	cc20      	ldmia	r4!, {r5}
 80058ac:	8293      	strh	r3, [r2, #20]
 80058ae:	9002      	str	r0, [sp, #8]
 80058b0:	9006      	str	r0, [sp, #24]
 80058b2:	f7fa fc29 	bl	8000108 <strlen>
 80058b6:	4b0b      	ldr	r3, [pc, #44]	@ (80058e4 <siscanf+0x48>)
 80058b8:	466a      	mov	r2, sp
 80058ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058bc:	2300      	movs	r3, #0
 80058be:	9003      	str	r0, [sp, #12]
 80058c0:	9007      	str	r0, [sp, #28]
 80058c2:	4809      	ldr	r0, [pc, #36]	@ (80058e8 <siscanf+0x4c>)
 80058c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058c6:	9314      	str	r3, [sp, #80]	@ 0x50
 80058c8:	3b01      	subs	r3, #1
 80058ca:	82d3      	strh	r3, [r2, #22]
 80058cc:	a902      	add	r1, sp, #8
 80058ce:	0023      	movs	r3, r4
 80058d0:	002a      	movs	r2, r5
 80058d2:	6800      	ldr	r0, [r0, #0]
 80058d4:	9401      	str	r4, [sp, #4]
 80058d6:	f000 fb5f 	bl	8005f98 <__ssvfiscanf_r>
 80058da:	b01c      	add	sp, #112	@ 0x70
 80058dc:	bc30      	pop	{r4, r5}
 80058de:	bc08      	pop	{r3}
 80058e0:	b003      	add	sp, #12
 80058e2:	4718      	bx	r3
 80058e4:	080058ed 	.word	0x080058ed
 80058e8:	20000020 	.word	0x20000020

080058ec <__seofread>:
 80058ec:	2000      	movs	r0, #0
 80058ee:	4770      	bx	lr

080058f0 <memset>:
 80058f0:	0003      	movs	r3, r0
 80058f2:	1882      	adds	r2, r0, r2
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d100      	bne.n	80058fa <memset+0xa>
 80058f8:	4770      	bx	lr
 80058fa:	7019      	strb	r1, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	e7f9      	b.n	80058f4 <memset+0x4>

08005900 <_reclaim_reent>:
 8005900:	4b2e      	ldr	r3, [pc, #184]	@ (80059bc <_reclaim_reent+0xbc>)
 8005902:	b570      	push	{r4, r5, r6, lr}
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	0004      	movs	r4, r0
 8005908:	4283      	cmp	r3, r0
 800590a:	d04f      	beq.n	80059ac <_reclaim_reent+0xac>
 800590c:	69c3      	ldr	r3, [r0, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d017      	beq.n	8005942 <_reclaim_reent+0x42>
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00d      	beq.n	8005934 <_reclaim_reent+0x34>
 8005918:	2500      	movs	r5, #0
 800591a:	69e3      	ldr	r3, [r4, #28]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	5959      	ldr	r1, [r3, r5]
 8005920:	2900      	cmp	r1, #0
 8005922:	d144      	bne.n	80059ae <_reclaim_reent+0xae>
 8005924:	3504      	adds	r5, #4
 8005926:	2d80      	cmp	r5, #128	@ 0x80
 8005928:	d1f7      	bne.n	800591a <_reclaim_reent+0x1a>
 800592a:	69e3      	ldr	r3, [r4, #28]
 800592c:	0020      	movs	r0, r4
 800592e:	68d9      	ldr	r1, [r3, #12]
 8005930:	f000 f87c 	bl	8005a2c <_free_r>
 8005934:	69e3      	ldr	r3, [r4, #28]
 8005936:	6819      	ldr	r1, [r3, #0]
 8005938:	2900      	cmp	r1, #0
 800593a:	d002      	beq.n	8005942 <_reclaim_reent+0x42>
 800593c:	0020      	movs	r0, r4
 800593e:	f000 f875 	bl	8005a2c <_free_r>
 8005942:	6961      	ldr	r1, [r4, #20]
 8005944:	2900      	cmp	r1, #0
 8005946:	d002      	beq.n	800594e <_reclaim_reent+0x4e>
 8005948:	0020      	movs	r0, r4
 800594a:	f000 f86f 	bl	8005a2c <_free_r>
 800594e:	69e1      	ldr	r1, [r4, #28]
 8005950:	2900      	cmp	r1, #0
 8005952:	d002      	beq.n	800595a <_reclaim_reent+0x5a>
 8005954:	0020      	movs	r0, r4
 8005956:	f000 f869 	bl	8005a2c <_free_r>
 800595a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800595c:	2900      	cmp	r1, #0
 800595e:	d002      	beq.n	8005966 <_reclaim_reent+0x66>
 8005960:	0020      	movs	r0, r4
 8005962:	f000 f863 	bl	8005a2c <_free_r>
 8005966:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005968:	2900      	cmp	r1, #0
 800596a:	d002      	beq.n	8005972 <_reclaim_reent+0x72>
 800596c:	0020      	movs	r0, r4
 800596e:	f000 f85d 	bl	8005a2c <_free_r>
 8005972:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005974:	2900      	cmp	r1, #0
 8005976:	d002      	beq.n	800597e <_reclaim_reent+0x7e>
 8005978:	0020      	movs	r0, r4
 800597a:	f000 f857 	bl	8005a2c <_free_r>
 800597e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005980:	2900      	cmp	r1, #0
 8005982:	d002      	beq.n	800598a <_reclaim_reent+0x8a>
 8005984:	0020      	movs	r0, r4
 8005986:	f000 f851 	bl	8005a2c <_free_r>
 800598a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800598c:	2900      	cmp	r1, #0
 800598e:	d002      	beq.n	8005996 <_reclaim_reent+0x96>
 8005990:	0020      	movs	r0, r4
 8005992:	f000 f84b 	bl	8005a2c <_free_r>
 8005996:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005998:	2900      	cmp	r1, #0
 800599a:	d002      	beq.n	80059a2 <_reclaim_reent+0xa2>
 800599c:	0020      	movs	r0, r4
 800599e:	f000 f845 	bl	8005a2c <_free_r>
 80059a2:	6a23      	ldr	r3, [r4, #32]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <_reclaim_reent+0xac>
 80059a8:	0020      	movs	r0, r4
 80059aa:	4798      	blx	r3
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
 80059ae:	680e      	ldr	r6, [r1, #0]
 80059b0:	0020      	movs	r0, r4
 80059b2:	f000 f83b 	bl	8005a2c <_free_r>
 80059b6:	0031      	movs	r1, r6
 80059b8:	e7b2      	b.n	8005920 <_reclaim_reent+0x20>
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	20000020 	.word	0x20000020

080059c0 <__errno>:
 80059c0:	4b01      	ldr	r3, [pc, #4]	@ (80059c8 <__errno+0x8>)
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	4770      	bx	lr
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	20000020 	.word	0x20000020

080059cc <__libc_init_array>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	2600      	movs	r6, #0
 80059d0:	4c0c      	ldr	r4, [pc, #48]	@ (8005a04 <__libc_init_array+0x38>)
 80059d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005a08 <__libc_init_array+0x3c>)
 80059d4:	1b64      	subs	r4, r4, r5
 80059d6:	10a4      	asrs	r4, r4, #2
 80059d8:	42a6      	cmp	r6, r4
 80059da:	d109      	bne.n	80059f0 <__libc_init_array+0x24>
 80059dc:	2600      	movs	r6, #0
 80059de:	f001 f90f 	bl	8006c00 <_init>
 80059e2:	4c0a      	ldr	r4, [pc, #40]	@ (8005a0c <__libc_init_array+0x40>)
 80059e4:	4d0a      	ldr	r5, [pc, #40]	@ (8005a10 <__libc_init_array+0x44>)
 80059e6:	1b64      	subs	r4, r4, r5
 80059e8:	10a4      	asrs	r4, r4, #2
 80059ea:	42a6      	cmp	r6, r4
 80059ec:	d105      	bne.n	80059fa <__libc_init_array+0x2e>
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	00b3      	lsls	r3, r6, #2
 80059f2:	58eb      	ldr	r3, [r5, r3]
 80059f4:	4798      	blx	r3
 80059f6:	3601      	adds	r6, #1
 80059f8:	e7ee      	b.n	80059d8 <__libc_init_array+0xc>
 80059fa:	00b3      	lsls	r3, r6, #2
 80059fc:	58eb      	ldr	r3, [r5, r3]
 80059fe:	4798      	blx	r3
 8005a00:	3601      	adds	r6, #1
 8005a02:	e7f2      	b.n	80059ea <__libc_init_array+0x1e>
 8005a04:	08006e5c 	.word	0x08006e5c
 8005a08:	08006e5c 	.word	0x08006e5c
 8005a0c:	08006e60 	.word	0x08006e60
 8005a10:	08006e5c 	.word	0x08006e5c

08005a14 <__retarget_lock_acquire_recursive>:
 8005a14:	4770      	bx	lr

08005a16 <__retarget_lock_release_recursive>:
 8005a16:	4770      	bx	lr

08005a18 <memcpy>:
 8005a18:	2300      	movs	r3, #0
 8005a1a:	b510      	push	{r4, lr}
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d100      	bne.n	8005a22 <memcpy+0xa>
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	5ccc      	ldrb	r4, [r1, r3]
 8005a24:	54c4      	strb	r4, [r0, r3]
 8005a26:	3301      	adds	r3, #1
 8005a28:	e7f8      	b.n	8005a1c <memcpy+0x4>
	...

08005a2c <_free_r>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	0005      	movs	r5, r0
 8005a30:	1e0c      	subs	r4, r1, #0
 8005a32:	d010      	beq.n	8005a56 <_free_r+0x2a>
 8005a34:	3c04      	subs	r4, #4
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	da00      	bge.n	8005a3e <_free_r+0x12>
 8005a3c:	18e4      	adds	r4, r4, r3
 8005a3e:	0028      	movs	r0, r5
 8005a40:	f000 f8e0 	bl	8005c04 <__malloc_lock>
 8005a44:	4a1d      	ldr	r2, [pc, #116]	@ (8005abc <_free_r+0x90>)
 8005a46:	6813      	ldr	r3, [r2, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d105      	bne.n	8005a58 <_free_r+0x2c>
 8005a4c:	6063      	str	r3, [r4, #4]
 8005a4e:	6014      	str	r4, [r2, #0]
 8005a50:	0028      	movs	r0, r5
 8005a52:	f000 f8df 	bl	8005c14 <__malloc_unlock>
 8005a56:	bd70      	pop	{r4, r5, r6, pc}
 8005a58:	42a3      	cmp	r3, r4
 8005a5a:	d908      	bls.n	8005a6e <_free_r+0x42>
 8005a5c:	6820      	ldr	r0, [r4, #0]
 8005a5e:	1821      	adds	r1, r4, r0
 8005a60:	428b      	cmp	r3, r1
 8005a62:	d1f3      	bne.n	8005a4c <_free_r+0x20>
 8005a64:	6819      	ldr	r1, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	1809      	adds	r1, r1, r0
 8005a6a:	6021      	str	r1, [r4, #0]
 8005a6c:	e7ee      	b.n	8005a4c <_free_r+0x20>
 8005a6e:	001a      	movs	r2, r3
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <_free_r+0x4e>
 8005a76:	42a3      	cmp	r3, r4
 8005a78:	d9f9      	bls.n	8005a6e <_free_r+0x42>
 8005a7a:	6811      	ldr	r1, [r2, #0]
 8005a7c:	1850      	adds	r0, r2, r1
 8005a7e:	42a0      	cmp	r0, r4
 8005a80:	d10b      	bne.n	8005a9a <_free_r+0x6e>
 8005a82:	6820      	ldr	r0, [r4, #0]
 8005a84:	1809      	adds	r1, r1, r0
 8005a86:	1850      	adds	r0, r2, r1
 8005a88:	6011      	str	r1, [r2, #0]
 8005a8a:	4283      	cmp	r3, r0
 8005a8c:	d1e0      	bne.n	8005a50 <_free_r+0x24>
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	1841      	adds	r1, r0, r1
 8005a94:	6011      	str	r1, [r2, #0]
 8005a96:	6053      	str	r3, [r2, #4]
 8005a98:	e7da      	b.n	8005a50 <_free_r+0x24>
 8005a9a:	42a0      	cmp	r0, r4
 8005a9c:	d902      	bls.n	8005aa4 <_free_r+0x78>
 8005a9e:	230c      	movs	r3, #12
 8005aa0:	602b      	str	r3, [r5, #0]
 8005aa2:	e7d5      	b.n	8005a50 <_free_r+0x24>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	1821      	adds	r1, r4, r0
 8005aa8:	428b      	cmp	r3, r1
 8005aaa:	d103      	bne.n	8005ab4 <_free_r+0x88>
 8005aac:	6819      	ldr	r1, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	1809      	adds	r1, r1, r0
 8005ab2:	6021      	str	r1, [r4, #0]
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	6054      	str	r4, [r2, #4]
 8005ab8:	e7ca      	b.n	8005a50 <_free_r+0x24>
 8005aba:	46c0      	nop			@ (mov r8, r8)
 8005abc:	20000de4 	.word	0x20000de4

08005ac0 <sbrk_aligned>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	4e0f      	ldr	r6, [pc, #60]	@ (8005b00 <sbrk_aligned+0x40>)
 8005ac4:	000d      	movs	r5, r1
 8005ac6:	6831      	ldr	r1, [r6, #0]
 8005ac8:	0004      	movs	r4, r0
 8005aca:	2900      	cmp	r1, #0
 8005acc:	d102      	bne.n	8005ad4 <sbrk_aligned+0x14>
 8005ace:	f000 ff2f 	bl	8006930 <_sbrk_r>
 8005ad2:	6030      	str	r0, [r6, #0]
 8005ad4:	0029      	movs	r1, r5
 8005ad6:	0020      	movs	r0, r4
 8005ad8:	f000 ff2a 	bl	8006930 <_sbrk_r>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d103      	bne.n	8005ae8 <sbrk_aligned+0x28>
 8005ae0:	2501      	movs	r5, #1
 8005ae2:	426d      	negs	r5, r5
 8005ae4:	0028      	movs	r0, r5
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	2303      	movs	r3, #3
 8005aea:	1cc5      	adds	r5, r0, #3
 8005aec:	439d      	bics	r5, r3
 8005aee:	42a8      	cmp	r0, r5
 8005af0:	d0f8      	beq.n	8005ae4 <sbrk_aligned+0x24>
 8005af2:	1a29      	subs	r1, r5, r0
 8005af4:	0020      	movs	r0, r4
 8005af6:	f000 ff1b 	bl	8006930 <_sbrk_r>
 8005afa:	3001      	adds	r0, #1
 8005afc:	d1f2      	bne.n	8005ae4 <sbrk_aligned+0x24>
 8005afe:	e7ef      	b.n	8005ae0 <sbrk_aligned+0x20>
 8005b00:	20000de0 	.word	0x20000de0

08005b04 <_malloc_r>:
 8005b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b06:	2203      	movs	r2, #3
 8005b08:	1ccb      	adds	r3, r1, #3
 8005b0a:	4393      	bics	r3, r2
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	0005      	movs	r5, r0
 8005b10:	001f      	movs	r7, r3
 8005b12:	2b0c      	cmp	r3, #12
 8005b14:	d234      	bcs.n	8005b80 <_malloc_r+0x7c>
 8005b16:	270c      	movs	r7, #12
 8005b18:	42b9      	cmp	r1, r7
 8005b1a:	d833      	bhi.n	8005b84 <_malloc_r+0x80>
 8005b1c:	0028      	movs	r0, r5
 8005b1e:	f000 f871 	bl	8005c04 <__malloc_lock>
 8005b22:	4e37      	ldr	r6, [pc, #220]	@ (8005c00 <_malloc_r+0xfc>)
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	001c      	movs	r4, r3
 8005b28:	2c00      	cmp	r4, #0
 8005b2a:	d12f      	bne.n	8005b8c <_malloc_r+0x88>
 8005b2c:	0039      	movs	r1, r7
 8005b2e:	0028      	movs	r0, r5
 8005b30:	f7ff ffc6 	bl	8005ac0 <sbrk_aligned>
 8005b34:	0004      	movs	r4, r0
 8005b36:	1c43      	adds	r3, r0, #1
 8005b38:	d15f      	bne.n	8005bfa <_malloc_r+0xf6>
 8005b3a:	6834      	ldr	r4, [r6, #0]
 8005b3c:	9400      	str	r4, [sp, #0]
 8005b3e:	9b00      	ldr	r3, [sp, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d14a      	bne.n	8005bda <_malloc_r+0xd6>
 8005b44:	2c00      	cmp	r4, #0
 8005b46:	d052      	beq.n	8005bee <_malloc_r+0xea>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	0028      	movs	r0, r5
 8005b4c:	18e3      	adds	r3, r4, r3
 8005b4e:	9900      	ldr	r1, [sp, #0]
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	f000 feed 	bl	8006930 <_sbrk_r>
 8005b56:	9b01      	ldr	r3, [sp, #4]
 8005b58:	4283      	cmp	r3, r0
 8005b5a:	d148      	bne.n	8005bee <_malloc_r+0xea>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	0028      	movs	r0, r5
 8005b60:	1aff      	subs	r7, r7, r3
 8005b62:	0039      	movs	r1, r7
 8005b64:	f7ff ffac 	bl	8005ac0 <sbrk_aligned>
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d040      	beq.n	8005bee <_malloc_r+0xea>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	19db      	adds	r3, r3, r7
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	6833      	ldr	r3, [r6, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	d133      	bne.n	8005be2 <_malloc_r+0xde>
 8005b7a:	9b00      	ldr	r3, [sp, #0]
 8005b7c:	6033      	str	r3, [r6, #0]
 8005b7e:	e019      	b.n	8005bb4 <_malloc_r+0xb0>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dac9      	bge.n	8005b18 <_malloc_r+0x14>
 8005b84:	230c      	movs	r3, #12
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	2000      	movs	r0, #0
 8005b8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b8c:	6821      	ldr	r1, [r4, #0]
 8005b8e:	1bc9      	subs	r1, r1, r7
 8005b90:	d420      	bmi.n	8005bd4 <_malloc_r+0xd0>
 8005b92:	290b      	cmp	r1, #11
 8005b94:	d90a      	bls.n	8005bac <_malloc_r+0xa8>
 8005b96:	19e2      	adds	r2, r4, r7
 8005b98:	6027      	str	r7, [r4, #0]
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	d104      	bne.n	8005ba8 <_malloc_r+0xa4>
 8005b9e:	6032      	str	r2, [r6, #0]
 8005ba0:	6863      	ldr	r3, [r4, #4]
 8005ba2:	6011      	str	r1, [r2, #0]
 8005ba4:	6053      	str	r3, [r2, #4]
 8005ba6:	e005      	b.n	8005bb4 <_malloc_r+0xb0>
 8005ba8:	605a      	str	r2, [r3, #4]
 8005baa:	e7f9      	b.n	8005ba0 <_malloc_r+0x9c>
 8005bac:	6862      	ldr	r2, [r4, #4]
 8005bae:	42a3      	cmp	r3, r4
 8005bb0:	d10e      	bne.n	8005bd0 <_malloc_r+0xcc>
 8005bb2:	6032      	str	r2, [r6, #0]
 8005bb4:	0028      	movs	r0, r5
 8005bb6:	f000 f82d 	bl	8005c14 <__malloc_unlock>
 8005bba:	0020      	movs	r0, r4
 8005bbc:	2207      	movs	r2, #7
 8005bbe:	300b      	adds	r0, #11
 8005bc0:	1d23      	adds	r3, r4, #4
 8005bc2:	4390      	bics	r0, r2
 8005bc4:	1ac2      	subs	r2, r0, r3
 8005bc6:	4298      	cmp	r0, r3
 8005bc8:	d0df      	beq.n	8005b8a <_malloc_r+0x86>
 8005bca:	1a1b      	subs	r3, r3, r0
 8005bcc:	50a3      	str	r3, [r4, r2]
 8005bce:	e7dc      	b.n	8005b8a <_malloc_r+0x86>
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	e7ef      	b.n	8005bb4 <_malloc_r+0xb0>
 8005bd4:	0023      	movs	r3, r4
 8005bd6:	6864      	ldr	r4, [r4, #4]
 8005bd8:	e7a6      	b.n	8005b28 <_malloc_r+0x24>
 8005bda:	9c00      	ldr	r4, [sp, #0]
 8005bdc:	6863      	ldr	r3, [r4, #4]
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	e7ad      	b.n	8005b3e <_malloc_r+0x3a>
 8005be2:	001a      	movs	r2, r3
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	42a3      	cmp	r3, r4
 8005be8:	d1fb      	bne.n	8005be2 <_malloc_r+0xde>
 8005bea:	2300      	movs	r3, #0
 8005bec:	e7da      	b.n	8005ba4 <_malloc_r+0xa0>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	0028      	movs	r0, r5
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f000 f80e 	bl	8005c14 <__malloc_unlock>
 8005bf8:	e7c6      	b.n	8005b88 <_malloc_r+0x84>
 8005bfa:	6007      	str	r7, [r0, #0]
 8005bfc:	e7da      	b.n	8005bb4 <_malloc_r+0xb0>
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	20000de4 	.word	0x20000de4

08005c04 <__malloc_lock>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4802      	ldr	r0, [pc, #8]	@ (8005c10 <__malloc_lock+0xc>)
 8005c08:	f7ff ff04 	bl	8005a14 <__retarget_lock_acquire_recursive>
 8005c0c:	bd10      	pop	{r4, pc}
 8005c0e:	46c0      	nop			@ (mov r8, r8)
 8005c10:	20000ddc 	.word	0x20000ddc

08005c14 <__malloc_unlock>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	4802      	ldr	r0, [pc, #8]	@ (8005c20 <__malloc_unlock+0xc>)
 8005c18:	f7ff fefd 	bl	8005a16 <__retarget_lock_release_recursive>
 8005c1c:	bd10      	pop	{r4, pc}
 8005c1e:	46c0      	nop			@ (mov r8, r8)
 8005c20:	20000ddc 	.word	0x20000ddc

08005c24 <__ssputs_r>:
 8005c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c26:	688e      	ldr	r6, [r1, #8]
 8005c28:	b085      	sub	sp, #20
 8005c2a:	001f      	movs	r7, r3
 8005c2c:	000c      	movs	r4, r1
 8005c2e:	680b      	ldr	r3, [r1, #0]
 8005c30:	9002      	str	r0, [sp, #8]
 8005c32:	9203      	str	r2, [sp, #12]
 8005c34:	42be      	cmp	r6, r7
 8005c36:	d830      	bhi.n	8005c9a <__ssputs_r+0x76>
 8005c38:	210c      	movs	r1, #12
 8005c3a:	5e62      	ldrsh	r2, [r4, r1]
 8005c3c:	2190      	movs	r1, #144	@ 0x90
 8005c3e:	00c9      	lsls	r1, r1, #3
 8005c40:	420a      	tst	r2, r1
 8005c42:	d028      	beq.n	8005c96 <__ssputs_r+0x72>
 8005c44:	2003      	movs	r0, #3
 8005c46:	6921      	ldr	r1, [r4, #16]
 8005c48:	1a5b      	subs	r3, r3, r1
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	6963      	ldr	r3, [r4, #20]
 8005c4e:	4343      	muls	r3, r0
 8005c50:	9801      	ldr	r0, [sp, #4]
 8005c52:	0fdd      	lsrs	r5, r3, #31
 8005c54:	18ed      	adds	r5, r5, r3
 8005c56:	1c7b      	adds	r3, r7, #1
 8005c58:	181b      	adds	r3, r3, r0
 8005c5a:	106d      	asrs	r5, r5, #1
 8005c5c:	42ab      	cmp	r3, r5
 8005c5e:	d900      	bls.n	8005c62 <__ssputs_r+0x3e>
 8005c60:	001d      	movs	r5, r3
 8005c62:	0552      	lsls	r2, r2, #21
 8005c64:	d528      	bpl.n	8005cb8 <__ssputs_r+0x94>
 8005c66:	0029      	movs	r1, r5
 8005c68:	9802      	ldr	r0, [sp, #8]
 8005c6a:	f7ff ff4b 	bl	8005b04 <_malloc_r>
 8005c6e:	1e06      	subs	r6, r0, #0
 8005c70:	d02c      	beq.n	8005ccc <__ssputs_r+0xa8>
 8005c72:	9a01      	ldr	r2, [sp, #4]
 8005c74:	6921      	ldr	r1, [r4, #16]
 8005c76:	f7ff fecf 	bl	8005a18 <memcpy>
 8005c7a:	89a2      	ldrh	r2, [r4, #12]
 8005c7c:	4b18      	ldr	r3, [pc, #96]	@ (8005ce0 <__ssputs_r+0xbc>)
 8005c7e:	401a      	ands	r2, r3
 8005c80:	2380      	movs	r3, #128	@ 0x80
 8005c82:	4313      	orrs	r3, r2
 8005c84:	81a3      	strh	r3, [r4, #12]
 8005c86:	9b01      	ldr	r3, [sp, #4]
 8005c88:	6126      	str	r6, [r4, #16]
 8005c8a:	18f6      	adds	r6, r6, r3
 8005c8c:	6026      	str	r6, [r4, #0]
 8005c8e:	003e      	movs	r6, r7
 8005c90:	6165      	str	r5, [r4, #20]
 8005c92:	1aed      	subs	r5, r5, r3
 8005c94:	60a5      	str	r5, [r4, #8]
 8005c96:	42be      	cmp	r6, r7
 8005c98:	d900      	bls.n	8005c9c <__ssputs_r+0x78>
 8005c9a:	003e      	movs	r6, r7
 8005c9c:	0032      	movs	r2, r6
 8005c9e:	9903      	ldr	r1, [sp, #12]
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	f000 fe31 	bl	8006908 <memmove>
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	68a3      	ldr	r3, [r4, #8]
 8005caa:	1b9b      	subs	r3, r3, r6
 8005cac:	60a3      	str	r3, [r4, #8]
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	199b      	adds	r3, r3, r6
 8005cb2:	6023      	str	r3, [r4, #0]
 8005cb4:	b005      	add	sp, #20
 8005cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb8:	002a      	movs	r2, r5
 8005cba:	9802      	ldr	r0, [sp, #8]
 8005cbc:	f000 fe55 	bl	800696a <_realloc_r>
 8005cc0:	1e06      	subs	r6, r0, #0
 8005cc2:	d1e0      	bne.n	8005c86 <__ssputs_r+0x62>
 8005cc4:	6921      	ldr	r1, [r4, #16]
 8005cc6:	9802      	ldr	r0, [sp, #8]
 8005cc8:	f7ff feb0 	bl	8005a2c <_free_r>
 8005ccc:	230c      	movs	r3, #12
 8005cce:	2001      	movs	r0, #1
 8005cd0:	9a02      	ldr	r2, [sp, #8]
 8005cd2:	4240      	negs	r0, r0
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	89a2      	ldrh	r2, [r4, #12]
 8005cd8:	3334      	adds	r3, #52	@ 0x34
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	e7e9      	b.n	8005cb4 <__ssputs_r+0x90>
 8005ce0:	fffffb7f 	.word	0xfffffb7f

08005ce4 <_svfiprintf_r>:
 8005ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ce6:	b0a1      	sub	sp, #132	@ 0x84
 8005ce8:	9003      	str	r0, [sp, #12]
 8005cea:	001d      	movs	r5, r3
 8005cec:	898b      	ldrh	r3, [r1, #12]
 8005cee:	000f      	movs	r7, r1
 8005cf0:	0016      	movs	r6, r2
 8005cf2:	061b      	lsls	r3, r3, #24
 8005cf4:	d511      	bpl.n	8005d1a <_svfiprintf_r+0x36>
 8005cf6:	690b      	ldr	r3, [r1, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10e      	bne.n	8005d1a <_svfiprintf_r+0x36>
 8005cfc:	2140      	movs	r1, #64	@ 0x40
 8005cfe:	f7ff ff01 	bl	8005b04 <_malloc_r>
 8005d02:	6038      	str	r0, [r7, #0]
 8005d04:	6138      	str	r0, [r7, #16]
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d105      	bne.n	8005d16 <_svfiprintf_r+0x32>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	9a03      	ldr	r2, [sp, #12]
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	2001      	movs	r0, #1
 8005d12:	4240      	negs	r0, r0
 8005d14:	e0cf      	b.n	8005eb6 <_svfiprintf_r+0x1d2>
 8005d16:	2340      	movs	r3, #64	@ 0x40
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	ac08      	add	r4, sp, #32
 8005d1e:	6163      	str	r3, [r4, #20]
 8005d20:	3320      	adds	r3, #32
 8005d22:	7663      	strb	r3, [r4, #25]
 8005d24:	3310      	adds	r3, #16
 8005d26:	76a3      	strb	r3, [r4, #26]
 8005d28:	9507      	str	r5, [sp, #28]
 8005d2a:	0035      	movs	r5, r6
 8005d2c:	782b      	ldrb	r3, [r5, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <_svfiprintf_r+0x52>
 8005d32:	2b25      	cmp	r3, #37	@ 0x25
 8005d34:	d148      	bne.n	8005dc8 <_svfiprintf_r+0xe4>
 8005d36:	1bab      	subs	r3, r5, r6
 8005d38:	9305      	str	r3, [sp, #20]
 8005d3a:	42b5      	cmp	r5, r6
 8005d3c:	d00b      	beq.n	8005d56 <_svfiprintf_r+0x72>
 8005d3e:	0032      	movs	r2, r6
 8005d40:	0039      	movs	r1, r7
 8005d42:	9803      	ldr	r0, [sp, #12]
 8005d44:	f7ff ff6e 	bl	8005c24 <__ssputs_r>
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d100      	bne.n	8005d4e <_svfiprintf_r+0x6a>
 8005d4c:	e0ae      	b.n	8005eac <_svfiprintf_r+0x1c8>
 8005d4e:	6963      	ldr	r3, [r4, #20]
 8005d50:	9a05      	ldr	r2, [sp, #20]
 8005d52:	189b      	adds	r3, r3, r2
 8005d54:	6163      	str	r3, [r4, #20]
 8005d56:	782b      	ldrb	r3, [r5, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d100      	bne.n	8005d5e <_svfiprintf_r+0x7a>
 8005d5c:	e0a6      	b.n	8005eac <_svfiprintf_r+0x1c8>
 8005d5e:	2201      	movs	r2, #1
 8005d60:	2300      	movs	r3, #0
 8005d62:	4252      	negs	r2, r2
 8005d64:	6062      	str	r2, [r4, #4]
 8005d66:	a904      	add	r1, sp, #16
 8005d68:	3254      	adds	r2, #84	@ 0x54
 8005d6a:	1852      	adds	r2, r2, r1
 8005d6c:	1c6e      	adds	r6, r5, #1
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	60e3      	str	r3, [r4, #12]
 8005d72:	60a3      	str	r3, [r4, #8]
 8005d74:	7013      	strb	r3, [r2, #0]
 8005d76:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005d78:	4b54      	ldr	r3, [pc, #336]	@ (8005ecc <_svfiprintf_r+0x1e8>)
 8005d7a:	2205      	movs	r2, #5
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	7831      	ldrb	r1, [r6, #0]
 8005d80:	9305      	str	r3, [sp, #20]
 8005d82:	f000 fde7 	bl	8006954 <memchr>
 8005d86:	1c75      	adds	r5, r6, #1
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d11f      	bne.n	8005dcc <_svfiprintf_r+0xe8>
 8005d8c:	6822      	ldr	r2, [r4, #0]
 8005d8e:	06d3      	lsls	r3, r2, #27
 8005d90:	d504      	bpl.n	8005d9c <_svfiprintf_r+0xb8>
 8005d92:	2353      	movs	r3, #83	@ 0x53
 8005d94:	a904      	add	r1, sp, #16
 8005d96:	185b      	adds	r3, r3, r1
 8005d98:	2120      	movs	r1, #32
 8005d9a:	7019      	strb	r1, [r3, #0]
 8005d9c:	0713      	lsls	r3, r2, #28
 8005d9e:	d504      	bpl.n	8005daa <_svfiprintf_r+0xc6>
 8005da0:	2353      	movs	r3, #83	@ 0x53
 8005da2:	a904      	add	r1, sp, #16
 8005da4:	185b      	adds	r3, r3, r1
 8005da6:	212b      	movs	r1, #43	@ 0x2b
 8005da8:	7019      	strb	r1, [r3, #0]
 8005daa:	7833      	ldrb	r3, [r6, #0]
 8005dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dae:	d016      	beq.n	8005dde <_svfiprintf_r+0xfa>
 8005db0:	0035      	movs	r5, r6
 8005db2:	2100      	movs	r1, #0
 8005db4:	200a      	movs	r0, #10
 8005db6:	68e3      	ldr	r3, [r4, #12]
 8005db8:	782a      	ldrb	r2, [r5, #0]
 8005dba:	1c6e      	adds	r6, r5, #1
 8005dbc:	3a30      	subs	r2, #48	@ 0x30
 8005dbe:	2a09      	cmp	r2, #9
 8005dc0:	d950      	bls.n	8005e64 <_svfiprintf_r+0x180>
 8005dc2:	2900      	cmp	r1, #0
 8005dc4:	d111      	bne.n	8005dea <_svfiprintf_r+0x106>
 8005dc6:	e017      	b.n	8005df8 <_svfiprintf_r+0x114>
 8005dc8:	3501      	adds	r5, #1
 8005dca:	e7af      	b.n	8005d2c <_svfiprintf_r+0x48>
 8005dcc:	9b05      	ldr	r3, [sp, #20]
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	1ac0      	subs	r0, r0, r3
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4083      	lsls	r3, r0
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	002e      	movs	r6, r5
 8005dda:	6023      	str	r3, [r4, #0]
 8005ddc:	e7cc      	b.n	8005d78 <_svfiprintf_r+0x94>
 8005dde:	9b07      	ldr	r3, [sp, #28]
 8005de0:	1d19      	adds	r1, r3, #4
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	9107      	str	r1, [sp, #28]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	db01      	blt.n	8005dee <_svfiprintf_r+0x10a>
 8005dea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dec:	e004      	b.n	8005df8 <_svfiprintf_r+0x114>
 8005dee:	425b      	negs	r3, r3
 8005df0:	60e3      	str	r3, [r4, #12]
 8005df2:	2302      	movs	r3, #2
 8005df4:	4313      	orrs	r3, r2
 8005df6:	6023      	str	r3, [r4, #0]
 8005df8:	782b      	ldrb	r3, [r5, #0]
 8005dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dfc:	d10c      	bne.n	8005e18 <_svfiprintf_r+0x134>
 8005dfe:	786b      	ldrb	r3, [r5, #1]
 8005e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e02:	d134      	bne.n	8005e6e <_svfiprintf_r+0x18a>
 8005e04:	9b07      	ldr	r3, [sp, #28]
 8005e06:	3502      	adds	r5, #2
 8005e08:	1d1a      	adds	r2, r3, #4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	9207      	str	r2, [sp, #28]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	da01      	bge.n	8005e16 <_svfiprintf_r+0x132>
 8005e12:	2301      	movs	r3, #1
 8005e14:	425b      	negs	r3, r3
 8005e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e18:	4e2d      	ldr	r6, [pc, #180]	@ (8005ed0 <_svfiprintf_r+0x1ec>)
 8005e1a:	2203      	movs	r2, #3
 8005e1c:	0030      	movs	r0, r6
 8005e1e:	7829      	ldrb	r1, [r5, #0]
 8005e20:	f000 fd98 	bl	8006954 <memchr>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d006      	beq.n	8005e36 <_svfiprintf_r+0x152>
 8005e28:	2340      	movs	r3, #64	@ 0x40
 8005e2a:	1b80      	subs	r0, r0, r6
 8005e2c:	4083      	lsls	r3, r0
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	3501      	adds	r5, #1
 8005e32:	4313      	orrs	r3, r2
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	7829      	ldrb	r1, [r5, #0]
 8005e38:	2206      	movs	r2, #6
 8005e3a:	4826      	ldr	r0, [pc, #152]	@ (8005ed4 <_svfiprintf_r+0x1f0>)
 8005e3c:	1c6e      	adds	r6, r5, #1
 8005e3e:	7621      	strb	r1, [r4, #24]
 8005e40:	f000 fd88 	bl	8006954 <memchr>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d038      	beq.n	8005eba <_svfiprintf_r+0x1d6>
 8005e48:	4b23      	ldr	r3, [pc, #140]	@ (8005ed8 <_svfiprintf_r+0x1f4>)
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d122      	bne.n	8005e94 <_svfiprintf_r+0x1b0>
 8005e4e:	2207      	movs	r2, #7
 8005e50:	9b07      	ldr	r3, [sp, #28]
 8005e52:	3307      	adds	r3, #7
 8005e54:	4393      	bics	r3, r2
 8005e56:	3308      	adds	r3, #8
 8005e58:	9307      	str	r3, [sp, #28]
 8005e5a:	6963      	ldr	r3, [r4, #20]
 8005e5c:	9a04      	ldr	r2, [sp, #16]
 8005e5e:	189b      	adds	r3, r3, r2
 8005e60:	6163      	str	r3, [r4, #20]
 8005e62:	e762      	b.n	8005d2a <_svfiprintf_r+0x46>
 8005e64:	4343      	muls	r3, r0
 8005e66:	0035      	movs	r5, r6
 8005e68:	2101      	movs	r1, #1
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	e7a4      	b.n	8005db8 <_svfiprintf_r+0xd4>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	200a      	movs	r0, #10
 8005e72:	0019      	movs	r1, r3
 8005e74:	3501      	adds	r5, #1
 8005e76:	6063      	str	r3, [r4, #4]
 8005e78:	782a      	ldrb	r2, [r5, #0]
 8005e7a:	1c6e      	adds	r6, r5, #1
 8005e7c:	3a30      	subs	r2, #48	@ 0x30
 8005e7e:	2a09      	cmp	r2, #9
 8005e80:	d903      	bls.n	8005e8a <_svfiprintf_r+0x1a6>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0c8      	beq.n	8005e18 <_svfiprintf_r+0x134>
 8005e86:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e88:	e7c6      	b.n	8005e18 <_svfiprintf_r+0x134>
 8005e8a:	4341      	muls	r1, r0
 8005e8c:	0035      	movs	r5, r6
 8005e8e:	2301      	movs	r3, #1
 8005e90:	1889      	adds	r1, r1, r2
 8005e92:	e7f1      	b.n	8005e78 <_svfiprintf_r+0x194>
 8005e94:	aa07      	add	r2, sp, #28
 8005e96:	9200      	str	r2, [sp, #0]
 8005e98:	0021      	movs	r1, r4
 8005e9a:	003a      	movs	r2, r7
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005edc <_svfiprintf_r+0x1f8>)
 8005e9e:	9803      	ldr	r0, [sp, #12]
 8005ea0:	e000      	b.n	8005ea4 <_svfiprintf_r+0x1c0>
 8005ea2:	bf00      	nop
 8005ea4:	9004      	str	r0, [sp, #16]
 8005ea6:	9b04      	ldr	r3, [sp, #16]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	d1d6      	bne.n	8005e5a <_svfiprintf_r+0x176>
 8005eac:	89bb      	ldrh	r3, [r7, #12]
 8005eae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005eb0:	065b      	lsls	r3, r3, #25
 8005eb2:	d500      	bpl.n	8005eb6 <_svfiprintf_r+0x1d2>
 8005eb4:	e72c      	b.n	8005d10 <_svfiprintf_r+0x2c>
 8005eb6:	b021      	add	sp, #132	@ 0x84
 8005eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eba:	aa07      	add	r2, sp, #28
 8005ebc:	9200      	str	r2, [sp, #0]
 8005ebe:	0021      	movs	r1, r4
 8005ec0:	003a      	movs	r2, r7
 8005ec2:	4b06      	ldr	r3, [pc, #24]	@ (8005edc <_svfiprintf_r+0x1f8>)
 8005ec4:	9803      	ldr	r0, [sp, #12]
 8005ec6:	f000 fa39 	bl	800633c <_printf_i>
 8005eca:	e7eb      	b.n	8005ea4 <_svfiprintf_r+0x1c0>
 8005ecc:	08006d0c 	.word	0x08006d0c
 8005ed0:	08006d12 	.word	0x08006d12
 8005ed4:	08006d16 	.word	0x08006d16
 8005ed8:	00000000 	.word	0x00000000
 8005edc:	08005c25 	.word	0x08005c25

08005ee0 <_sungetc_r>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	0014      	movs	r4, r2
 8005ee4:	1c4b      	adds	r3, r1, #1
 8005ee6:	d103      	bne.n	8005ef0 <_sungetc_r+0x10>
 8005ee8:	2501      	movs	r5, #1
 8005eea:	426d      	negs	r5, r5
 8005eec:	0028      	movs	r0, r5
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	8993      	ldrh	r3, [r2, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	4393      	bics	r3, r2
 8005ef6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005ef8:	81a3      	strh	r3, [r4, #12]
 8005efa:	b2ce      	uxtb	r6, r1
 8005efc:	6863      	ldr	r3, [r4, #4]
 8005efe:	b2cd      	uxtb	r5, r1
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	d010      	beq.n	8005f26 <_sungetc_r+0x46>
 8005f04:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005f06:	429a      	cmp	r2, r3
 8005f08:	dd07      	ble.n	8005f1a <_sungetc_r+0x3a>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	701e      	strb	r6, [r3, #0]
 8005f12:	6863      	ldr	r3, [r4, #4]
 8005f14:	3301      	adds	r3, #1
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	e7e8      	b.n	8005eec <_sungetc_r+0xc>
 8005f1a:	0021      	movs	r1, r4
 8005f1c:	f000 fcb6 	bl	800688c <__submore>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d0f2      	beq.n	8005f0a <_sungetc_r+0x2a>
 8005f24:	e7e0      	b.n	8005ee8 <_sungetc_r+0x8>
 8005f26:	6921      	ldr	r1, [r4, #16]
 8005f28:	6822      	ldr	r2, [r4, #0]
 8005f2a:	2900      	cmp	r1, #0
 8005f2c:	d007      	beq.n	8005f3e <_sungetc_r+0x5e>
 8005f2e:	4291      	cmp	r1, r2
 8005f30:	d205      	bcs.n	8005f3e <_sungetc_r+0x5e>
 8005f32:	1e51      	subs	r1, r2, #1
 8005f34:	7808      	ldrb	r0, [r1, #0]
 8005f36:	42a8      	cmp	r0, r5
 8005f38:	d101      	bne.n	8005f3e <_sungetc_r+0x5e>
 8005f3a:	6021      	str	r1, [r4, #0]
 8005f3c:	e7ea      	b.n	8005f14 <_sungetc_r+0x34>
 8005f3e:	6423      	str	r3, [r4, #64]	@ 0x40
 8005f40:	0023      	movs	r3, r4
 8005f42:	3344      	adds	r3, #68	@ 0x44
 8005f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f46:	2303      	movs	r3, #3
 8005f48:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005f4a:	0023      	movs	r3, r4
 8005f4c:	3346      	adds	r3, #70	@ 0x46
 8005f4e:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8005f50:	701e      	strb	r6, [r3, #0]
 8005f52:	6023      	str	r3, [r4, #0]
 8005f54:	2301      	movs	r3, #1
 8005f56:	e7de      	b.n	8005f16 <_sungetc_r+0x36>

08005f58 <__ssrefill_r>:
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	000c      	movs	r4, r1
 8005f5c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005f5e:	2900      	cmp	r1, #0
 8005f60:	d00e      	beq.n	8005f80 <__ssrefill_r+0x28>
 8005f62:	0023      	movs	r3, r4
 8005f64:	3344      	adds	r3, #68	@ 0x44
 8005f66:	4299      	cmp	r1, r3
 8005f68:	d001      	beq.n	8005f6e <__ssrefill_r+0x16>
 8005f6a:	f7ff fd5f 	bl	8005a2c <_free_r>
 8005f6e:	2000      	movs	r0, #0
 8005f70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f72:	6360      	str	r0, [r4, #52]	@ 0x34
 8005f74:	6063      	str	r3, [r4, #4]
 8005f76:	4283      	cmp	r3, r0
 8005f78:	d002      	beq.n	8005f80 <__ssrefill_r+0x28>
 8005f7a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd10      	pop	{r4, pc}
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	2001      	movs	r0, #1
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	2300      	movs	r3, #0
 8005f88:	89a2      	ldrh	r2, [r4, #12]
 8005f8a:	6063      	str	r3, [r4, #4]
 8005f8c:	3320      	adds	r3, #32
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	4240      	negs	r0, r0
 8005f94:	e7f3      	b.n	8005f7e <__ssrefill_r+0x26>
	...

08005f98 <__ssvfiscanf_r>:
 8005f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f9a:	4caa      	ldr	r4, [pc, #680]	@ (8006244 <__ssvfiscanf_r+0x2ac>)
 8005f9c:	44a5      	add	sp, r4
 8005f9e:	000c      	movs	r4, r1
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	9001      	str	r0, [sp, #4]
 8005fa4:	20be      	movs	r0, #190	@ 0xbe
 8005fa6:	9146      	str	r1, [sp, #280]	@ 0x118
 8005fa8:	9147      	str	r1, [sp, #284]	@ 0x11c
 8005faa:	a903      	add	r1, sp, #12
 8005fac:	9148      	str	r1, [sp, #288]	@ 0x120
 8005fae:	49a6      	ldr	r1, [pc, #664]	@ (8006248 <__ssvfiscanf_r+0x2b0>)
 8005fb0:	0040      	lsls	r0, r0, #1
 8005fb2:	ad43      	add	r5, sp, #268	@ 0x10c
 8005fb4:	5029      	str	r1, [r5, r0]
 8005fb6:	49a5      	ldr	r1, [pc, #660]	@ (800624c <__ssvfiscanf_r+0x2b4>)
 8005fb8:	3004      	adds	r0, #4
 8005fba:	ad43      	add	r5, sp, #268	@ 0x10c
 8005fbc:	5029      	str	r1, [r5, r0]
 8005fbe:	9302      	str	r3, [sp, #8]
 8005fc0:	7813      	ldrb	r3, [r2, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d100      	bne.n	8005fc8 <__ssvfiscanf_r+0x30>
 8005fc6:	e13a      	b.n	800623e <__ssvfiscanf_r+0x2a6>
 8005fc8:	2108      	movs	r1, #8
 8005fca:	2708      	movs	r7, #8
 8005fcc:	4ea0      	ldr	r6, [pc, #640]	@ (8006250 <__ssvfiscanf_r+0x2b8>)
 8005fce:	1c55      	adds	r5, r2, #1
 8005fd0:	5cf0      	ldrb	r0, [r6, r3]
 8005fd2:	4001      	ands	r1, r0
 8005fd4:	4238      	tst	r0, r7
 8005fd6:	d01c      	beq.n	8006012 <__ssvfiscanf_r+0x7a>
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	dd0f      	ble.n	8005ffe <__ssvfiscanf_r+0x66>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	781a      	ldrb	r2, [r3, #0]
 8005fe2:	5cb2      	ldrb	r2, [r6, r2]
 8005fe4:	423a      	tst	r2, r7
 8005fe6:	d101      	bne.n	8005fec <__ssvfiscanf_r+0x54>
 8005fe8:	002a      	movs	r2, r5
 8005fea:	e7e9      	b.n	8005fc0 <__ssvfiscanf_r+0x28>
 8005fec:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8005fee:	3301      	adds	r3, #1
 8005ff0:	3201      	adds	r2, #1
 8005ff2:	9247      	str	r2, [sp, #284]	@ 0x11c
 8005ff4:	6862      	ldr	r2, [r4, #4]
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	3a01      	subs	r2, #1
 8005ffa:	6062      	str	r2, [r4, #4]
 8005ffc:	e7ec      	b.n	8005fd8 <__ssvfiscanf_r+0x40>
 8005ffe:	22c0      	movs	r2, #192	@ 0xc0
 8006000:	ab43      	add	r3, sp, #268	@ 0x10c
 8006002:	0052      	lsls	r2, r2, #1
 8006004:	0021      	movs	r1, r4
 8006006:	589b      	ldr	r3, [r3, r2]
 8006008:	9801      	ldr	r0, [sp, #4]
 800600a:	4798      	blx	r3
 800600c:	2800      	cmp	r0, #0
 800600e:	d0e6      	beq.n	8005fde <__ssvfiscanf_r+0x46>
 8006010:	e7ea      	b.n	8005fe8 <__ssvfiscanf_r+0x50>
 8006012:	001e      	movs	r6, r3
 8006014:	2b25      	cmp	r3, #37	@ 0x25
 8006016:	d160      	bne.n	80060da <__ssvfiscanf_r+0x142>
 8006018:	9145      	str	r1, [sp, #276]	@ 0x114
 800601a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800601c:	7853      	ldrb	r3, [r2, #1]
 800601e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006020:	d102      	bne.n	8006028 <__ssvfiscanf_r+0x90>
 8006022:	3b1a      	subs	r3, #26
 8006024:	9343      	str	r3, [sp, #268]	@ 0x10c
 8006026:	1c95      	adds	r5, r2, #2
 8006028:	002e      	movs	r6, r5
 800602a:	220a      	movs	r2, #10
 800602c:	7831      	ldrb	r1, [r6, #0]
 800602e:	1c75      	adds	r5, r6, #1
 8006030:	000b      	movs	r3, r1
 8006032:	3b30      	subs	r3, #48	@ 0x30
 8006034:	2b09      	cmp	r3, #9
 8006036:	d91d      	bls.n	8006074 <__ssvfiscanf_r+0xdc>
 8006038:	4f86      	ldr	r7, [pc, #536]	@ (8006254 <__ssvfiscanf_r+0x2bc>)
 800603a:	2203      	movs	r2, #3
 800603c:	0038      	movs	r0, r7
 800603e:	f000 fc89 	bl	8006954 <memchr>
 8006042:	2800      	cmp	r0, #0
 8006044:	d006      	beq.n	8006054 <__ssvfiscanf_r+0xbc>
 8006046:	2301      	movs	r3, #1
 8006048:	1bc0      	subs	r0, r0, r7
 800604a:	4083      	lsls	r3, r0
 800604c:	002e      	movs	r6, r5
 800604e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8006050:	4313      	orrs	r3, r2
 8006052:	9343      	str	r3, [sp, #268]	@ 0x10c
 8006054:	1c75      	adds	r5, r6, #1
 8006056:	7836      	ldrb	r6, [r6, #0]
 8006058:	2e78      	cmp	r6, #120	@ 0x78
 800605a:	d806      	bhi.n	800606a <__ssvfiscanf_r+0xd2>
 800605c:	2e57      	cmp	r6, #87	@ 0x57
 800605e:	d810      	bhi.n	8006082 <__ssvfiscanf_r+0xea>
 8006060:	2e25      	cmp	r6, #37	@ 0x25
 8006062:	d03a      	beq.n	80060da <__ssvfiscanf_r+0x142>
 8006064:	d834      	bhi.n	80060d0 <__ssvfiscanf_r+0x138>
 8006066:	2e00      	cmp	r6, #0
 8006068:	d055      	beq.n	8006116 <__ssvfiscanf_r+0x17e>
 800606a:	2303      	movs	r3, #3
 800606c:	9349      	str	r3, [sp, #292]	@ 0x124
 800606e:	3307      	adds	r3, #7
 8006070:	9344      	str	r3, [sp, #272]	@ 0x110
 8006072:	e069      	b.n	8006148 <__ssvfiscanf_r+0x1b0>
 8006074:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006076:	002e      	movs	r6, r5
 8006078:	4353      	muls	r3, r2
 800607a:	3b30      	subs	r3, #48	@ 0x30
 800607c:	185b      	adds	r3, r3, r1
 800607e:	9345      	str	r3, [sp, #276]	@ 0x114
 8006080:	e7d4      	b.n	800602c <__ssvfiscanf_r+0x94>
 8006082:	0030      	movs	r0, r6
 8006084:	3858      	subs	r0, #88	@ 0x58
 8006086:	2820      	cmp	r0, #32
 8006088:	d8ef      	bhi.n	800606a <__ssvfiscanf_r+0xd2>
 800608a:	f7fa f845 	bl	8000118 <__gnu_thumb1_case_shi>
 800608e:	004b      	.short	0x004b
 8006090:	ffeeffee 	.word	0xffeeffee
 8006094:	ffee007d 	.word	0xffee007d
 8006098:	ffeeffee 	.word	0xffeeffee
 800609c:	ffeeffee 	.word	0xffeeffee
 80060a0:	ffeeffee 	.word	0xffeeffee
 80060a4:	007b0088 	.word	0x007b0088
 80060a8:	00240024 	.word	0x00240024
 80060ac:	ffee0024 	.word	0xffee0024
 80060b0:	ffee0055 	.word	0xffee0055
 80060b4:	ffeeffee 	.word	0xffeeffee
 80060b8:	0090ffee 	.word	0x0090ffee
 80060bc:	00470059 	.word	0x00470059
 80060c0:	ffeeffee 	.word	0xffeeffee
 80060c4:	ffee008e 	.word	0xffee008e
 80060c8:	ffee007b 	.word	0xffee007b
 80060cc:	004bffee 	.word	0x004bffee
 80060d0:	3e45      	subs	r6, #69	@ 0x45
 80060d2:	2e02      	cmp	r6, #2
 80060d4:	d8c9      	bhi.n	800606a <__ssvfiscanf_r+0xd2>
 80060d6:	2305      	movs	r3, #5
 80060d8:	e035      	b.n	8006146 <__ssvfiscanf_r+0x1ae>
 80060da:	6863      	ldr	r3, [r4, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	dd0d      	ble.n	80060fc <__ssvfiscanf_r+0x164>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	781a      	ldrb	r2, [r3, #0]
 80060e4:	42b2      	cmp	r2, r6
 80060e6:	d000      	beq.n	80060ea <__ssvfiscanf_r+0x152>
 80060e8:	e0a9      	b.n	800623e <__ssvfiscanf_r+0x2a6>
 80060ea:	3301      	adds	r3, #1
 80060ec:	6862      	ldr	r2, [r4, #4]
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80060f2:	3a01      	subs	r2, #1
 80060f4:	3301      	adds	r3, #1
 80060f6:	6062      	str	r2, [r4, #4]
 80060f8:	9347      	str	r3, [sp, #284]	@ 0x11c
 80060fa:	e775      	b.n	8005fe8 <__ssvfiscanf_r+0x50>
 80060fc:	23c0      	movs	r3, #192	@ 0xc0
 80060fe:	aa43      	add	r2, sp, #268	@ 0x10c
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	0021      	movs	r1, r4
 8006104:	58d3      	ldr	r3, [r2, r3]
 8006106:	9801      	ldr	r0, [sp, #4]
 8006108:	4798      	blx	r3
 800610a:	2800      	cmp	r0, #0
 800610c:	d0e8      	beq.n	80060e0 <__ssvfiscanf_r+0x148>
 800610e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8006110:	2800      	cmp	r0, #0
 8006112:	d000      	beq.n	8006116 <__ssvfiscanf_r+0x17e>
 8006114:	e08b      	b.n	800622e <__ssvfiscanf_r+0x296>
 8006116:	2001      	movs	r0, #1
 8006118:	4240      	negs	r0, r0
 800611a:	e08c      	b.n	8006236 <__ssvfiscanf_r+0x29e>
 800611c:	2320      	movs	r3, #32
 800611e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8006120:	4313      	orrs	r3, r2
 8006122:	9343      	str	r3, [sp, #268]	@ 0x10c
 8006124:	2380      	movs	r3, #128	@ 0x80
 8006126:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4313      	orrs	r3, r2
 800612c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800612e:	2310      	movs	r3, #16
 8006130:	9344      	str	r3, [sp, #272]	@ 0x110
 8006132:	2e6e      	cmp	r6, #110	@ 0x6e
 8006134:	d902      	bls.n	800613c <__ssvfiscanf_r+0x1a4>
 8006136:	e005      	b.n	8006144 <__ssvfiscanf_r+0x1ac>
 8006138:	2300      	movs	r3, #0
 800613a:	9344      	str	r3, [sp, #272]	@ 0x110
 800613c:	2303      	movs	r3, #3
 800613e:	e002      	b.n	8006146 <__ssvfiscanf_r+0x1ae>
 8006140:	2308      	movs	r3, #8
 8006142:	9344      	str	r3, [sp, #272]	@ 0x110
 8006144:	2304      	movs	r3, #4
 8006146:	9349      	str	r3, [sp, #292]	@ 0x124
 8006148:	6863      	ldr	r3, [r4, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	dd3e      	ble.n	80061cc <__ssvfiscanf_r+0x234>
 800614e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006150:	065b      	lsls	r3, r3, #25
 8006152:	d408      	bmi.n	8006166 <__ssvfiscanf_r+0x1ce>
 8006154:	27c0      	movs	r7, #192	@ 0xc0
 8006156:	2608      	movs	r6, #8
 8006158:	007f      	lsls	r7, r7, #1
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	493c      	ldr	r1, [pc, #240]	@ (8006250 <__ssvfiscanf_r+0x2b8>)
 800615e:	781a      	ldrb	r2, [r3, #0]
 8006160:	5c8a      	ldrb	r2, [r1, r2]
 8006162:	4232      	tst	r2, r6
 8006164:	d13c      	bne.n	80061e0 <__ssvfiscanf_r+0x248>
 8006166:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8006168:	2b02      	cmp	r3, #2
 800616a:	dc4c      	bgt.n	8006206 <__ssvfiscanf_r+0x26e>
 800616c:	0022      	movs	r2, r4
 800616e:	9801      	ldr	r0, [sp, #4]
 8006170:	ab02      	add	r3, sp, #8
 8006172:	a943      	add	r1, sp, #268	@ 0x10c
 8006174:	f000 f9f0 	bl	8006558 <_scanf_chars>
 8006178:	2801      	cmp	r0, #1
 800617a:	d060      	beq.n	800623e <__ssvfiscanf_r+0x2a6>
 800617c:	2802      	cmp	r0, #2
 800617e:	d000      	beq.n	8006182 <__ssvfiscanf_r+0x1ea>
 8006180:	e732      	b.n	8005fe8 <__ssvfiscanf_r+0x50>
 8006182:	e7c4      	b.n	800610e <__ssvfiscanf_r+0x176>
 8006184:	230a      	movs	r3, #10
 8006186:	e7d3      	b.n	8006130 <__ssvfiscanf_r+0x198>
 8006188:	0029      	movs	r1, r5
 800618a:	a803      	add	r0, sp, #12
 800618c:	f000 fb44 	bl	8006818 <__sccl>
 8006190:	2340      	movs	r3, #64	@ 0x40
 8006192:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8006194:	0005      	movs	r5, r0
 8006196:	4313      	orrs	r3, r2
 8006198:	9343      	str	r3, [sp, #268]	@ 0x10c
 800619a:	2301      	movs	r3, #1
 800619c:	e7d3      	b.n	8006146 <__ssvfiscanf_r+0x1ae>
 800619e:	2340      	movs	r3, #64	@ 0x40
 80061a0:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80061a2:	4313      	orrs	r3, r2
 80061a4:	9343      	str	r3, [sp, #268]	@ 0x10c
 80061a6:	2300      	movs	r3, #0
 80061a8:	e7cd      	b.n	8006146 <__ssvfiscanf_r+0x1ae>
 80061aa:	2302      	movs	r3, #2
 80061ac:	e7cb      	b.n	8006146 <__ssvfiscanf_r+0x1ae>
 80061ae:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80061b0:	06d3      	lsls	r3, r2, #27
 80061b2:	d500      	bpl.n	80061b6 <__ssvfiscanf_r+0x21e>
 80061b4:	e718      	b.n	8005fe8 <__ssvfiscanf_r+0x50>
 80061b6:	9b02      	ldr	r3, [sp, #8]
 80061b8:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 80061ba:	1d18      	adds	r0, r3, #4
 80061bc:	9002      	str	r0, [sp, #8]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	07d6      	lsls	r6, r2, #31
 80061c2:	d501      	bpl.n	80061c8 <__ssvfiscanf_r+0x230>
 80061c4:	8019      	strh	r1, [r3, #0]
 80061c6:	e70f      	b.n	8005fe8 <__ssvfiscanf_r+0x50>
 80061c8:	6019      	str	r1, [r3, #0]
 80061ca:	e70d      	b.n	8005fe8 <__ssvfiscanf_r+0x50>
 80061cc:	23c0      	movs	r3, #192	@ 0xc0
 80061ce:	aa43      	add	r2, sp, #268	@ 0x10c
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	0021      	movs	r1, r4
 80061d4:	58d3      	ldr	r3, [r2, r3]
 80061d6:	9801      	ldr	r0, [sp, #4]
 80061d8:	4798      	blx	r3
 80061da:	2800      	cmp	r0, #0
 80061dc:	d0b7      	beq.n	800614e <__ssvfiscanf_r+0x1b6>
 80061de:	e796      	b.n	800610e <__ssvfiscanf_r+0x176>
 80061e0:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 80061e2:	3201      	adds	r2, #1
 80061e4:	9247      	str	r2, [sp, #284]	@ 0x11c
 80061e6:	6862      	ldr	r2, [r4, #4]
 80061e8:	3a01      	subs	r2, #1
 80061ea:	6062      	str	r2, [r4, #4]
 80061ec:	2a00      	cmp	r2, #0
 80061ee:	dd02      	ble.n	80061f6 <__ssvfiscanf_r+0x25e>
 80061f0:	3301      	adds	r3, #1
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	e7b1      	b.n	800615a <__ssvfiscanf_r+0x1c2>
 80061f6:	ab43      	add	r3, sp, #268	@ 0x10c
 80061f8:	0021      	movs	r1, r4
 80061fa:	59db      	ldr	r3, [r3, r7]
 80061fc:	9801      	ldr	r0, [sp, #4]
 80061fe:	4798      	blx	r3
 8006200:	2800      	cmp	r0, #0
 8006202:	d0aa      	beq.n	800615a <__ssvfiscanf_r+0x1c2>
 8006204:	e783      	b.n	800610e <__ssvfiscanf_r+0x176>
 8006206:	2b04      	cmp	r3, #4
 8006208:	dc06      	bgt.n	8006218 <__ssvfiscanf_r+0x280>
 800620a:	0022      	movs	r2, r4
 800620c:	9801      	ldr	r0, [sp, #4]
 800620e:	ab02      	add	r3, sp, #8
 8006210:	a943      	add	r1, sp, #268	@ 0x10c
 8006212:	f000 fa01 	bl	8006618 <_scanf_i>
 8006216:	e7af      	b.n	8006178 <__ssvfiscanf_r+0x1e0>
 8006218:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <__ssvfiscanf_r+0x2c0>)
 800621a:	2b00      	cmp	r3, #0
 800621c:	d100      	bne.n	8006220 <__ssvfiscanf_r+0x288>
 800621e:	e6e3      	b.n	8005fe8 <__ssvfiscanf_r+0x50>
 8006220:	0022      	movs	r2, r4
 8006222:	9801      	ldr	r0, [sp, #4]
 8006224:	ab02      	add	r3, sp, #8
 8006226:	a943      	add	r1, sp, #268	@ 0x10c
 8006228:	e000      	b.n	800622c <__ssvfiscanf_r+0x294>
 800622a:	bf00      	nop
 800622c:	e7a4      	b.n	8006178 <__ssvfiscanf_r+0x1e0>
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	065b      	lsls	r3, r3, #25
 8006232:	d500      	bpl.n	8006236 <__ssvfiscanf_r+0x29e>
 8006234:	e76f      	b.n	8006116 <__ssvfiscanf_r+0x17e>
 8006236:	23a5      	movs	r3, #165	@ 0xa5
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	449d      	add	sp, r3
 800623c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800623e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8006240:	e7f9      	b.n	8006236 <__ssvfiscanf_r+0x29e>
 8006242:	46c0      	nop			@ (mov r8, r8)
 8006244:	fffffd6c 	.word	0xfffffd6c
 8006248:	08005ee1 	.word	0x08005ee1
 800624c:	08005f59 	.word	0x08005f59
 8006250:	08006d5b 	.word	0x08006d5b
 8006254:	08006d12 	.word	0x08006d12
 8006258:	00000000 	.word	0x00000000

0800625c <_printf_common>:
 800625c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800625e:	0016      	movs	r6, r2
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	688a      	ldr	r2, [r1, #8]
 8006264:	690b      	ldr	r3, [r1, #16]
 8006266:	000c      	movs	r4, r1
 8006268:	9000      	str	r0, [sp, #0]
 800626a:	4293      	cmp	r3, r2
 800626c:	da00      	bge.n	8006270 <_printf_common+0x14>
 800626e:	0013      	movs	r3, r2
 8006270:	0022      	movs	r2, r4
 8006272:	6033      	str	r3, [r6, #0]
 8006274:	3243      	adds	r2, #67	@ 0x43
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	2a00      	cmp	r2, #0
 800627a:	d001      	beq.n	8006280 <_printf_common+0x24>
 800627c:	3301      	adds	r3, #1
 800627e:	6033      	str	r3, [r6, #0]
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	069b      	lsls	r3, r3, #26
 8006284:	d502      	bpl.n	800628c <_printf_common+0x30>
 8006286:	6833      	ldr	r3, [r6, #0]
 8006288:	3302      	adds	r3, #2
 800628a:	6033      	str	r3, [r6, #0]
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	2306      	movs	r3, #6
 8006290:	0015      	movs	r5, r2
 8006292:	401d      	ands	r5, r3
 8006294:	421a      	tst	r2, r3
 8006296:	d027      	beq.n	80062e8 <_printf_common+0x8c>
 8006298:	0023      	movs	r3, r4
 800629a:	3343      	adds	r3, #67	@ 0x43
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	1e5a      	subs	r2, r3, #1
 80062a0:	4193      	sbcs	r3, r2
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	0692      	lsls	r2, r2, #26
 80062a6:	d430      	bmi.n	800630a <_printf_common+0xae>
 80062a8:	0022      	movs	r2, r4
 80062aa:	9901      	ldr	r1, [sp, #4]
 80062ac:	9800      	ldr	r0, [sp, #0]
 80062ae:	9d08      	ldr	r5, [sp, #32]
 80062b0:	3243      	adds	r2, #67	@ 0x43
 80062b2:	47a8      	blx	r5
 80062b4:	3001      	adds	r0, #1
 80062b6:	d025      	beq.n	8006304 <_printf_common+0xa8>
 80062b8:	2206      	movs	r2, #6
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	2500      	movs	r5, #0
 80062be:	4013      	ands	r3, r2
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d105      	bne.n	80062d0 <_printf_common+0x74>
 80062c4:	6833      	ldr	r3, [r6, #0]
 80062c6:	68e5      	ldr	r5, [r4, #12]
 80062c8:	1aed      	subs	r5, r5, r3
 80062ca:	43eb      	mvns	r3, r5
 80062cc:	17db      	asrs	r3, r3, #31
 80062ce:	401d      	ands	r5, r3
 80062d0:	68a3      	ldr	r3, [r4, #8]
 80062d2:	6922      	ldr	r2, [r4, #16]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	dd01      	ble.n	80062dc <_printf_common+0x80>
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	18ed      	adds	r5, r5, r3
 80062dc:	2600      	movs	r6, #0
 80062de:	42b5      	cmp	r5, r6
 80062e0:	d120      	bne.n	8006324 <_printf_common+0xc8>
 80062e2:	2000      	movs	r0, #0
 80062e4:	e010      	b.n	8006308 <_printf_common+0xac>
 80062e6:	3501      	adds	r5, #1
 80062e8:	68e3      	ldr	r3, [r4, #12]
 80062ea:	6832      	ldr	r2, [r6, #0]
 80062ec:	1a9b      	subs	r3, r3, r2
 80062ee:	42ab      	cmp	r3, r5
 80062f0:	ddd2      	ble.n	8006298 <_printf_common+0x3c>
 80062f2:	0022      	movs	r2, r4
 80062f4:	2301      	movs	r3, #1
 80062f6:	9901      	ldr	r1, [sp, #4]
 80062f8:	9800      	ldr	r0, [sp, #0]
 80062fa:	9f08      	ldr	r7, [sp, #32]
 80062fc:	3219      	adds	r2, #25
 80062fe:	47b8      	blx	r7
 8006300:	3001      	adds	r0, #1
 8006302:	d1f0      	bne.n	80062e6 <_printf_common+0x8a>
 8006304:	2001      	movs	r0, #1
 8006306:	4240      	negs	r0, r0
 8006308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800630a:	2030      	movs	r0, #48	@ 0x30
 800630c:	18e1      	adds	r1, r4, r3
 800630e:	3143      	adds	r1, #67	@ 0x43
 8006310:	7008      	strb	r0, [r1, #0]
 8006312:	0021      	movs	r1, r4
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	3145      	adds	r1, #69	@ 0x45
 8006318:	7809      	ldrb	r1, [r1, #0]
 800631a:	18a2      	adds	r2, r4, r2
 800631c:	3243      	adds	r2, #67	@ 0x43
 800631e:	3302      	adds	r3, #2
 8006320:	7011      	strb	r1, [r2, #0]
 8006322:	e7c1      	b.n	80062a8 <_printf_common+0x4c>
 8006324:	0022      	movs	r2, r4
 8006326:	2301      	movs	r3, #1
 8006328:	9901      	ldr	r1, [sp, #4]
 800632a:	9800      	ldr	r0, [sp, #0]
 800632c:	9f08      	ldr	r7, [sp, #32]
 800632e:	321a      	adds	r2, #26
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	d0e6      	beq.n	8006304 <_printf_common+0xa8>
 8006336:	3601      	adds	r6, #1
 8006338:	e7d1      	b.n	80062de <_printf_common+0x82>
	...

0800633c <_printf_i>:
 800633c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633e:	b08b      	sub	sp, #44	@ 0x2c
 8006340:	9206      	str	r2, [sp, #24]
 8006342:	000a      	movs	r2, r1
 8006344:	3243      	adds	r2, #67	@ 0x43
 8006346:	9307      	str	r3, [sp, #28]
 8006348:	9005      	str	r0, [sp, #20]
 800634a:	9203      	str	r2, [sp, #12]
 800634c:	7e0a      	ldrb	r2, [r1, #24]
 800634e:	000c      	movs	r4, r1
 8006350:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006352:	2a78      	cmp	r2, #120	@ 0x78
 8006354:	d809      	bhi.n	800636a <_printf_i+0x2e>
 8006356:	2a62      	cmp	r2, #98	@ 0x62
 8006358:	d80b      	bhi.n	8006372 <_printf_i+0x36>
 800635a:	2a00      	cmp	r2, #0
 800635c:	d100      	bne.n	8006360 <_printf_i+0x24>
 800635e:	e0bc      	b.n	80064da <_printf_i+0x19e>
 8006360:	497b      	ldr	r1, [pc, #492]	@ (8006550 <_printf_i+0x214>)
 8006362:	9104      	str	r1, [sp, #16]
 8006364:	2a58      	cmp	r2, #88	@ 0x58
 8006366:	d100      	bne.n	800636a <_printf_i+0x2e>
 8006368:	e090      	b.n	800648c <_printf_i+0x150>
 800636a:	0025      	movs	r5, r4
 800636c:	3542      	adds	r5, #66	@ 0x42
 800636e:	702a      	strb	r2, [r5, #0]
 8006370:	e022      	b.n	80063b8 <_printf_i+0x7c>
 8006372:	0010      	movs	r0, r2
 8006374:	3863      	subs	r0, #99	@ 0x63
 8006376:	2815      	cmp	r0, #21
 8006378:	d8f7      	bhi.n	800636a <_printf_i+0x2e>
 800637a:	f7f9 fecd 	bl	8000118 <__gnu_thumb1_case_shi>
 800637e:	0016      	.short	0x0016
 8006380:	fff6001f 	.word	0xfff6001f
 8006384:	fff6fff6 	.word	0xfff6fff6
 8006388:	001ffff6 	.word	0x001ffff6
 800638c:	fff6fff6 	.word	0xfff6fff6
 8006390:	fff6fff6 	.word	0xfff6fff6
 8006394:	003600a1 	.word	0x003600a1
 8006398:	fff60080 	.word	0xfff60080
 800639c:	00b2fff6 	.word	0x00b2fff6
 80063a0:	0036fff6 	.word	0x0036fff6
 80063a4:	fff6fff6 	.word	0xfff6fff6
 80063a8:	0084      	.short	0x0084
 80063aa:	0025      	movs	r5, r4
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	3542      	adds	r5, #66	@ 0x42
 80063b0:	1d11      	adds	r1, r2, #4
 80063b2:	6019      	str	r1, [r3, #0]
 80063b4:	6813      	ldr	r3, [r2, #0]
 80063b6:	702b      	strb	r3, [r5, #0]
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0a0      	b.n	80064fe <_printf_i+0x1c2>
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	6809      	ldr	r1, [r1, #0]
 80063c0:	1d02      	adds	r2, r0, #4
 80063c2:	060d      	lsls	r5, r1, #24
 80063c4:	d50b      	bpl.n	80063de <_printf_i+0xa2>
 80063c6:	6806      	ldr	r6, [r0, #0]
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	2e00      	cmp	r6, #0
 80063cc:	da03      	bge.n	80063d6 <_printf_i+0x9a>
 80063ce:	232d      	movs	r3, #45	@ 0x2d
 80063d0:	9a03      	ldr	r2, [sp, #12]
 80063d2:	4276      	negs	r6, r6
 80063d4:	7013      	strb	r3, [r2, #0]
 80063d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006550 <_printf_i+0x214>)
 80063d8:	270a      	movs	r7, #10
 80063da:	9304      	str	r3, [sp, #16]
 80063dc:	e018      	b.n	8006410 <_printf_i+0xd4>
 80063de:	6806      	ldr	r6, [r0, #0]
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	0649      	lsls	r1, r1, #25
 80063e4:	d5f1      	bpl.n	80063ca <_printf_i+0x8e>
 80063e6:	b236      	sxth	r6, r6
 80063e8:	e7ef      	b.n	80063ca <_printf_i+0x8e>
 80063ea:	6808      	ldr	r0, [r1, #0]
 80063ec:	6819      	ldr	r1, [r3, #0]
 80063ee:	c940      	ldmia	r1!, {r6}
 80063f0:	0605      	lsls	r5, r0, #24
 80063f2:	d402      	bmi.n	80063fa <_printf_i+0xbe>
 80063f4:	0640      	lsls	r0, r0, #25
 80063f6:	d500      	bpl.n	80063fa <_printf_i+0xbe>
 80063f8:	b2b6      	uxth	r6, r6
 80063fa:	6019      	str	r1, [r3, #0]
 80063fc:	4b54      	ldr	r3, [pc, #336]	@ (8006550 <_printf_i+0x214>)
 80063fe:	270a      	movs	r7, #10
 8006400:	9304      	str	r3, [sp, #16]
 8006402:	2a6f      	cmp	r2, #111	@ 0x6f
 8006404:	d100      	bne.n	8006408 <_printf_i+0xcc>
 8006406:	3f02      	subs	r7, #2
 8006408:	0023      	movs	r3, r4
 800640a:	2200      	movs	r2, #0
 800640c:	3343      	adds	r3, #67	@ 0x43
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	60a3      	str	r3, [r4, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	db03      	blt.n	8006420 <_printf_i+0xe4>
 8006418:	2104      	movs	r1, #4
 800641a:	6822      	ldr	r2, [r4, #0]
 800641c:	438a      	bics	r2, r1
 800641e:	6022      	str	r2, [r4, #0]
 8006420:	2e00      	cmp	r6, #0
 8006422:	d102      	bne.n	800642a <_printf_i+0xee>
 8006424:	9d03      	ldr	r5, [sp, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00c      	beq.n	8006444 <_printf_i+0x108>
 800642a:	9d03      	ldr	r5, [sp, #12]
 800642c:	0030      	movs	r0, r6
 800642e:	0039      	movs	r1, r7
 8006430:	f7f9 ff02 	bl	8000238 <__aeabi_uidivmod>
 8006434:	9b04      	ldr	r3, [sp, #16]
 8006436:	3d01      	subs	r5, #1
 8006438:	5c5b      	ldrb	r3, [r3, r1]
 800643a:	702b      	strb	r3, [r5, #0]
 800643c:	0033      	movs	r3, r6
 800643e:	0006      	movs	r6, r0
 8006440:	429f      	cmp	r7, r3
 8006442:	d9f3      	bls.n	800642c <_printf_i+0xf0>
 8006444:	2f08      	cmp	r7, #8
 8006446:	d109      	bne.n	800645c <_printf_i+0x120>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	07db      	lsls	r3, r3, #31
 800644c:	d506      	bpl.n	800645c <_printf_i+0x120>
 800644e:	6862      	ldr	r2, [r4, #4]
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	429a      	cmp	r2, r3
 8006454:	dc02      	bgt.n	800645c <_printf_i+0x120>
 8006456:	2330      	movs	r3, #48	@ 0x30
 8006458:	3d01      	subs	r5, #1
 800645a:	702b      	strb	r3, [r5, #0]
 800645c:	9b03      	ldr	r3, [sp, #12]
 800645e:	1b5b      	subs	r3, r3, r5
 8006460:	6123      	str	r3, [r4, #16]
 8006462:	9b07      	ldr	r3, [sp, #28]
 8006464:	0021      	movs	r1, r4
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	9805      	ldr	r0, [sp, #20]
 800646a:	9b06      	ldr	r3, [sp, #24]
 800646c:	aa09      	add	r2, sp, #36	@ 0x24
 800646e:	f7ff fef5 	bl	800625c <_printf_common>
 8006472:	3001      	adds	r0, #1
 8006474:	d148      	bne.n	8006508 <_printf_i+0x1cc>
 8006476:	2001      	movs	r0, #1
 8006478:	4240      	negs	r0, r0
 800647a:	b00b      	add	sp, #44	@ 0x2c
 800647c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800647e:	2220      	movs	r2, #32
 8006480:	6809      	ldr	r1, [r1, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	6022      	str	r2, [r4, #0]
 8006486:	2278      	movs	r2, #120	@ 0x78
 8006488:	4932      	ldr	r1, [pc, #200]	@ (8006554 <_printf_i+0x218>)
 800648a:	9104      	str	r1, [sp, #16]
 800648c:	0021      	movs	r1, r4
 800648e:	3145      	adds	r1, #69	@ 0x45
 8006490:	700a      	strb	r2, [r1, #0]
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	c940      	ldmia	r1!, {r6}
 8006498:	0610      	lsls	r0, r2, #24
 800649a:	d402      	bmi.n	80064a2 <_printf_i+0x166>
 800649c:	0650      	lsls	r0, r2, #25
 800649e:	d500      	bpl.n	80064a2 <_printf_i+0x166>
 80064a0:	b2b6      	uxth	r6, r6
 80064a2:	6019      	str	r1, [r3, #0]
 80064a4:	07d3      	lsls	r3, r2, #31
 80064a6:	d502      	bpl.n	80064ae <_printf_i+0x172>
 80064a8:	2320      	movs	r3, #32
 80064aa:	4313      	orrs	r3, r2
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	d001      	beq.n	80064b6 <_printf_i+0x17a>
 80064b2:	2710      	movs	r7, #16
 80064b4:	e7a8      	b.n	8006408 <_printf_i+0xcc>
 80064b6:	2220      	movs	r2, #32
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	4393      	bics	r3, r2
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	e7f8      	b.n	80064b2 <_printf_i+0x176>
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	680d      	ldr	r5, [r1, #0]
 80064c4:	1d10      	adds	r0, r2, #4
 80064c6:	6949      	ldr	r1, [r1, #20]
 80064c8:	6018      	str	r0, [r3, #0]
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	062e      	lsls	r6, r5, #24
 80064ce:	d501      	bpl.n	80064d4 <_printf_i+0x198>
 80064d0:	6019      	str	r1, [r3, #0]
 80064d2:	e002      	b.n	80064da <_printf_i+0x19e>
 80064d4:	066d      	lsls	r5, r5, #25
 80064d6:	d5fb      	bpl.n	80064d0 <_printf_i+0x194>
 80064d8:	8019      	strh	r1, [r3, #0]
 80064da:	2300      	movs	r3, #0
 80064dc:	9d03      	ldr	r5, [sp, #12]
 80064de:	6123      	str	r3, [r4, #16]
 80064e0:	e7bf      	b.n	8006462 <_printf_i+0x126>
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	1d11      	adds	r1, r2, #4
 80064e6:	6019      	str	r1, [r3, #0]
 80064e8:	6815      	ldr	r5, [r2, #0]
 80064ea:	2100      	movs	r1, #0
 80064ec:	0028      	movs	r0, r5
 80064ee:	6862      	ldr	r2, [r4, #4]
 80064f0:	f000 fa30 	bl	8006954 <memchr>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d001      	beq.n	80064fc <_printf_i+0x1c0>
 80064f8:	1b40      	subs	r0, r0, r5
 80064fa:	6060      	str	r0, [r4, #4]
 80064fc:	6863      	ldr	r3, [r4, #4]
 80064fe:	6123      	str	r3, [r4, #16]
 8006500:	2300      	movs	r3, #0
 8006502:	9a03      	ldr	r2, [sp, #12]
 8006504:	7013      	strb	r3, [r2, #0]
 8006506:	e7ac      	b.n	8006462 <_printf_i+0x126>
 8006508:	002a      	movs	r2, r5
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	9906      	ldr	r1, [sp, #24]
 800650e:	9805      	ldr	r0, [sp, #20]
 8006510:	9d07      	ldr	r5, [sp, #28]
 8006512:	47a8      	blx	r5
 8006514:	3001      	adds	r0, #1
 8006516:	d0ae      	beq.n	8006476 <_printf_i+0x13a>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	079b      	lsls	r3, r3, #30
 800651c:	d415      	bmi.n	800654a <_printf_i+0x20e>
 800651e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006520:	68e0      	ldr	r0, [r4, #12]
 8006522:	4298      	cmp	r0, r3
 8006524:	daa9      	bge.n	800647a <_printf_i+0x13e>
 8006526:	0018      	movs	r0, r3
 8006528:	e7a7      	b.n	800647a <_printf_i+0x13e>
 800652a:	0022      	movs	r2, r4
 800652c:	2301      	movs	r3, #1
 800652e:	9906      	ldr	r1, [sp, #24]
 8006530:	9805      	ldr	r0, [sp, #20]
 8006532:	9e07      	ldr	r6, [sp, #28]
 8006534:	3219      	adds	r2, #25
 8006536:	47b0      	blx	r6
 8006538:	3001      	adds	r0, #1
 800653a:	d09c      	beq.n	8006476 <_printf_i+0x13a>
 800653c:	3501      	adds	r5, #1
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	42ab      	cmp	r3, r5
 8006546:	dcf0      	bgt.n	800652a <_printf_i+0x1ee>
 8006548:	e7e9      	b.n	800651e <_printf_i+0x1e2>
 800654a:	2500      	movs	r5, #0
 800654c:	e7f7      	b.n	800653e <_printf_i+0x202>
 800654e:	46c0      	nop			@ (mov r8, r8)
 8006550:	08006d1d 	.word	0x08006d1d
 8006554:	08006d2e 	.word	0x08006d2e

08006558 <_scanf_chars>:
 8006558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800655a:	0015      	movs	r5, r2
 800655c:	688a      	ldr	r2, [r1, #8]
 800655e:	000c      	movs	r4, r1
 8006560:	9001      	str	r0, [sp, #4]
 8006562:	2a00      	cmp	r2, #0
 8006564:	d104      	bne.n	8006570 <_scanf_chars+0x18>
 8006566:	698a      	ldr	r2, [r1, #24]
 8006568:	2a00      	cmp	r2, #0
 800656a:	d117      	bne.n	800659c <_scanf_chars+0x44>
 800656c:	3201      	adds	r2, #1
 800656e:	60a2      	str	r2, [r4, #8]
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	06d2      	lsls	r2, r2, #27
 8006574:	d403      	bmi.n	800657e <_scanf_chars+0x26>
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	1d11      	adds	r1, r2, #4
 800657a:	6019      	str	r1, [r3, #0]
 800657c:	6817      	ldr	r7, [r2, #0]
 800657e:	2600      	movs	r6, #0
 8006580:	69a0      	ldr	r0, [r4, #24]
 8006582:	2800      	cmp	r0, #0
 8006584:	d016      	beq.n	80065b4 <_scanf_chars+0x5c>
 8006586:	2801      	cmp	r0, #1
 8006588:	d10b      	bne.n	80065a2 <_scanf_chars+0x4a>
 800658a:	682b      	ldr	r3, [r5, #0]
 800658c:	6962      	ldr	r2, [r4, #20]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	5cd3      	ldrb	r3, [r2, r3]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10e      	bne.n	80065b4 <_scanf_chars+0x5c>
 8006596:	2e00      	cmp	r6, #0
 8006598:	d03b      	beq.n	8006612 <_scanf_chars+0xba>
 800659a:	e029      	b.n	80065f0 <_scanf_chars+0x98>
 800659c:	2201      	movs	r2, #1
 800659e:	4252      	negs	r2, r2
 80065a0:	e7e5      	b.n	800656e <_scanf_chars+0x16>
 80065a2:	2802      	cmp	r0, #2
 80065a4:	d124      	bne.n	80065f0 <_scanf_chars+0x98>
 80065a6:	682b      	ldr	r3, [r5, #0]
 80065a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006614 <_scanf_chars+0xbc>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	5cd3      	ldrb	r3, [r2, r3]
 80065ae:	2208      	movs	r2, #8
 80065b0:	4213      	tst	r3, r2
 80065b2:	d11d      	bne.n	80065f0 <_scanf_chars+0x98>
 80065b4:	2210      	movs	r2, #16
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	3601      	adds	r6, #1
 80065ba:	4213      	tst	r3, r2
 80065bc:	d103      	bne.n	80065c6 <_scanf_chars+0x6e>
 80065be:	682b      	ldr	r3, [r5, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	703b      	strb	r3, [r7, #0]
 80065c4:	3701      	adds	r7, #1
 80065c6:	682a      	ldr	r2, [r5, #0]
 80065c8:	686b      	ldr	r3, [r5, #4]
 80065ca:	3201      	adds	r2, #1
 80065cc:	602a      	str	r2, [r5, #0]
 80065ce:	68a2      	ldr	r2, [r4, #8]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	3a01      	subs	r2, #1
 80065d4:	606b      	str	r3, [r5, #4]
 80065d6:	60a2      	str	r2, [r4, #8]
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d009      	beq.n	80065f0 <_scanf_chars+0x98>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dccf      	bgt.n	8006580 <_scanf_chars+0x28>
 80065e0:	23c0      	movs	r3, #192	@ 0xc0
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	0029      	movs	r1, r5
 80065e6:	58e3      	ldr	r3, [r4, r3]
 80065e8:	9801      	ldr	r0, [sp, #4]
 80065ea:	4798      	blx	r3
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d0c7      	beq.n	8006580 <_scanf_chars+0x28>
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	2310      	movs	r3, #16
 80065f4:	0011      	movs	r1, r2
 80065f6:	4019      	ands	r1, r3
 80065f8:	421a      	tst	r2, r3
 80065fa:	d106      	bne.n	800660a <_scanf_chars+0xb2>
 80065fc:	68e3      	ldr	r3, [r4, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60e3      	str	r3, [r4, #12]
 8006602:	69a3      	ldr	r3, [r4, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d000      	beq.n	800660a <_scanf_chars+0xb2>
 8006608:	7039      	strb	r1, [r7, #0]
 800660a:	2000      	movs	r0, #0
 800660c:	6923      	ldr	r3, [r4, #16]
 800660e:	199b      	adds	r3, r3, r6
 8006610:	6123      	str	r3, [r4, #16]
 8006612:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006614:	08006d5b 	.word	0x08006d5b

08006618 <_scanf_i>:
 8006618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661a:	b08b      	sub	sp, #44	@ 0x2c
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	4b78      	ldr	r3, [pc, #480]	@ (8006800 <_scanf_i+0x1e8>)
 8006620:	0016      	movs	r6, r2
 8006622:	9004      	str	r0, [sp, #16]
 8006624:	aa07      	add	r2, sp, #28
 8006626:	cba1      	ldmia	r3!, {r0, r5, r7}
 8006628:	c2a1      	stmia	r2!, {r0, r5, r7}
 800662a:	4a76      	ldr	r2, [pc, #472]	@ (8006804 <_scanf_i+0x1ec>)
 800662c:	698b      	ldr	r3, [r1, #24]
 800662e:	000c      	movs	r4, r1
 8006630:	9205      	str	r2, [sp, #20]
 8006632:	2b03      	cmp	r3, #3
 8006634:	d101      	bne.n	800663a <_scanf_i+0x22>
 8006636:	4b74      	ldr	r3, [pc, #464]	@ (8006808 <_scanf_i+0x1f0>)
 8006638:	9305      	str	r3, [sp, #20]
 800663a:	22ae      	movs	r2, #174	@ 0xae
 800663c:	2000      	movs	r0, #0
 800663e:	68a3      	ldr	r3, [r4, #8]
 8006640:	0052      	lsls	r2, r2, #1
 8006642:	1e59      	subs	r1, r3, #1
 8006644:	9003      	str	r0, [sp, #12]
 8006646:	4291      	cmp	r1, r2
 8006648:	d905      	bls.n	8006656 <_scanf_i+0x3e>
 800664a:	3b5e      	subs	r3, #94	@ 0x5e
 800664c:	3bff      	subs	r3, #255	@ 0xff
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	235e      	movs	r3, #94	@ 0x5e
 8006652:	33ff      	adds	r3, #255	@ 0xff
 8006654:	60a3      	str	r3, [r4, #8]
 8006656:	0023      	movs	r3, r4
 8006658:	331c      	adds	r3, #28
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	23d0      	movs	r3, #208	@ 0xd0
 800665e:	2700      	movs	r7, #0
 8006660:	6822      	ldr	r2, [r4, #0]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	4313      	orrs	r3, r2
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	9b00      	ldr	r3, [sp, #0]
 800666a:	9302      	str	r3, [sp, #8]
 800666c:	6833      	ldr	r3, [r6, #0]
 800666e:	a807      	add	r0, sp, #28
 8006670:	7819      	ldrb	r1, [r3, #0]
 8006672:	00bb      	lsls	r3, r7, #2
 8006674:	2202      	movs	r2, #2
 8006676:	5818      	ldr	r0, [r3, r0]
 8006678:	f000 f96c 	bl	8006954 <memchr>
 800667c:	2800      	cmp	r0, #0
 800667e:	d029      	beq.n	80066d4 <_scanf_i+0xbc>
 8006680:	2f01      	cmp	r7, #1
 8006682:	d15e      	bne.n	8006742 <_scanf_i+0x12a>
 8006684:	6863      	ldr	r3, [r4, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <_scanf_i+0x80>
 800668a:	3308      	adds	r3, #8
 800668c:	6822      	ldr	r2, [r4, #0]
 800668e:	6063      	str	r3, [r4, #4]
 8006690:	33f9      	adds	r3, #249	@ 0xf9
 8006692:	33ff      	adds	r3, #255	@ 0xff
 8006694:	4313      	orrs	r3, r2
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	4a5c      	ldr	r2, [pc, #368]	@ (800680c <_scanf_i+0x1f4>)
 800669c:	4013      	ands	r3, r2
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	68a3      	ldr	r3, [r4, #8]
 80066a2:	1e5a      	subs	r2, r3, #1
 80066a4:	60a2      	str	r2, [r4, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d014      	beq.n	80066d4 <_scanf_i+0xbc>
 80066aa:	6833      	ldr	r3, [r6, #0]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	6032      	str	r2, [r6, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	9a02      	ldr	r2, [sp, #8]
 80066b4:	7013      	strb	r3, [r2, #0]
 80066b6:	6873      	ldr	r3, [r6, #4]
 80066b8:	1c55      	adds	r5, r2, #1
 80066ba:	3b01      	subs	r3, #1
 80066bc:	6073      	str	r3, [r6, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	dc07      	bgt.n	80066d2 <_scanf_i+0xba>
 80066c2:	23c0      	movs	r3, #192	@ 0xc0
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	0031      	movs	r1, r6
 80066c8:	58e3      	ldr	r3, [r4, r3]
 80066ca:	9804      	ldr	r0, [sp, #16]
 80066cc:	4798      	blx	r3
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d17e      	bne.n	80067d0 <_scanf_i+0x1b8>
 80066d2:	9502      	str	r5, [sp, #8]
 80066d4:	3701      	adds	r7, #1
 80066d6:	2f03      	cmp	r7, #3
 80066d8:	d1c8      	bne.n	800666c <_scanf_i+0x54>
 80066da:	6863      	ldr	r3, [r4, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <_scanf_i+0xcc>
 80066e0:	330a      	adds	r3, #10
 80066e2:	6063      	str	r3, [r4, #4]
 80066e4:	2700      	movs	r7, #0
 80066e6:	6863      	ldr	r3, [r4, #4]
 80066e8:	4949      	ldr	r1, [pc, #292]	@ (8006810 <_scanf_i+0x1f8>)
 80066ea:	6960      	ldr	r0, [r4, #20]
 80066ec:	1ac9      	subs	r1, r1, r3
 80066ee:	f000 f893 	bl	8006818 <__sccl>
 80066f2:	9d02      	ldr	r5, [sp, #8]
 80066f4:	68a3      	ldr	r3, [r4, #8]
 80066f6:	6820      	ldr	r0, [r4, #0]
 80066f8:	9302      	str	r3, [sp, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d03f      	beq.n	800677e <_scanf_i+0x166>
 80066fe:	6831      	ldr	r1, [r6, #0]
 8006700:	6963      	ldr	r3, [r4, #20]
 8006702:	780a      	ldrb	r2, [r1, #0]
 8006704:	5c9b      	ldrb	r3, [r3, r2]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d039      	beq.n	800677e <_scanf_i+0x166>
 800670a:	2a30      	cmp	r2, #48	@ 0x30
 800670c:	d128      	bne.n	8006760 <_scanf_i+0x148>
 800670e:	2380      	movs	r3, #128	@ 0x80
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	4218      	tst	r0, r3
 8006714:	d024      	beq.n	8006760 <_scanf_i+0x148>
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	3701      	adds	r7, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <_scanf_i+0x112>
 800671e:	001a      	movs	r2, r3
 8006720:	9b02      	ldr	r3, [sp, #8]
 8006722:	3a01      	subs	r2, #1
 8006724:	3301      	adds	r3, #1
 8006726:	9203      	str	r2, [sp, #12]
 8006728:	60a3      	str	r3, [r4, #8]
 800672a:	6873      	ldr	r3, [r6, #4]
 800672c:	3b01      	subs	r3, #1
 800672e:	6073      	str	r3, [r6, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dd1c      	ble.n	800676e <_scanf_i+0x156>
 8006734:	6833      	ldr	r3, [r6, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	6033      	str	r3, [r6, #0]
 800673a:	68a3      	ldr	r3, [r4, #8]
 800673c:	3b01      	subs	r3, #1
 800673e:	60a3      	str	r3, [r4, #8]
 8006740:	e7d8      	b.n	80066f4 <_scanf_i+0xdc>
 8006742:	2f02      	cmp	r7, #2
 8006744:	d1ac      	bne.n	80066a0 <_scanf_i+0x88>
 8006746:	23c0      	movs	r3, #192	@ 0xc0
 8006748:	2180      	movs	r1, #128	@ 0x80
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4013      	ands	r3, r2
 8006750:	0089      	lsls	r1, r1, #2
 8006752:	428b      	cmp	r3, r1
 8006754:	d1c1      	bne.n	80066da <_scanf_i+0xc2>
 8006756:	2310      	movs	r3, #16
 8006758:	6063      	str	r3, [r4, #4]
 800675a:	33f0      	adds	r3, #240	@ 0xf0
 800675c:	4313      	orrs	r3, r2
 800675e:	e79e      	b.n	800669e <_scanf_i+0x86>
 8006760:	4b2c      	ldr	r3, [pc, #176]	@ (8006814 <_scanf_i+0x1fc>)
 8006762:	4003      	ands	r3, r0
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	780b      	ldrb	r3, [r1, #0]
 8006768:	702b      	strb	r3, [r5, #0]
 800676a:	3501      	adds	r5, #1
 800676c:	e7dd      	b.n	800672a <_scanf_i+0x112>
 800676e:	23c0      	movs	r3, #192	@ 0xc0
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	0031      	movs	r1, r6
 8006774:	58e3      	ldr	r3, [r4, r3]
 8006776:	9804      	ldr	r0, [sp, #16]
 8006778:	4798      	blx	r3
 800677a:	2800      	cmp	r0, #0
 800677c:	d0dd      	beq.n	800673a <_scanf_i+0x122>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	05db      	lsls	r3, r3, #23
 8006782:	d50e      	bpl.n	80067a2 <_scanf_i+0x18a>
 8006784:	9b00      	ldr	r3, [sp, #0]
 8006786:	429d      	cmp	r5, r3
 8006788:	d907      	bls.n	800679a <_scanf_i+0x182>
 800678a:	23be      	movs	r3, #190	@ 0xbe
 800678c:	3d01      	subs	r5, #1
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	0032      	movs	r2, r6
 8006792:	7829      	ldrb	r1, [r5, #0]
 8006794:	58e3      	ldr	r3, [r4, r3]
 8006796:	9804      	ldr	r0, [sp, #16]
 8006798:	4798      	blx	r3
 800679a:	9b00      	ldr	r3, [sp, #0]
 800679c:	2001      	movs	r0, #1
 800679e:	429d      	cmp	r5, r3
 80067a0:	d029      	beq.n	80067f6 <_scanf_i+0x1de>
 80067a2:	6821      	ldr	r1, [r4, #0]
 80067a4:	2310      	movs	r3, #16
 80067a6:	000a      	movs	r2, r1
 80067a8:	401a      	ands	r2, r3
 80067aa:	4219      	tst	r1, r3
 80067ac:	d11c      	bne.n	80067e8 <_scanf_i+0x1d0>
 80067ae:	702a      	strb	r2, [r5, #0]
 80067b0:	6863      	ldr	r3, [r4, #4]
 80067b2:	9900      	ldr	r1, [sp, #0]
 80067b4:	9804      	ldr	r0, [sp, #16]
 80067b6:	9e05      	ldr	r6, [sp, #20]
 80067b8:	47b0      	blx	r6
 80067ba:	9b01      	ldr	r3, [sp, #4]
 80067bc:	6822      	ldr	r2, [r4, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	0691      	lsls	r1, r2, #26
 80067c2:	d507      	bpl.n	80067d4 <_scanf_i+0x1bc>
 80067c4:	9901      	ldr	r1, [sp, #4]
 80067c6:	1d1a      	adds	r2, r3, #4
 80067c8:	600a      	str	r2, [r1, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6018      	str	r0, [r3, #0]
 80067ce:	e008      	b.n	80067e2 <_scanf_i+0x1ca>
 80067d0:	2700      	movs	r7, #0
 80067d2:	e7d4      	b.n	800677e <_scanf_i+0x166>
 80067d4:	1d19      	adds	r1, r3, #4
 80067d6:	07d6      	lsls	r6, r2, #31
 80067d8:	d50f      	bpl.n	80067fa <_scanf_i+0x1e2>
 80067da:	9a01      	ldr	r2, [sp, #4]
 80067dc:	6011      	str	r1, [r2, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	8018      	strh	r0, [r3, #0]
 80067e2:	68e3      	ldr	r3, [r4, #12]
 80067e4:	3301      	adds	r3, #1
 80067e6:	60e3      	str	r3, [r4, #12]
 80067e8:	2000      	movs	r0, #0
 80067ea:	9b00      	ldr	r3, [sp, #0]
 80067ec:	1aed      	subs	r5, r5, r3
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	19ed      	adds	r5, r5, r7
 80067f2:	195b      	adds	r3, r3, r5
 80067f4:	6123      	str	r3, [r4, #16]
 80067f6:	b00b      	add	sp, #44	@ 0x2c
 80067f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067fa:	9a01      	ldr	r2, [sp, #4]
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	e7e4      	b.n	80067ca <_scanf_i+0x1b2>
 8006800:	08006cc8 	.word	0x08006cc8
 8006804:	08006be9 	.word	0x08006be9
 8006808:	08006add 	.word	0x08006add
 800680c:	fffffaff 	.word	0xfffffaff
 8006810:	08006d4f 	.word	0x08006d4f
 8006814:	fffff6ff 	.word	0xfffff6ff

08006818 <__sccl>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	780b      	ldrb	r3, [r1, #0]
 800681c:	0004      	movs	r4, r0
 800681e:	2b5e      	cmp	r3, #94	@ 0x5e
 8006820:	d018      	beq.n	8006854 <__sccl+0x3c>
 8006822:	2200      	movs	r2, #0
 8006824:	1c4d      	adds	r5, r1, #1
 8006826:	0021      	movs	r1, r4
 8006828:	1c60      	adds	r0, r4, #1
 800682a:	30ff      	adds	r0, #255	@ 0xff
 800682c:	700a      	strb	r2, [r1, #0]
 800682e:	3101      	adds	r1, #1
 8006830:	4281      	cmp	r1, r0
 8006832:	d1fb      	bne.n	800682c <__sccl+0x14>
 8006834:	1e68      	subs	r0, r5, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <__sccl+0x3a>
 800683a:	2101      	movs	r1, #1
 800683c:	404a      	eors	r2, r1
 800683e:	0028      	movs	r0, r5
 8006840:	54e2      	strb	r2, [r4, r3]
 8006842:	7801      	ldrb	r1, [r0, #0]
 8006844:	1c45      	adds	r5, r0, #1
 8006846:	292d      	cmp	r1, #45	@ 0x2d
 8006848:	d00a      	beq.n	8006860 <__sccl+0x48>
 800684a:	295d      	cmp	r1, #93	@ 0x5d
 800684c:	d01b      	beq.n	8006886 <__sccl+0x6e>
 800684e:	2900      	cmp	r1, #0
 8006850:	d104      	bne.n	800685c <__sccl+0x44>
 8006852:	bd70      	pop	{r4, r5, r6, pc}
 8006854:	2201      	movs	r2, #1
 8006856:	784b      	ldrb	r3, [r1, #1]
 8006858:	1c8d      	adds	r5, r1, #2
 800685a:	e7e4      	b.n	8006826 <__sccl+0xe>
 800685c:	000b      	movs	r3, r1
 800685e:	e7ee      	b.n	800683e <__sccl+0x26>
 8006860:	7846      	ldrb	r6, [r0, #1]
 8006862:	2e5d      	cmp	r6, #93	@ 0x5d
 8006864:	d0fa      	beq.n	800685c <__sccl+0x44>
 8006866:	42b3      	cmp	r3, r6
 8006868:	dcf8      	bgt.n	800685c <__sccl+0x44>
 800686a:	0019      	movs	r1, r3
 800686c:	3002      	adds	r0, #2
 800686e:	3101      	adds	r1, #1
 8006870:	5462      	strb	r2, [r4, r1]
 8006872:	428e      	cmp	r6, r1
 8006874:	dcfb      	bgt.n	800686e <__sccl+0x56>
 8006876:	2100      	movs	r1, #0
 8006878:	1c5d      	adds	r5, r3, #1
 800687a:	42b3      	cmp	r3, r6
 800687c:	da01      	bge.n	8006882 <__sccl+0x6a>
 800687e:	1af1      	subs	r1, r6, r3
 8006880:	3901      	subs	r1, #1
 8006882:	186b      	adds	r3, r5, r1
 8006884:	e7dd      	b.n	8006842 <__sccl+0x2a>
 8006886:	0028      	movs	r0, r5
 8006888:	e7e3      	b.n	8006852 <__sccl+0x3a>
	...

0800688c <__submore>:
 800688c:	000b      	movs	r3, r1
 800688e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006890:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8006892:	3344      	adds	r3, #68	@ 0x44
 8006894:	000c      	movs	r4, r1
 8006896:	429d      	cmp	r5, r3
 8006898:	d11c      	bne.n	80068d4 <__submore+0x48>
 800689a:	2680      	movs	r6, #128	@ 0x80
 800689c:	00f6      	lsls	r6, r6, #3
 800689e:	0031      	movs	r1, r6
 80068a0:	f7ff f930 	bl	8005b04 <_malloc_r>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d102      	bne.n	80068ae <__submore+0x22>
 80068a8:	2001      	movs	r0, #1
 80068aa:	4240      	negs	r0, r0
 80068ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068ae:	0023      	movs	r3, r4
 80068b0:	6360      	str	r0, [r4, #52]	@ 0x34
 80068b2:	63a6      	str	r6, [r4, #56]	@ 0x38
 80068b4:	3346      	adds	r3, #70	@ 0x46
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	4b10      	ldr	r3, [pc, #64]	@ (80068fc <__submore+0x70>)
 80068ba:	54c2      	strb	r2, [r0, r3]
 80068bc:	0023      	movs	r3, r4
 80068be:	3345      	adds	r3, #69	@ 0x45
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006900 <__submore+0x74>)
 80068c4:	54c2      	strb	r2, [r0, r3]
 80068c6:	782a      	ldrb	r2, [r5, #0]
 80068c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006904 <__submore+0x78>)
 80068ca:	54c2      	strb	r2, [r0, r3]
 80068cc:	18c0      	adds	r0, r0, r3
 80068ce:	6020      	str	r0, [r4, #0]
 80068d0:	2000      	movs	r0, #0
 80068d2:	e7eb      	b.n	80068ac <__submore+0x20>
 80068d4:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 80068d6:	0029      	movs	r1, r5
 80068d8:	0073      	lsls	r3, r6, #1
 80068da:	001a      	movs	r2, r3
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	f000 f844 	bl	800696a <_realloc_r>
 80068e2:	1e05      	subs	r5, r0, #0
 80068e4:	d0e0      	beq.n	80068a8 <__submore+0x1c>
 80068e6:	1987      	adds	r7, r0, r6
 80068e8:	0001      	movs	r1, r0
 80068ea:	0032      	movs	r2, r6
 80068ec:	0038      	movs	r0, r7
 80068ee:	f7ff f893 	bl	8005a18 <memcpy>
 80068f2:	9b01      	ldr	r3, [sp, #4]
 80068f4:	6027      	str	r7, [r4, #0]
 80068f6:	6365      	str	r5, [r4, #52]	@ 0x34
 80068f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80068fa:	e7e9      	b.n	80068d0 <__submore+0x44>
 80068fc:	000003ff 	.word	0x000003ff
 8006900:	000003fe 	.word	0x000003fe
 8006904:	000003fd 	.word	0x000003fd

08006908 <memmove>:
 8006908:	b510      	push	{r4, lr}
 800690a:	4288      	cmp	r0, r1
 800690c:	d806      	bhi.n	800691c <memmove+0x14>
 800690e:	2300      	movs	r3, #0
 8006910:	429a      	cmp	r2, r3
 8006912:	d008      	beq.n	8006926 <memmove+0x1e>
 8006914:	5ccc      	ldrb	r4, [r1, r3]
 8006916:	54c4      	strb	r4, [r0, r3]
 8006918:	3301      	adds	r3, #1
 800691a:	e7f9      	b.n	8006910 <memmove+0x8>
 800691c:	188b      	adds	r3, r1, r2
 800691e:	4298      	cmp	r0, r3
 8006920:	d2f5      	bcs.n	800690e <memmove+0x6>
 8006922:	3a01      	subs	r2, #1
 8006924:	d200      	bcs.n	8006928 <memmove+0x20>
 8006926:	bd10      	pop	{r4, pc}
 8006928:	5c8b      	ldrb	r3, [r1, r2]
 800692a:	5483      	strb	r3, [r0, r2]
 800692c:	e7f9      	b.n	8006922 <memmove+0x1a>
	...

08006930 <_sbrk_r>:
 8006930:	2300      	movs	r3, #0
 8006932:	b570      	push	{r4, r5, r6, lr}
 8006934:	4d06      	ldr	r5, [pc, #24]	@ (8006950 <_sbrk_r+0x20>)
 8006936:	0004      	movs	r4, r0
 8006938:	0008      	movs	r0, r1
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	f7fa fab6 	bl	8000eac <_sbrk>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d103      	bne.n	800694c <_sbrk_r+0x1c>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d000      	beq.n	800694c <_sbrk_r+0x1c>
 800694a:	6023      	str	r3, [r4, #0]
 800694c:	bd70      	pop	{r4, r5, r6, pc}
 800694e:	46c0      	nop			@ (mov r8, r8)
 8006950:	20000dd8 	.word	0x20000dd8

08006954 <memchr>:
 8006954:	b2c9      	uxtb	r1, r1
 8006956:	1882      	adds	r2, r0, r2
 8006958:	4290      	cmp	r0, r2
 800695a:	d101      	bne.n	8006960 <memchr+0xc>
 800695c:	2000      	movs	r0, #0
 800695e:	4770      	bx	lr
 8006960:	7803      	ldrb	r3, [r0, #0]
 8006962:	428b      	cmp	r3, r1
 8006964:	d0fb      	beq.n	800695e <memchr+0xa>
 8006966:	3001      	adds	r0, #1
 8006968:	e7f6      	b.n	8006958 <memchr+0x4>

0800696a <_realloc_r>:
 800696a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800696c:	0006      	movs	r6, r0
 800696e:	000c      	movs	r4, r1
 8006970:	0015      	movs	r5, r2
 8006972:	2900      	cmp	r1, #0
 8006974:	d105      	bne.n	8006982 <_realloc_r+0x18>
 8006976:	0011      	movs	r1, r2
 8006978:	f7ff f8c4 	bl	8005b04 <_malloc_r>
 800697c:	0004      	movs	r4, r0
 800697e:	0020      	movs	r0, r4
 8006980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006982:	2a00      	cmp	r2, #0
 8006984:	d103      	bne.n	800698e <_realloc_r+0x24>
 8006986:	f7ff f851 	bl	8005a2c <_free_r>
 800698a:	2400      	movs	r4, #0
 800698c:	e7f7      	b.n	800697e <_realloc_r+0x14>
 800698e:	f000 f92f 	bl	8006bf0 <_malloc_usable_size_r>
 8006992:	0007      	movs	r7, r0
 8006994:	4285      	cmp	r5, r0
 8006996:	d802      	bhi.n	800699e <_realloc_r+0x34>
 8006998:	0843      	lsrs	r3, r0, #1
 800699a:	42ab      	cmp	r3, r5
 800699c:	d3ef      	bcc.n	800697e <_realloc_r+0x14>
 800699e:	0029      	movs	r1, r5
 80069a0:	0030      	movs	r0, r6
 80069a2:	f7ff f8af 	bl	8005b04 <_malloc_r>
 80069a6:	9001      	str	r0, [sp, #4]
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d0ee      	beq.n	800698a <_realloc_r+0x20>
 80069ac:	002a      	movs	r2, r5
 80069ae:	42bd      	cmp	r5, r7
 80069b0:	d900      	bls.n	80069b4 <_realloc_r+0x4a>
 80069b2:	003a      	movs	r2, r7
 80069b4:	0021      	movs	r1, r4
 80069b6:	9801      	ldr	r0, [sp, #4]
 80069b8:	f7ff f82e 	bl	8005a18 <memcpy>
 80069bc:	0021      	movs	r1, r4
 80069be:	0030      	movs	r0, r6
 80069c0:	f7ff f834 	bl	8005a2c <_free_r>
 80069c4:	9c01      	ldr	r4, [sp, #4]
 80069c6:	e7da      	b.n	800697e <_realloc_r+0x14>

080069c8 <_strtol_l.constprop.0>:
 80069c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ca:	b085      	sub	sp, #20
 80069cc:	0017      	movs	r7, r2
 80069ce:	001e      	movs	r6, r3
 80069d0:	9003      	str	r0, [sp, #12]
 80069d2:	9101      	str	r1, [sp, #4]
 80069d4:	2b24      	cmp	r3, #36	@ 0x24
 80069d6:	d844      	bhi.n	8006a62 <_strtol_l.constprop.0+0x9a>
 80069d8:	000c      	movs	r4, r1
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d041      	beq.n	8006a62 <_strtol_l.constprop.0+0x9a>
 80069de:	4b3d      	ldr	r3, [pc, #244]	@ (8006ad4 <_strtol_l.constprop.0+0x10c>)
 80069e0:	2208      	movs	r2, #8
 80069e2:	469c      	mov	ip, r3
 80069e4:	0023      	movs	r3, r4
 80069e6:	4661      	mov	r1, ip
 80069e8:	781d      	ldrb	r5, [r3, #0]
 80069ea:	3401      	adds	r4, #1
 80069ec:	5d48      	ldrb	r0, [r1, r5]
 80069ee:	0001      	movs	r1, r0
 80069f0:	4011      	ands	r1, r2
 80069f2:	4210      	tst	r0, r2
 80069f4:	d1f6      	bne.n	80069e4 <_strtol_l.constprop.0+0x1c>
 80069f6:	2d2d      	cmp	r5, #45	@ 0x2d
 80069f8:	d13a      	bne.n	8006a70 <_strtol_l.constprop.0+0xa8>
 80069fa:	7825      	ldrb	r5, [r4, #0]
 80069fc:	1c9c      	adds	r4, r3, #2
 80069fe:	2301      	movs	r3, #1
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	2210      	movs	r2, #16
 8006a04:	0033      	movs	r3, r6
 8006a06:	4393      	bics	r3, r2
 8006a08:	d109      	bne.n	8006a1e <_strtol_l.constprop.0+0x56>
 8006a0a:	2d30      	cmp	r5, #48	@ 0x30
 8006a0c:	d136      	bne.n	8006a7c <_strtol_l.constprop.0+0xb4>
 8006a0e:	2120      	movs	r1, #32
 8006a10:	7823      	ldrb	r3, [r4, #0]
 8006a12:	438b      	bics	r3, r1
 8006a14:	2b58      	cmp	r3, #88	@ 0x58
 8006a16:	d131      	bne.n	8006a7c <_strtol_l.constprop.0+0xb4>
 8006a18:	0016      	movs	r6, r2
 8006a1a:	7865      	ldrb	r5, [r4, #1]
 8006a1c:	3402      	adds	r4, #2
 8006a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8006ad8 <_strtol_l.constprop.0+0x110>)
 8006a20:	9b00      	ldr	r3, [sp, #0]
 8006a22:	4694      	mov	ip, r2
 8006a24:	4463      	add	r3, ip
 8006a26:	0031      	movs	r1, r6
 8006a28:	0018      	movs	r0, r3
 8006a2a:	9302      	str	r3, [sp, #8]
 8006a2c:	f7f9 fc04 	bl	8000238 <__aeabi_uidivmod>
 8006a30:	2200      	movs	r2, #0
 8006a32:	4684      	mov	ip, r0
 8006a34:	0010      	movs	r0, r2
 8006a36:	002b      	movs	r3, r5
 8006a38:	3b30      	subs	r3, #48	@ 0x30
 8006a3a:	2b09      	cmp	r3, #9
 8006a3c:	d825      	bhi.n	8006a8a <_strtol_l.constprop.0+0xc2>
 8006a3e:	001d      	movs	r5, r3
 8006a40:	42ae      	cmp	r6, r5
 8006a42:	dd31      	ble.n	8006aa8 <_strtol_l.constprop.0+0xe0>
 8006a44:	1c53      	adds	r3, r2, #1
 8006a46:	d009      	beq.n	8006a5c <_strtol_l.constprop.0+0x94>
 8006a48:	2201      	movs	r2, #1
 8006a4a:	4252      	negs	r2, r2
 8006a4c:	4584      	cmp	ip, r0
 8006a4e:	d305      	bcc.n	8006a5c <_strtol_l.constprop.0+0x94>
 8006a50:	d101      	bne.n	8006a56 <_strtol_l.constprop.0+0x8e>
 8006a52:	42a9      	cmp	r1, r5
 8006a54:	db25      	blt.n	8006aa2 <_strtol_l.constprop.0+0xda>
 8006a56:	2201      	movs	r2, #1
 8006a58:	4370      	muls	r0, r6
 8006a5a:	1828      	adds	r0, r5, r0
 8006a5c:	7825      	ldrb	r5, [r4, #0]
 8006a5e:	3401      	adds	r4, #1
 8006a60:	e7e9      	b.n	8006a36 <_strtol_l.constprop.0+0x6e>
 8006a62:	f7fe ffad 	bl	80059c0 <__errno>
 8006a66:	2316      	movs	r3, #22
 8006a68:	6003      	str	r3, [r0, #0]
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	b005      	add	sp, #20
 8006a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a70:	9100      	str	r1, [sp, #0]
 8006a72:	2d2b      	cmp	r5, #43	@ 0x2b
 8006a74:	d1c5      	bne.n	8006a02 <_strtol_l.constprop.0+0x3a>
 8006a76:	7825      	ldrb	r5, [r4, #0]
 8006a78:	1c9c      	adds	r4, r3, #2
 8006a7a:	e7c2      	b.n	8006a02 <_strtol_l.constprop.0+0x3a>
 8006a7c:	2e00      	cmp	r6, #0
 8006a7e:	d1ce      	bne.n	8006a1e <_strtol_l.constprop.0+0x56>
 8006a80:	3608      	adds	r6, #8
 8006a82:	2d30      	cmp	r5, #48	@ 0x30
 8006a84:	d0cb      	beq.n	8006a1e <_strtol_l.constprop.0+0x56>
 8006a86:	3602      	adds	r6, #2
 8006a88:	e7c9      	b.n	8006a1e <_strtol_l.constprop.0+0x56>
 8006a8a:	002b      	movs	r3, r5
 8006a8c:	3b41      	subs	r3, #65	@ 0x41
 8006a8e:	2b19      	cmp	r3, #25
 8006a90:	d801      	bhi.n	8006a96 <_strtol_l.constprop.0+0xce>
 8006a92:	3d37      	subs	r5, #55	@ 0x37
 8006a94:	e7d4      	b.n	8006a40 <_strtol_l.constprop.0+0x78>
 8006a96:	002b      	movs	r3, r5
 8006a98:	3b61      	subs	r3, #97	@ 0x61
 8006a9a:	2b19      	cmp	r3, #25
 8006a9c:	d804      	bhi.n	8006aa8 <_strtol_l.constprop.0+0xe0>
 8006a9e:	3d57      	subs	r5, #87	@ 0x57
 8006aa0:	e7ce      	b.n	8006a40 <_strtol_l.constprop.0+0x78>
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4252      	negs	r2, r2
 8006aa6:	e7d9      	b.n	8006a5c <_strtol_l.constprop.0+0x94>
 8006aa8:	1c53      	adds	r3, r2, #1
 8006aaa:	d108      	bne.n	8006abe <_strtol_l.constprop.0+0xf6>
 8006aac:	2322      	movs	r3, #34	@ 0x22
 8006aae:	9a03      	ldr	r2, [sp, #12]
 8006ab0:	9802      	ldr	r0, [sp, #8]
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	2f00      	cmp	r7, #0
 8006ab6:	d0d9      	beq.n	8006a6c <_strtol_l.constprop.0+0xa4>
 8006ab8:	1e63      	subs	r3, r4, #1
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	e007      	b.n	8006ace <_strtol_l.constprop.0+0x106>
 8006abe:	9b00      	ldr	r3, [sp, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d000      	beq.n	8006ac6 <_strtol_l.constprop.0+0xfe>
 8006ac4:	4240      	negs	r0, r0
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	d0d0      	beq.n	8006a6c <_strtol_l.constprop.0+0xa4>
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	d1f4      	bne.n	8006ab8 <_strtol_l.constprop.0+0xf0>
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
 8006ad2:	e7cb      	b.n	8006a6c <_strtol_l.constprop.0+0xa4>
 8006ad4:	08006d5b 	.word	0x08006d5b
 8006ad8:	7fffffff 	.word	0x7fffffff

08006adc <_strtol_r>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	f7ff ff73 	bl	80069c8 <_strtol_l.constprop.0>
 8006ae2:	bd10      	pop	{r4, pc}

08006ae4 <_strtoul_l.constprop.0>:
 8006ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae6:	001e      	movs	r6, r3
 8006ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8006be4 <_strtoul_l.constprop.0+0x100>)
 8006aea:	0017      	movs	r7, r2
 8006aec:	000c      	movs	r4, r1
 8006aee:	469c      	mov	ip, r3
 8006af0:	2208      	movs	r2, #8
 8006af2:	b085      	sub	sp, #20
 8006af4:	9003      	str	r0, [sp, #12]
 8006af6:	9100      	str	r1, [sp, #0]
 8006af8:	0023      	movs	r3, r4
 8006afa:	4661      	mov	r1, ip
 8006afc:	781d      	ldrb	r5, [r3, #0]
 8006afe:	3401      	adds	r4, #1
 8006b00:	5d48      	ldrb	r0, [r1, r5]
 8006b02:	0001      	movs	r1, r0
 8006b04:	4011      	ands	r1, r2
 8006b06:	4210      	tst	r0, r2
 8006b08:	d1f6      	bne.n	8006af8 <_strtoul_l.constprop.0+0x14>
 8006b0a:	2d2d      	cmp	r5, #45	@ 0x2d
 8006b0c:	d137      	bne.n	8006b7e <_strtoul_l.constprop.0+0x9a>
 8006b0e:	7825      	ldrb	r5, [r4, #0]
 8006b10:	1c9c      	adds	r4, r3, #2
 8006b12:	2301      	movs	r3, #1
 8006b14:	9302      	str	r3, [sp, #8]
 8006b16:	2210      	movs	r2, #16
 8006b18:	0033      	movs	r3, r6
 8006b1a:	4393      	bics	r3, r2
 8006b1c:	d109      	bne.n	8006b32 <_strtoul_l.constprop.0+0x4e>
 8006b1e:	2d30      	cmp	r5, #48	@ 0x30
 8006b20:	d133      	bne.n	8006b8a <_strtoul_l.constprop.0+0xa6>
 8006b22:	2120      	movs	r1, #32
 8006b24:	7823      	ldrb	r3, [r4, #0]
 8006b26:	438b      	bics	r3, r1
 8006b28:	2b58      	cmp	r3, #88	@ 0x58
 8006b2a:	d12e      	bne.n	8006b8a <_strtoul_l.constprop.0+0xa6>
 8006b2c:	0016      	movs	r6, r2
 8006b2e:	7865      	ldrb	r5, [r4, #1]
 8006b30:	3402      	adds	r4, #2
 8006b32:	2001      	movs	r0, #1
 8006b34:	0031      	movs	r1, r6
 8006b36:	4240      	negs	r0, r0
 8006b38:	f7f9 faf8 	bl	800012c <__udivsi3>
 8006b3c:	9001      	str	r0, [sp, #4]
 8006b3e:	2001      	movs	r0, #1
 8006b40:	0031      	movs	r1, r6
 8006b42:	4240      	negs	r0, r0
 8006b44:	f7f9 fb78 	bl	8000238 <__aeabi_uidivmod>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	4694      	mov	ip, r2
 8006b50:	002a      	movs	r2, r5
 8006b52:	3a30      	subs	r2, #48	@ 0x30
 8006b54:	2a09      	cmp	r2, #9
 8006b56:	d81f      	bhi.n	8006b98 <_strtoul_l.constprop.0+0xb4>
 8006b58:	0015      	movs	r5, r2
 8006b5a:	42ae      	cmp	r6, r5
 8006b5c:	dd2b      	ble.n	8006bb6 <_strtoul_l.constprop.0+0xd2>
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	d00a      	beq.n	8006b78 <_strtoul_l.constprop.0+0x94>
 8006b62:	2301      	movs	r3, #1
 8006b64:	9a01      	ldr	r2, [sp, #4]
 8006b66:	425b      	negs	r3, r3
 8006b68:	4282      	cmp	r2, r0
 8006b6a:	d305      	bcc.n	8006b78 <_strtoul_l.constprop.0+0x94>
 8006b6c:	d101      	bne.n	8006b72 <_strtoul_l.constprop.0+0x8e>
 8006b6e:	42a9      	cmp	r1, r5
 8006b70:	db1e      	blt.n	8006bb0 <_strtoul_l.constprop.0+0xcc>
 8006b72:	4663      	mov	r3, ip
 8006b74:	4370      	muls	r0, r6
 8006b76:	1828      	adds	r0, r5, r0
 8006b78:	7825      	ldrb	r5, [r4, #0]
 8006b7a:	3401      	adds	r4, #1
 8006b7c:	e7e8      	b.n	8006b50 <_strtoul_l.constprop.0+0x6c>
 8006b7e:	9102      	str	r1, [sp, #8]
 8006b80:	2d2b      	cmp	r5, #43	@ 0x2b
 8006b82:	d1c8      	bne.n	8006b16 <_strtoul_l.constprop.0+0x32>
 8006b84:	7825      	ldrb	r5, [r4, #0]
 8006b86:	1c9c      	adds	r4, r3, #2
 8006b88:	e7c5      	b.n	8006b16 <_strtoul_l.constprop.0+0x32>
 8006b8a:	2e00      	cmp	r6, #0
 8006b8c:	d1d1      	bne.n	8006b32 <_strtoul_l.constprop.0+0x4e>
 8006b8e:	3608      	adds	r6, #8
 8006b90:	2d30      	cmp	r5, #48	@ 0x30
 8006b92:	d0ce      	beq.n	8006b32 <_strtoul_l.constprop.0+0x4e>
 8006b94:	3602      	adds	r6, #2
 8006b96:	e7cc      	b.n	8006b32 <_strtoul_l.constprop.0+0x4e>
 8006b98:	002a      	movs	r2, r5
 8006b9a:	3a41      	subs	r2, #65	@ 0x41
 8006b9c:	2a19      	cmp	r2, #25
 8006b9e:	d801      	bhi.n	8006ba4 <_strtoul_l.constprop.0+0xc0>
 8006ba0:	3d37      	subs	r5, #55	@ 0x37
 8006ba2:	e7da      	b.n	8006b5a <_strtoul_l.constprop.0+0x76>
 8006ba4:	002a      	movs	r2, r5
 8006ba6:	3a61      	subs	r2, #97	@ 0x61
 8006ba8:	2a19      	cmp	r2, #25
 8006baa:	d804      	bhi.n	8006bb6 <_strtoul_l.constprop.0+0xd2>
 8006bac:	3d57      	subs	r5, #87	@ 0x57
 8006bae:	e7d4      	b.n	8006b5a <_strtoul_l.constprop.0+0x76>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	425b      	negs	r3, r3
 8006bb4:	e7e0      	b.n	8006b78 <_strtoul_l.constprop.0+0x94>
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	d107      	bne.n	8006bca <_strtoul_l.constprop.0+0xe6>
 8006bba:	2222      	movs	r2, #34	@ 0x22
 8006bbc:	9903      	ldr	r1, [sp, #12]
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	600a      	str	r2, [r1, #0]
 8006bc2:	2f00      	cmp	r7, #0
 8006bc4:	d109      	bne.n	8006bda <_strtoul_l.constprop.0+0xf6>
 8006bc6:	b005      	add	sp, #20
 8006bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bca:	9a02      	ldr	r2, [sp, #8]
 8006bcc:	2a00      	cmp	r2, #0
 8006bce:	d000      	beq.n	8006bd2 <_strtoul_l.constprop.0+0xee>
 8006bd0:	4240      	negs	r0, r0
 8006bd2:	2f00      	cmp	r7, #0
 8006bd4:	d0f7      	beq.n	8006bc6 <_strtoul_l.constprop.0+0xe2>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <_strtoul_l.constprop.0+0xfa>
 8006bda:	1e63      	subs	r3, r4, #1
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	9b00      	ldr	r3, [sp, #0]
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	e7f0      	b.n	8006bc6 <_strtoul_l.constprop.0+0xe2>
 8006be4:	08006d5b 	.word	0x08006d5b

08006be8 <_strtoul_r>:
 8006be8:	b510      	push	{r4, lr}
 8006bea:	f7ff ff7b 	bl	8006ae4 <_strtoul_l.constprop.0>
 8006bee:	bd10      	pop	{r4, pc}

08006bf0 <_malloc_usable_size_r>:
 8006bf0:	1f0b      	subs	r3, r1, #4
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	1f18      	subs	r0, r3, #4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da01      	bge.n	8006bfe <_malloc_usable_size_r+0xe>
 8006bfa:	580b      	ldr	r3, [r1, r0]
 8006bfc:	18c0      	adds	r0, r0, r3
 8006bfe:	4770      	bx	lr

08006c00 <_init>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	46c0      	nop			@ (mov r8, r8)
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr

08006c0c <_fini>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	46c0      	nop			@ (mov r8, r8)
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr
